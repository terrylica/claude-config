[project]
name = "ml_feature_set"
version = "1.1.19"
description = "A feature generation module for resampled candle stick data, particularly used for machine learning (enigma)"
readme = "README.md"
requires-python = ">=3.10"
license = "LicenseRef-Proprietary" # Custom SPDX identifier for proprietary license (PEP 639 compliant)
license-files = ["LICENSE"]  # Path to license file (required for custom licenses)
authors = [
    {name = "EonLabs", email = "chen@eonlabs.com"},
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.6",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
]
dependencies = [ # only numerical and data processing libraries are versioned carefully for interoperability
    "numpy==1.24.4", # most sensitive to version changes so locked on 1.24.4 unless there is a good reason to upgrade
    "numba>=0.60.0,<0.61.0", # allow patch version changes
    "scipy>=1.14.0,<1.15.0", # allow patch version changes
    "pandas>=2.2.1,<2.3.0", # allow patch version changes
    "talipp>=2.4.0,<2.5.0", # allow patch version changes
]

[project.optional-dependencies]
dev = [
    "twine>=6.1.0,<7.0.0", # allow upgrade within major version; for uploading the package to PyPI
    "build>=1.2.0,<1.3.0", # allow patch version changes; for building the package according to the latest best practices suggested by PEP 621 â€“ Storing project metadata in pyproject.toml https://peps.python.org/pep-0621/
    # the following is for linting and formatting so we can use the latest minor version
    "pyupgrade>=3.19.0,<4.0.0", # allow upgrade within major version; for upgrading Python code to match the `requires-python` version
    "ruff>=0.11.1,<1.0.0", # allow upgrade within major version; for linting and formatting - replaces pylint and autoflake
    "pytest>=8.0.0,<9.0.0", # allow upgrade within major version; for running tests
    # the following is for visualizations such as matplotlib, plotly, dash, etc, so we can use the latest minor version
    "matplotlib>=3.10.3,<4.0.0", # allow upgrade within major version
    "plotly>=6.1.0,<7.0.0", # allow upgrade within major version
    "dash>=3.0.4,<4.0.0", # allow upgrade within major version
    "dash-bootstrap-components>=2.0.2,<3.0.0", # allow upgrade within major version
    "rich>=14.0.0", # allow upgrade within major version
]
[project.urls]
Homepage = "https://github.com/Eon-Labs/ml-feature-set"

[tool.setuptools.packages.find]

[tool.setuptools.package-data]
"ml_feature_set" = ["sample_data/*.csv"]

# The [build-system] section only affects build tools (like `python -m build`),
# not pip install with -e flag. When installing with `pip install -e '.[dev]'`,
# pip doesn't check or update setuptools versions in build-system.requires
[build-system]
requires = ["setuptools>=80.6.0,<81.7.0", "wheel>=0.45.0,<0.46.0"] # allow patch version changes; Ensuring newer setuptools in dev environment
build-backend = "setuptools.build_meta"
