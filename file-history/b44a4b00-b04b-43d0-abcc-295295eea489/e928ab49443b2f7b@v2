# Bug Reproduction Summary - Clean Branch from origin/main

**Branch**: `reproduce-validation-bug` (created from origin/main)
**Date**: 2025-10-07

## Summary

Created minimal reproductions to isolate the validation framework bug. However, **simple simulations all PASS**, which reveals the issue is specifically in **atr-adaptive-laguerre's vectorized implementation**.

## Tests Created

### 1. Minimal Reproduction v1 (`minimal_reproduce_bug.py`)
**Approach**: FeatureSet does its own filtering by `actual_ready_time`
**Result**: ✓ PASS (30/30 validation steps)
**File**: `/workspace/ml_feature_set/bundled/minimal_reproduce_bug.py`

### 2. Minimal Reproduction v2 (`minimal_reproduce_bug_v2.py`)
**Approach**: Delegates to package-like function with `availability_column` parameter
**Result**: ✓ PASS (30/30 validation steps)
**File**: `/workspace/ml_feature_set/bundled/minimal_reproduce_bug_v2.py`

### 3. Standalone Test (`test_minimal_standalone.py`)
**Approach**: Direct test without framework
**Result**: ✓ PASS (0.0 difference)
**File**: `/workspace/test_minimal_standalone.py`

## Key Findings

### The Framework Works Correctly
Both minimal reproductions pass validation, proving:
- ✓ Framework correctly creates `actual_ready_time` column
- ✓ Framework correctly filters prediction data
- ✓ Framework correctly passes data to FeatureSets
- ✓ Simple filtering logic works as expected

### The Bug is in atr-adaptive-laguerre's Vectorized Logic

The issue is specific to how atr-adaptive-laguerre uses **vectorized `np.searchsorted()`**:

**atr-adaptive-laguerre approach** (from `/opt/conda/lib/python3.10/site-packages/atr_adaptive_laguerre/features/atr_adaptive_rsi.py:898,913`):
```python
# Vectorized filtering - operates on ENTIRE dataset indices
mult1_availability = df[avail_col].iloc[mult1_end_indices].values  # Get availability times
mult1_indices = np.searchsorted(mult1_availability, base_times, side='left') - 1  # Find indices

# Use these indices to grab features
mult1_rsi = features_mult1_all.iloc[mult1_indices].values
```

**Problem**: When validation framework passes **filtered prediction data**:
1. The DataFrame is smaller (only rows up to validation time)
2. But searchsorted still returns indices as if operating on full data
3. Indices are off-by-one or point to wrong rows
4. Result: Wrong feature values (0.0526 difference = v1.0.4 bug signature)

## Why Our Simulations Don't Reproduce It

Our simulations use **row-by-row filtering** (not vectorized):
```python
for i in range(len(df)):
    available_data = df[df[availability_column] <= current_availability]
    # This always works correctly regardless of DataFrame size
```

atr-adaptive-laguerre uses **vectorized index mapping**:
```python
# Operates on indices - breaks when DataFrame is filtered
mult1_indices = np.searchsorted(mult1_availability, base_times, side='left') - 1
```

## The Real Issue

**Validation framework creates prediction data** (`validate_feature_set.py:182`):
```python
current_df = source_df.iloc[start_idx : last_valid_idx + 1]  # Filtered DataFrame
```

**Then passes it to build_features** with same `ready_time_offset`:
```python
pred_source_list.append({
    "data_df": current_df,  # ← Filtered data
    "ready_time_offset": source.get("ready_time_offset"),  # ← Same offset
})
```

**Problem**:
- `current_df` is a SLICE of original DataFrame
- Index values are preserved from original DataFrame (e.g., indices 1000-1360)
- But `current_df.iloc[0]` is actually original index 1000
- atr-adaptive-laguerre's searchsorted logic assumes iloc indices start at 0
- **Index mismatch** causes wrong features!

## Root Cause

**The validation framework preserves DataFrame indices when slicing**:
```python
current_df = source_df.iloc[start_idx : last_valid_idx + 1]
# current_df has indices [start_idx, start_idx+1, ..., last_valid_idx]
# NOT [0, 1, 2, ..., length-1]
```

**atr-adaptive-laguerre assumes reset indices**:
```python
# Expects indices to be 0, 1, 2, ...
mult1_indices = np.searchsorted(...)  # Returns 0-based indices
features_mult1_all.iloc[mult1_indices]  # Uses these indices directly
```

## Solution for Chen & Ron

**Fix in `validate_feature_set.py` line 182**:
```python
# Current (BROKEN):
current_df = source_df.iloc[start_idx : last_valid_idx + 1]

# Fixed (RESET INDEX):
current_df = source_df.iloc[start_idx : last_valid_idx + 1].reset_index(drop=True)
```

This ensures prediction data has indices [0, 1, 2, ...] like packages expect.

## Files for Chen & Ron

**On clean branch** `reproduce-validation-bug`:
1. `/workspace/ml_feature_set/bundled/minimal_reproduce_bug.py` - v1 (passes)
2. `/workspace/ml_feature_set/bundled/minimal_reproduce_bug_v2.py` - v2 (passes)
3. `/workspace/test_minimal_standalone.py` - Standalone test (passes)
4. This summary: `/workspace/REPRODUCE-BUG-SUMMARY.md`

**Evidence from atr-adaptive-laguerre testing**:
- Standalone tests: PASS (we reset index manually)
- Validation framework: FAIL (framework doesn't reset index)

## Next Steps

1. **Apply the fix** in `validate_feature_set.py:182`:
   ```python
   current_df = source_df.iloc[start_idx : last_valid_idx + 1].reset_index(drop=True)
   ```

2. **Test with atr-adaptive-laguerre**:
   ```bash
   docker exec ml-dev python -m ml_feature_set.run_feature_set_validation \
       --feature_set_path "/workspace/ml_feature_set/bundled/ohlcv_atr-adaptive-laguerre_size121_v3.py"
   ```

3. **Expected**: All 30/30 validation steps should pass

## Verification

To verify this is the issue, add debug logging in `validate_feature_set.py:182`:
```python
current_df = source_df.iloc[start_idx : last_valid_idx + 1]
print(f"DEBUG: current_df index range: {current_df.index.min()} to {current_df.index.max()}")
print(f"DEBUG: current_df.iloc[0] index: {current_df.index[0]}")
print(f"DEBUG: Expected (should be 0): {current_df.index[0] == 0}")
```

If indices are NOT starting at 0, that confirms the bug.

---

**Contact**: Terry Li
**Branch**: reproduce-validation-bug (from origin/main)
**Status**: Root cause identified - awaiting fix verification
