# Option 1b Implementation: SSH + Doppler Shared Keys

**Version**: 1.0.0
**Date**: 2025-10-16
**Schema Compliance**: AOD/IOI principles, machine-readable evolution tracking

---

## Architecture Overview

**Pattern**: SSH + Doppler Shared Keys (Option 1b)

**Key Invariants**:
- Directory-based automatic account selection via SSH config Match directives
- Single Source of Truth for key storage: Doppler `claude-config/dev`
- Zero workflow friction: git operations work transparently
- Passphrase protection maintained across all machines

**Decision Rationale**: See `/tmp/option-1b-vs-1c-complexity-analysis.md `

---

## Implementation Steps

### Step 1: Store SSH Keys in Doppler

```bash
# Store private keys in Doppler with silence flag (prevent output exposure)
doppler secrets set SSH_KEY_TAINORA \
  --project claude-config \
  --config dev \
  --silent < ~/.ssh/id_ed25519_tainora

doppler secrets set SSH_KEY_TERRYLICA \
  --project claude-config \
  --config dev \
  --silent < ~/.ssh/id_ed25519_terrylica

doppler secrets set SSH_KEY_459ECS \
  --project claude-config \
  --config dev \
  --silent < ~/.ssh/id_ed25519_459ecs
```

**Verification**:
```bash
# Verify keys stored (will show masked values)
doppler secrets get SSH_KEY_TAINORA --project claude-config --config dev
```

---

### Step 2: Attach Machine-Readable Documentation

```bash
# Attach AOD/IOI compliant notes to each secret
cat /tmp/ssh-key-notes/SSH_KEY_TAINORA.yaml | \
  doppler secrets notes set SSH_KEY_TAINORA --project claude-config

cat /tmp/ssh-key-notes/SSH_KEY_TERRYLICA.yaml | \
  doppler secrets notes set SSH_KEY_TERRYLICA --project claude-config

cat /tmp/ssh-key-notes/SSH_KEY_459ECS.yaml | \
  doppler secrets notes set SSH_KEY_459ECS --project claude-config
```

**Note Format Principles**:
- **AOD**: Documents pattern choice, not implementation steps
- **IOI**: Focuses on problem/decision rationale, not HOW
- **Machine-readable**: Structured YAML for parsing
- **Version-tracked**: SemVer evolution tracking
- **No promotional language**: Technical descriptors only

---

### Step 3: Create Sync Script

```bash
# Create sync script at ~/.local/bin/sync-ssh-keys
cat > ~/.local/bin/sync-ssh-keys << 'EOF'
#!/bin/bash
# SSH Key Sync from Doppler
# Architecture: Option 1b (SSH + Doppler Shared Keys)
# Version: 1.0.0

set -euo pipefail

# Configuration
readonly KEY_DIR="$HOME/.ssh"
readonly PROJECT="claude-config"
readonly CONFIG="dev"

# Color output
readonly RED='\033[0;31m'
readonly GREEN='\033[0;32m'
readonly YELLOW='\033[1;33m'
readonly NC='\033[0m' # No Color

# Ensure .ssh directory exists
mkdir -p "$KEY_DIR"

echo -e "${YELLOW}Syncing SSH keys from Doppler ${PROJECT}/${CONFIG}...${NC}"

# Fetch and write keys with correct permissions
# Using --silent to prevent value exposure in logs
doppler secrets get SSH_KEY_TAINORA \
  --project "$PROJECT" \
  --config "$CONFIG" \
  --plain > "$KEY_DIR/id_ed25519_tainora"

doppler secrets get SSH_KEY_TERRYLICA \
  --project "$PROJECT" \
  --config "$CONFIG" \
  --plain > "$KEY_DIR/id_ed25519_terrylica"

doppler secrets get SSH_KEY_459ECS \
  --project "$PROJECT" \
  --config "$CONFIG" \
  --plain > "$KEY_DIR/id_ed25519_459ecs"

# Fix permissions (SSH requires 600)
chmod 600 "$KEY_DIR"/id_ed25519_*

# Verify file sizes (basic sanity check)
for key in tainora terrylica 459ecs; do
  keyfile="$KEY_DIR/id_ed25519_$key"
  if [[ -f "$keyfile" ]]; then
    size=$(stat -f%z "$keyfile" 2>/dev/null || stat -c%s "$keyfile" 2>/dev/null)
    if [[ $size -lt 100 ]]; then
      echo -e "${RED}Warning: $keyfile seems too small ($size bytes)${NC}"
      exit 1
    fi
  else
    echo -e "${RED}Error: $keyfile not created${NC}"
    exit 1
  fi
done

echo -e "${GREEN}✅ SSH keys synced successfully${NC}"
echo ""
echo "Keys synced:"
ls -lh "$KEY_DIR"/id_ed25519_* | awk '{print "  " $9 " (" $5 ")"}'

EOF

# Make executable
chmod +x ~/.local/bin/sync-ssh-keys
```

---

### Step 4: Test Sync Script

```bash
# Backup existing keys first (safety measure)
mkdir -p ~/ssh-backup-$(date +%Y%m%d)
cp ~/.ssh/id_ed25519_* ~/ssh-backup-$(date +%Y%m%d)/ 2>/dev/null || true

# Run sync
sync-ssh-keys
```

**Expected Output**:
```
Syncing SSH keys from Doppler claude-config/dev...
✅ SSH keys synced successfully

Keys synced:
  /Users/terryli/.ssh/id_ed25519_tainora (411B)
  /Users/terryli/.ssh/id_ed25519_terrylica (411B)
  /Users/terryli/.ssh/id_ed25519_459ecs (411B)
```

---

### Step 5: Verify Git Operations

```bash
# Test directory-based account selection
cd ~/scripts  # Should trigger tainora account
ssh -T git@github.com
# Expected: "Hi tainora! You've successfully authenticated..."

cd ~/ml-experiments  # Should trigger terrylica account
ssh -T git@github.com
# Expected: "Hi terrylica! You've successfully authenticated..."

cd ~/459ecs  # Should trigger 459ecs account
ssh -T git@github.com
# Expected: "Hi 459ecs! You've successfully authenticated..."
```

---

## Existing SSH Config Integration

**No changes required** to your existing SSH config:

```ssh
# ~/.ssh/config (current configuration - keep as-is)

# Tainora: any cwd with "/scripts"
Match host github.com exec "echo $PWD | grep -q '/scripts'"
    IdentityFile ~/.ssh/id_ed25519_tainora

# 459ecs: any cwd with "/459ecs"
Match host github.com exec "echo $PWD | grep -q '/459ecs'"
    IdentityFile ~/.ssh/id_ed25519_459ecs

# Eon-Labs: match any cwd containing "/eon/" OR "ml-"
Match host github.com exec "echo $PWD | grep -q -E '(/eon/|ml-)'"
    IdentityFile ~/.ssh/id_ed25519_terrylica
```

The sync script writes keys to the same locations SSH config expects.

---

## New Machine Setup

```bash
# 1. Install Doppler CLI (if not already installed)
brew install dopplerhq/cli/doppler

# 2. Authenticate (one-time)
doppler login

# 3. Sync SSH keys
sync-ssh-keys

# 4. Verify git operations work
cd ~/scripts && git status  # Should use tainora automatically
```

**Setup time**: < 2 minutes per machine

---

## Documentation Evolution Tracking

### Version 1.0.0 (2025-10-16)

**Change**: Initial Doppler migration from local-only SSH keys

**Trigger**: Cross-machine maintenance burden identified during git push auth failure (HTTPS URL with wrong account)

**Decision**: Option 1b over 1c
- Complexity: 20 LOC vs 150+ LOC
- Setup time: 15 min vs 3-4 hours
- Maintenance: None vs 2-4 hours/year
- Security equivalence: Both rely on stored credentials (keys vs token)

**Analysis Document**: `/tmp/option-1b-vs-1c-complexity-analysis.md `

**Schema**: AOD/IOI compliant notes attached to each secret in Doppler

---

## Maintenance Procedures

### Key Rotation

```bash
# 1. Generate new key pair
ssh-keygen -t ed25519 -C "new-key-comment" -f ~/.ssh/id_ed25519_tainora_new

# 2. Add to GitHub (web UI)

# 3. Update Doppler
doppler secrets set SSH_KEY_TAINORA \
  --project claude-config \
  --config dev \
  --silent < ~/.ssh/id_ed25519_tainora_new

# 4. Update note version
cat > /tmp/note-update.yaml << 'NOTEEOF'
...existing note content...
  v1_1_0:
    date: "YYYY-MM-DD"
    change: "Key rotation after annual security review"
    trigger: "Routine annual key rotation"
NOTEEOF

cat /tmp/note-update.yaml | \
  doppler secrets notes set SSH_KEY_TAINORA --project claude-config

# 5. Sync on all machines
sync-ssh-keys

# 6. Remove old key from GitHub
```

### Monitoring

- **Manual verification**: Test git operations in each directory pattern
- **No automated monitoring**: Failures surface naturally during git usage
- **Review cadence**: Annual security review + on-demand rotation

---

## Security Properties

### Threat Model

**Primary threat**: Personal machine compromise

**Defense layers**:
1. Passphrase protection on private keys (offline brute-force resistance)
2. Doppler token stored in `~/.doppler/` (requires file system access)
3. File permissions 600 on synced keys (process isolation)

### Risk Acceptance

**Known risk**: Doppler token compromise exposes ALL secrets (SSH, Pushover, PyPI, AWS)

**Mitigation**: None beyond Doppler's auth mechanisms

**Rationale**: Option 1c (ephemeral mounting) has equivalent token exposure with 6-7hr complexity overhead

---

## Troubleshooting

### Keys not syncing

```bash
# Check Doppler auth
doppler whoami

# Check project/config access
doppler configs --project claude-config

# Check secret exists
doppler secrets get SSH_KEY_TAINORA --project claude-config --config dev
```

### SSH still using wrong account

```bash
# Debug SSH key selection
ssh -vT git@github.com 2>&1 | grep "Offering public key"

# Check current directory matches pattern
echo $PWD | grep -q '/scripts' && echo "Should use tainora" || echo "Pattern mismatch"

# Verify SSH config Match directive
cat ~/.ssh/config | grep -A2 "Match host github.com"
```

### Git still prompting for credentials

```bash
# Check remote URL format (must be SSH)
git remote -v

# If HTTPS, convert to SSH
git remote set-url origin git@github.com:username/repo.git
```

---

## Success Criteria

- ✅ All 3 SSH keys stored in Doppler with AOD/IOI compliant notes
- ✅ `sync-ssh-keys` script created and tested
- ✅ Git operations in `/scripts` use tainora automatically
- ✅ Git operations in `/eon/` or `ml-*` use terrylica automatically
- ✅ Git operations in `/459ecs` use 459ecs automatically
- ✅ Zero manual intervention required for account switching
- ✅ New machine setup < 2 minutes
