# HMM Regime Detection - Hybrid Validation (Fixed Implementation)

**Experiment ID:** `hmm_regime_20251005_hybrid`
**Objective:** Validate 51.5% ceiling hypothesis using fixed HMM regime features
**Status:** IN_PROGRESS (PID 23904, ETA ~19 min)
**Created:** 2025-10-05T18:35:00Z
**Last Updated:** 2025-10-05T22:04:23Z
**Version:** 1.1.0

---

## Context

**Previous Attempt:** `experiments/hmm_regime_20251004`
- **Failure Mode:** Numerical instability (transition matrix collapse)
- **Root Cause:** Unscaled features + random initialization + diagonal covariance
- **Result:** ValueError: transmat_ rows must sum to 1

**Phase 1 Validation:** `/tmp/hmm_quick_test.py`
- **Dataset:** 981 bars (SOL 5-min, 2025-09-29 to 2025-10-02)
- **Result:** All SLOs passed, regimes promising
- **Key Metrics:** 9.5 bars persistence, 3.025 cluster separation, 3.4% flip rate
- **Decision:** Proceed to full rerun

**Supersedes:** experiments/hmm_regime_20251004/PLAN.md

---

## SLOs (Service Level Objectives)

### Availability
- **no_silent_failures:** All errors propagate to caller, no exception swallowing
- **no_retries:** Crash fast on numerical issues, no automatic retry logic
- **error_logging:** All exceptions logged with full traceback before propagation

### Correctness
- **hmm_convergence:** HMM EM algorithm must converge (monitor_.converged == True)
- **transition_matrix_validity:** All row sums == 1.0 (±1e-5 tolerance)
- **state_representation:** All n_components states must be represented in predictions
- **fold_completion:** All 20 CV folds must complete without numerical errors
- **baseline_comparison:** Results validated against 51.5% ± 1.1% baseline

### Observability
- **convergence_diagnostics:** Log iterations, log-likelihood, convergence status per fold
- **state_distribution:** Track state counts and percentages per fold
- **feature_importance:** Log cluster means and separation metrics
- **performance_metrics:** Accuracy, precision, recall per fold
- **summary_artifacts:** JSON results, CSV predictions, confusion matrices

### Maintainability
- **out_of_box_dependencies:** sklearn, hmmlearn, pandas, numpy only
- **no_custom_em:** Use hmmlearn.hmm.GaussianHMM as-is
- **reusable_patterns:** Extract scalable patterns to library if successful
- **version_tracking:** SemVer 1.0.0, changelog in this document

### Excluded from SLOs
- Speed/performance optimization (not in scope)
- Security hardening (not applicable for research code)

---

## Methodology

### Dataset
- **Source:** `ml_feature_set/sample_data/resampled_binance_SOL-5m.csv`
- **Records:** 394,272 samples
- **Date Range:** 2022-10-03 to 2025-10-02
- **Timeframe:** 5-minute bars
- **Target:** Directional prediction (H=20 bars ahead, ~100 minutes)

### Base Features (26 features)
- OHLCV lags: [1, 5, 10, 20]
- Rolling stats: mean, std, min, max (windows: 10, 20, 50)
- Volume ratios: vs MA(10), MA(20)
- Returns: 1-bar, 5-bar, 20-bar

### HMM Regime Features (3 features)
**Fixed Implementation (vs Previous Crash):**

```python
# Previous (BROKEN): Unscaled, random init, diagonal cov
hmm = GaussianHMM(n_components=3, covariance_type='diag', random_state=42)
hmm.fit(X)  # CRASH: transition matrix collapse

# Fixed (WORKING): Scaled, KMeans init, spherical cov
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
initial_labels = kmeans.fit_predict(X_scaled)

hmm = GaussianHMM(
    n_components=3,
    covariance_type='spherical',  # Changed from 'diag'
    n_iter=50,
    tol=1e-2,
    min_covar=1e-3,  # Regularization
    init_params='',  # Manual init only
    random_state=42
)

hmm.means_ = kmeans.cluster_centers_
hmm.covars_ = np.array([
    np.var(X_scaled[initial_labels == i]) + 1e-3
    for i in range(3)
])
hmm.startprob_ = np.array([
    (initial_labels == i).sum() / len(initial_labels)
    for i in range(3)
])
hmm.transmat_ = np.ones((3, 3)) / 3

hmm.fit(X_scaled)  # SUCCESS: validated in Phase 1
```

**Generated Features:**
- `hmm_state`: Predicted regime (0, 1, 2)
- `hmm_state_prob_max`: Max probability across states
- `hmm_state_prob_ratio`: Max prob / second max prob

### Model Architecture
- **Type:** LogisticRegression (sklearn)
- **Penalty:** l2
- **Solver:** lbfgs
- **Max Iterations:** 1000
- **Class Weight:** balanced

### Cross-Validation
- **Method:** TimeSeriesSplit (sklearn)
- **Folds:** 20
- **Train/Test Split:** Rolling window, no shuffle
- **Purging:** None (chronological split handles leakage)

### Error Handling Policy
```python
# MANDATORY: Raise and propagate, no fallbacks
if not hmm.monitor_.converged:
    raise RuntimeError(f"HMM did not converge after {hmm.monitor_.iter} iterations")

if not np.allclose(hmm.transmat_.sum(axis=1), 1.0):
    raise ValueError(f"Invalid transition matrix: row sums = {hmm.transmat_.sum(axis=1)}")

if len(np.unique(predicted_states)) < n_components:
    raise ValueError(f"Only {len(np.unique(predicted_states))}/{n_components} states represented")
```

---

## Execution Plan

### Phase 3: Full Rerun
1. **Load Data:** Read CSV, validate schema
2. **Generate Base Features:** 26 OHLCV + rolling features
3. **Generate HMM Features:** Apply fixed implementation
   - Scale features (StandardScaler)
   - Initialize with KMeans
   - Fit GaussianHMM with spherical covariance
   - Validate convergence and transition matrix
   - Generate regime features
4. **Cross-Validation:** 20-fold TimeSeriesSplit
5. **Validation:** Compare vs 51.5% baseline
6. **Artifacts:** Save results, predictions, diagnostics

### Monitoring
- **Method:** noti-monitor (Pushover integration)
- **Priority:** Emergency
- **Sound:** vibe20sec
- **Command:** `nohup noti-monitor <PID> > /tmp/noti_hmm_hybrid.log 2>&1 &`

### Expected Runtime (Original Estimate - WRONG)
- HMM training: ~5-10 minutes (full dataset, rolling window)
- CV training: ~10-15 minutes (20 folds × LogisticRegression)
- Total: ~20-30 minutes
- **ACTUAL MEASURED:** 8.6 hours (21x underestimate)

### Optimization Applied (1.1.0)
**Root Cause:** Computational complexity O(T×K²×D×I) per window underestimated
- Original: 310K windows × 5000 samples × 50 iter → 8.6 hours
- Optimized: 31K windows × 2000 samples × 25 iter → **~19 minutes**

**Changes:**
1. `HMM_WINDOW_SIZE`: 5000 → 2000 (2.5x speedup)
2. `HMM_STRIDE`: 1 → 10 (10x speedup - sample every 10th window)
3. `HMM_N_ITER`: 50 → 25 (2x speedup)
4. **Total speedup:** 30x (8.6h → 17min theoretical)

**Execution Fixes (MANDATORY):**
1. Unbuffered output: `python -u` + `sys.stdout.reconfigure(line_buffering=True)`
2. Progress heartbeat: Every 1000 windows OR 60 seconds with ETA
3. Realistic timeout: 10 hours (2x safety margin)
4. Immediate verification: START marker within 10 seconds

**Execution Command:**
```bash
timeout 10h uv run --with hmmlearn --with scikit-learn python -u \
  experiments/hmm_regime_20251005_hybrid/run_experiment.py \
  > experiments/hmm_regime_20251005_hybrid/experiment_output.log 2>&1 &
```

---

## Success Criteria

### Primary Objective
**Validate 51.5% ceiling hypothesis:**
- If accuracy ≈ 51.5% ± 1%: Ceiling confirmed, pivot required
- If accuracy > 53%: Ceiling broken, regime features effective

### Secondary Objectives
- **Stability:** All 20 folds complete without numerical errors
- **Convergence:** HMM converges in all rolling windows
- **State Quality:** Regime persistence > 5 bars median across folds

---

## Risk Assessment

### Known Risks
1. **51.5% Ceiling:** 6/6 experiments converged to ~51.5%
   - Mitigation: Accept ceiling, document for pivot decision
2. **State Collapse:** Minority regime may not persist in some windows
   - Mitigation: Validate state representation in each fold, raise if missing
3. **Numerical Instability:** Large dataset may expose edge cases
   - Mitigation: Fixed implementation validated in Phase 1, error propagation enabled

---

## References

**Plan Hierarchy:**
- **Root Plan:** `.claude/plans/hmm-hybrid-validation.yaml` (v1.0.0)
- **Previous Attempt:** `experiments/hmm_regime_20251004/PLAN.md` (deprecated)
- **Phase 1 Validation:** `/tmp/hmm_quick_test.py` (completed)

**Research Artifacts:**
- `/tmp/HMM_RESEARCH_SUMMARY.md` (18 KB)
- `/tmp/HMM_QUICK_REFERENCE.md` (4.5 KB)
- `/tmp/hmm_financial_fix.py` (7.3 KB)

**Related Experiments:**
- `experiments/phase1_ohlcv_baseline_20251001` (51.5% ± 1.1% baseline)
- `experiments/neural_lstm_20251002` (51.5% ± 1.4%)
- `experiments/rangebar_microstructure_20251003` (51.6% ± 2.7%)
- `experiments/autocorr_vol_20251003` (51.0% ± 1.5%)

---

## Changelog

### 1.1.0 (2025-10-05T22:04:23Z) - Performance Optimization & Execution Fixes
- **CRITICAL:** First execution hung 4h 48m before kill (PID 38924)
- **ROOT CAUSE:** Computational complexity underestimated by 21x (8.6h needed vs 20-30min estimate)
- **FIXED:** Unbuffered output (python -u + sys.stdout.reconfigure)
- **FIXED:** Progress heartbeat (every 1000 windows OR 60s with ETA)
- **OPTIMIZED:** HMM_WINDOW_SIZE 5000→2000 (2.5x speedup)
- **OPTIMIZED:** HMM_STRIDE 1→10 (10x speedup, sample every 10th window)
- **OPTIMIZED:** HMM_N_ITER 50→25 (2x speedup)
- **RESULT:** Total 30x speedup (8.6h → ~19min)
- **EXECUTING:** PID 23904, started 2025-10-05T22:04:23Z, ETA ~19min
- **REFERENCES:** `/tmp/ROOT_CAUSE_FINAL.md`, `/tmp/probe_hmm_perf.py`

### 1.0.0 (2025-10-05T18:35:00Z)
- **init:** Created experiment plan
- **fixed:** Applied StandardScaler + KMeans + spherical covariance
- **validated:** Phase 1 quick test passed (9.5 bars persistence, 3.025 separation)
- **defined:** SLOs (availability, correctness, observability, maintainability)
- **excluded:** Speed/performance/security from SLO scope
- **superseded:** experiments/hmm_regime_20251004/PLAN.md
