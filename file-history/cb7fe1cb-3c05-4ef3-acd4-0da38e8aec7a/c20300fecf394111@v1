# Rangebar Examples

Organized collection of examples demonstrating range bar construction, analysis, and validation across different markets and use cases.

## 📁 Directory Structure

```
examples/
├── analysis/          # Market research and statistical analysis
├── interactive/       # Real-time demos and visualizations
├── educational/       # Learning materials and references
├── validation/        # Testing and verification tools
└── README.md         # This file
```

## 🚀 Quick Start

### New to Range Bars?
```bash
# Start with terminology
cargo run --example terminology-clarification

# Learn basics
cargo run --example basic-usage

# See it in action
cargo run --example historical-replay
```

### Market Analysis
```bash
# Compare spot vs futures
cargo run --example analysis-rangebar-generation

# Analyze market efficiency
cargo run --example analysis-market-efficiency
```

### Algorithm Validation
```bash
# Validate 25 BPS threshold
cargo run --example validate-25bps-threshold

# Test custom thresholds
cargo run --example validate-custom-threshold
```

## 📊 Example Categories

### 🔬 [Analysis](analysis/README.md)
Market research tools and statistical comparisons
- Range bar generation efficiency
- Spot vs futures market analysis
- Tier-1 instrument comparisons
- Trading pattern insights

### 🎮 [Interactive](interactive/README.md)
Real-time demonstrations and visualizations
- Historical replay with controls
- Time-aware playback
- Visual range bar formation
- Market comparison demos

### 📚 [Educational](educational/README.md)
Learning materials and concept explanations
- Terminology clarification
- Algorithm fundamentals
- Reference examples
- Conceptual demonstrations

### ✅ [Validation](validation/README.md)
Testing and verification tools
- Algorithm correctness checking
- Threshold validation
- Data integrity verification
- Performance benchmarking

## 🎯 Common Use Cases

| Task | Recommended Examples | Usage |
|------|---------------------|--------|
| **Learn concepts** | `educational/terminology_clarification` | Understanding aggTrades |
| **See range bars form** | `interactive/historical_replay` | Visual formation process |
| **Compare markets** | `analysis/rangebar_generation_comparison` | Spot vs futures analysis |
| **Validate algorithm** | `validation/validate_25bps_threshold` | Algorithm correctness |
| **Research patterns** | `analysis/market_efficiency_analysis` | Market behavior insights |

## 🛠️ Requirements

**All examples require:**
- Rust 1.90+ with 2024 edition
- Internet connection (for historical data examples)
- Terminal with color support (recommended)

**Market data examples need:**
- Access to data.binance.vision
- Recent date data availability (~2-7 days old)

## 📖 Usage Patterns

### Basic Usage
```bash
# Run any example
cargo run --example <category-name>

# Examples:
cargo run --example historical-replay
cargo run --example analysis-market-efficiency
```

### With Parameters
```bash
# Many examples support parameters
cargo run --example historical-replay -- BTCUSDT um
cargo run --example validate-custom-threshold -- ETHUSDT 50
```

### Getting Help
```bash
# Most examples show usage when run without parameters
cargo run --example <category>/<example_name> -- --help
```

## 🔄 Development Workflow

1. **Learn**: Start with `educational/` examples
2. **Explore**: Use `interactive/` examples to see behavior
3. **Analyze**: Run `analysis/` examples for insights
4. **Validate**: Check with `validation/` examples
5. **Research**: Combine different examples for comprehensive analysis

## 🎉 Recent Additions

- **Smart alignment**: Improved terminal output formatting
- **Market flexibility**: Spot market default with UM/CM optional
- **Comprehensive analysis**: Range bar generation vs aggTrade comparisons
- **Better organization**: Categorized examples for easier discovery

---

💡 **Tip**: Each category has its own detailed README with specific usage instructions and examples!