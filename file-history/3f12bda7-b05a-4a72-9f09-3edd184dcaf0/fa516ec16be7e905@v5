openapi: 3.1.0
info:
  title: PyPI Publishing Methods Specification
  description: Active PyPI package publishing via Doppler credential management
  version: 2.1.0
  x-changelog:
    - version: 2.1.0
      date: 2025-10-06
      changes:
        - Updated token from "terrylica-entire-account" to "aal" (project-scoped)
        - Added troubleshooting section for credential verification
        - Documented Doppler display vs actual value behavior
        - Added best practices for token management

components:
  schemas:
    DopplerTokenMethod:
      type: object
      description: Doppler-managed PyPI token (ACTIVE METHOD - use this exclusively)
      properties:
        status:
          type: string
          enum: ["primary_method"]
        storage:
          type: object
          properties:
            service:
              type: string
              example: "Doppler"
            project:
              type: string
              example: "claude-config"
            config:
              type: string
              example: "dev"
            secret_name:
              type: string
              example: "PYPI_TOKEN"
        authentication:
          type: object
          properties:
            token_identifier:
              type: string
              example: "c1d5867e-0d0e-4d8c-b409-04a8cc58cb40"
              description: "Token ID from PyPI (visible in token management UI)"
            token_name:
              type: string
              example: "aal"
              description: "Current active token (project-scoped for atr-adaptive-laguerre)"
            scope:
              type: string
              example: "Project 'atr-adaptive-laguerre'"
              description: "Project-scoped tokens preferred over account-wide"
            permissions:
              type: string
              example: "Upload packages"
            created:
              type: string
              example: "2025-10-06"
            regeneration_url:
              type: string
              example: "https://pypi.org/manage/account/token/"
        usage:
          type: object
          properties:
            command:
              type: string
              example: "doppler run --project claude-config --config dev -- uv publish --token \"$PYPI_TOKEN\""
              description: "Standard publish command - use this for all packages"
            setup_command:
              type: string
              example: "echo -n 'pypi-...' | doppler secrets set PYPI_TOKEN --project claude-config --config dev"
              description: "Use echo -n via stdin to avoid shell escaping issues"
            verification_command:
              type: string
              example: "doppler run --project claude-config --config dev -- bash -c 'echo Token length: ${#PYPI_TOKEN}'"
              description: "Verify token is injected correctly (should be 224 chars for modern tokens)"

        troubleshooting:
          type: object
          properties:
            display_vs_actual:
              type: object
              properties:
                issue:
                  type: string
                  example: "doppler secrets get adds newline to display"
                explanation:
                  type: string
                  example: "When you run 'doppler secrets get PYPI_TOKEN --plain', it shows a trailing newline (0x0a). This is ONLY for display formatting. The actual value stored in Doppler and passed via 'doppler run' does NOT have the newline."
                test_command:
                  type: string
                  example: "doppler run --project claude-config --config dev -- bash -c 'printf \"%s\" \"$PYPI_TOKEN\" | wc -c'"
                expected_result:
                  type: string
                  example: "224 (no trailing newline)"

            token_expiry:
              type: object
              properties:
                symptom:
                  type: string
                  example: "403 Forbidden: Invalid or non-existent authentication information"
                cause:
                  type: string
                  example: "PyPI tokens can be revoked or expire. Check PyPI web interface for token status."
                solution:
                  type: string
                  example: "Create new project-scoped token on PyPI, copy exact value, update Doppler with: echo -n 'pypi-...' | doppler secrets set PYPI_TOKEN --project claude-config --config dev"

            verification_workflow:
              type: array
              items:
                type: object
              example:
                - step: 1
                  action: "Check token in PyPI web interface"
                  command: "Open https://pypi.org/manage/account/token/"
                  verify: "Token shows 'Last used: recently' or create new token"
                - step: 2
                  action: "Verify token in Doppler"
                  command: "doppler secrets get PYPI_TOKEN --project claude-config --config dev --plain | head -c 50"
                  verify: "Starts with 'pypi-AgEIcHlwaS5vcmcC...'"
                - step: 3
                  action: "Test credential injection"
                  command: "doppler run --project claude-config --config dev -- bash -c 'echo Token length: ${#PYPI_TOKEN}'"
                  verify: "Shows 224 (or similar length for valid token)"
                - step: 4
                  action: "Test publish with Doppler"
                  command: "doppler run --project claude-config --config dev -- uv publish --token \"$PYPI_TOKEN\" dist/*.whl"
                  verify: "Gets 200 OK (or 400 if file already exists, which is fine)"

        best_practices:
          type: object
          properties:
            token_scope:
              type: string
              example: "Use project-scoped tokens (e.g., 'aal' for atr-adaptive-laguerre) instead of account-wide tokens. This limits blast radius if token is compromised."
            token_naming:
              type: string
              example: "Use descriptive names (e.g., 'aal' = atr-adaptive-laguerre) so you can identify which token is for which package."
            token_storage:
              type: string
              example: "ALWAYS use Doppler for credential storage. Never commit tokens to git, never store in .pypirc."
            token_updates:
              type: string
              example: "When updating tokens in Doppler, use stdin to avoid shell escaping: echo -n 'token' | doppler secrets set"
            testing:
              type: string
              example: "After updating tokens, test with 'doppler run -- bash -c' to verify injection works BEFORE attempting actual publish."

    HistoricalTokens:
      type: object
      description: Historical token information for reference
      properties:
        terrylica_entire_account:
          type: object
          properties:
            token_id:
              type: string
              example: "2b59ad01-34b4-4425-b7a0-9ab49046ea4e"
            status:
              type: string
              example: "DEPRECATED - replaced by project-scoped 'aal' token"
            scope:
              type: string
              example: "Entire account (all projects)"
            reason_for_replacement:
              type: string
              example: "Account-wide scope too broad; project-scoped tokens preferred for security"
            last_used:
              type: string
              example: "2025-10-06"

        publishing:
          type: object
          properties:
            token_id:
              type: string
              example: "Unknown"
            status:
              type: string
              example: "DEPRECATED - expired/revoked"
            created:
              type: string
              example: "2025-09-09"
            last_used:
              type: string
              example: "2025-10-06"
            reason_for_replacement:
              type: string
              example: "Token expired or revoked by PyPI"

    DeprecatedMethods:
      type: object
      description: Deprecated publishing methods - DO NOT USE
      properties:
        pypirc:
          type: object
          properties:
            status:
              type: string
              enum: ["deprecated"]
            reason:
              type: string
              example: "Tokens expire frequently, not version controlled, stored in plaintext"
            location:
              type: string
              example: "$HOME/.pypirc (DO NOT USE)"
            migration:
              type: string
              example: "Token already migrated to Doppler (claude-config/dev/PYPI_TOKEN)"

        trusted_publishing:
          type: object
          properties:
            status:
              type: string
              enum: ["future_consideration"]
            reason:
              type: string
              example: "OIDC-based GitHub Actions workflow - not yet implemented"
            documentation:
              type: string
              example: "https://docs.pypi.org/trusted-publishers/"
            benefits:
              type: string
              example: "No long-lived tokens, automatic credential rotation, better security"
            consideration:
              type: string
              example: "Requires GitHub Actions setup and per-package PyPI configuration"

paths: {}
