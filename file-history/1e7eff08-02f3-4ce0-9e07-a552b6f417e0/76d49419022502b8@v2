#!/usr/bin/env python3
"""
Test refactored ExnessDataProcessor with single-file multi-year architecture.

Validates:
1. Single-file database creation (eurusd.duckdb not monthly files)
2. Dual-variant downloads (Raw_Spread + Standard)
3. Phase7 9-column OHLC schema
4. Incremental updates with gap detection
5. Query methods with date ranges
6. Coverage tracking
"""

import sys
from pathlib import Path

# Add src to path to import processor
sys.path.insert(0, str(Path.home() / "eon" / "exness-data-preprocess" / "src"))

from exness_data_preprocess.processor import ExnessDataProcessor
import json


def test_refactored_processor():
    """Test refactored processor with Sep-Oct 2024 data."""

    # Use /tmp directory for testing
    test_dir = Path("/tmp/exness-duckdb-test/refactored")
    test_dir.mkdir(parents=True, exist_ok=True)

    print("="*70)
    print("Testing Refactored ExnessDataProcessor")
    print("="*70)

    # Initialize processor
    processor = ExnessDataProcessor(base_dir=test_dir)

    # Test 1: Initial download (Sep 2024)
    print("\n" + "="*70)
    print("Test 1: Initial Download (Sep 2024)")
    print("="*70)

    result1 = processor.update_data(
        pair="EURUSD",
        start_date="2024-09-01",
        delete_zip=True
    )

    print("\nResult:")
    print(json.dumps(result1, indent=2, default=str))

    # Verify single file
    duckdb_path = test_dir / "eurusd.duckdb"
    assert duckdb_path.exists(), "Database file should exist"
    print(f"\n✅ Single file created: {duckdb_path}")

    # Test 2: Check coverage
    print("\n" + "="*70)
    print("Test 2: Check Coverage")
    print("="*70)

    coverage = processor.get_data_coverage("EURUSD")
    print(json.dumps(coverage, indent=2))

    assert coverage["database_exists"], "Database should exist"
    assert coverage["raw_spread_ticks"] > 0, "Should have Raw_Spread ticks"
    assert coverage["standard_ticks"] > 0, "Should have Standard ticks"
    assert coverage["ohlc_bars"] > 0, "Should have OHLC bars"
    print("\n✅ Coverage verified")

    # Test 3: Incremental update (Oct 2024)
    print("\n" + "="*70)
    print("Test 3: Incremental Update (Oct 2024)")
    print("="*70)

    result2 = processor.update_data(
        pair="EURUSD",
        start_date="2024-09-01",  # Same start date
        delete_zip=True
    )

    print("\nResult:")
    print(json.dumps(result2, indent=2, default=str))

    # Should have added Oct 2024 data
    assert result2["months_added"] > 0, "Should have added Oct 2024"
    print(f"\n✅ Incremental update added {result2['months_added']} month(s)")

    # Test 4: Query ticks with date range
    print("\n" + "="*70)
    print("Test 4: Query Ticks (Sep 2024, Raw_Spread)")
    print("="*70)

    df_ticks = processor.query_ticks(
        pair="EURUSD",
        variant="raw_spread",
        start_date="2024-09-01",
        end_date="2024-09-30"
    )

    print(f"Rows: {len(df_ticks):,}")
    print(f"Columns: {list(df_ticks.columns)}")
    print(f"\nFirst 3 ticks:")
    print(df_ticks.head(3))

    assert len(df_ticks) > 0, "Should have ticks"
    assert "Timestamp" in df_ticks.columns, "Should have Timestamp"
    assert "Bid" in df_ticks.columns, "Should have Bid"
    assert "Ask" in df_ticks.columns, "Should have Ask"
    print("\n✅ Tick query successful")

    # Test 5: Query OHLC with Phase7 schema
    print("\n" + "="*70)
    print("Test 5: Query OHLC (1m, Phase7 9-column schema)")
    print("="*70)

    df_ohlc = processor.query_ohlc(
        pair="EURUSD",
        timeframe="1m",
        start_date="2024-09-01",
        end_date="2024-09-01"
    )

    print(f"Rows: {len(df_ohlc):,}")
    print(f"Columns: {list(df_ohlc.columns)}")
    print(f"\nFirst 3 bars:")
    print(df_ohlc.head(3))

    # Verify Phase7 9-column schema
    expected_cols = [
        "Timestamp", "Open", "High", "Low", "Close",
        "raw_spread_avg", "standard_spread_avg",
        "tick_count_raw_spread", "tick_count_standard"
    ]

    for col in expected_cols:
        assert col in df_ohlc.columns, f"Missing column: {col}"

    print("\n✅ Phase7 9-column schema verified")

    # Test 6: Resample to 1h
    print("\n" + "="*70)
    print("Test 6: Resample to 1h")
    print("="*70)

    df_1h = processor.query_ohlc(
        pair="EURUSD",
        timeframe="1h",
        start_date="2024-09-01",
        end_date="2024-09-01"
    )

    print(f"1h bars: {len(df_1h):,}")
    print(f"\nFirst 3 bars:")
    print(df_1h.head(3))

    assert len(df_1h) < len(df_ohlc), "1h should have fewer bars than 1m"
    print("\n✅ Resampling works")

    # Test 7: Final coverage
    print("\n" + "="*70)
    print("Test 7: Final Coverage")
    print("="*70)

    final_coverage = processor.get_data_coverage("EURUSD")
    print(json.dumps(final_coverage, indent=2))

    print("\n" + "="*70)
    print("All Tests Passed! ✅")
    print("="*70)

    # Summary
    print("\nSummary:")
    print(f"  Database: {duckdb_path}")
    print(f"  Size: {final_coverage['duckdb_size_mb']:.2f} MB")
    print(f"  Raw_Spread ticks: {final_coverage['raw_spread_ticks']:,}")
    print(f"  Standard ticks: {final_coverage['standard_ticks']:,}")
    print(f"  OHLC bars: {final_coverage['ohlc_bars']:,}")
    print(f"  Coverage: {final_coverage['earliest_date']} to {final_coverage['latest_date']}")
    print(f"  Range: {final_coverage['date_range_days']} days")

    return final_coverage


if __name__ == "__main__":
    try:
        coverage = test_refactored_processor()
    except Exception as e:
        print(f"\n❌ Test failed: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)
