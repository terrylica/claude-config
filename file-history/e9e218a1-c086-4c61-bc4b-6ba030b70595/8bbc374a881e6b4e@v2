"""Test v1.0.1 availability_column parameter to verify data leakage fix"""

import pandas as pd
import numpy as np
from datetime import datetime, timezone, timedelta

from atr_adaptive_laguerre import (
    ATRAdaptiveLaguerreRSI,
    ATRAdaptiveLaguerreRSIConfig
)

# Create test data
start_time = datetime(2025, 1, 1, tzinfo=timezone.utc)
timestamps = [start_time + timedelta(hours=2*i) for i in range(400)]

# Add 2-hour offset to simulate data availability delay
ready_times = [t + timedelta(hours=2) for t in timestamps]

data = pd.DataFrame({
    'date': timestamps,
    'actual_ready_time': ready_times,  # 2h delay
    'open': [100 + 5*np.sin(i/10) for i in range(400)],
    'high': [105 + 5*np.sin(i/10) for i in range(400)],
    'low': [95 + 5*np.sin(i/10) for i in range(400)],
    'close': [100 + 5*np.sin(i/10) for i in range(400)],
    'volume': [1000000] * 400
})

print("=" * 80)
print("v1.0.1 DATA LEAKAGE TEST WITH availability_column")
print("=" * 80)

# Test with NEW availability_column parameter
config = ATRAdaptiveLaguerreRSIConfig.multi_interval(
    multiplier_1=4,
    multiplier_2=12,
    filter_redundancy=False,  # Get all 121 features
    availability_column='actual_ready_time'  # NEW PARAMETER!
)
indicator = ATRAdaptiveLaguerreRSI(config)

print(f"\nConfig:")
print(f"  filter_redundancy: False")
print(f"  availability_column: 'actual_ready_time'  ← NEW!")
print(f"  Features: {indicator.n_features}")
print(f"  Min lookback: {indicator.min_lookback}")

# Full data features
features_full = indicator.fit_transform_features(data)

# Validation point
validation_idx = 380
validation_time = timestamps[validation_idx]
validation_ready_time = ready_times[validation_idx]

print(f"\n{'=' * 80}")
print(f"VALIDATION POINT: Row {validation_idx}")
print(f"{'=' * 80}")
print(f"  Bar close time (date): {validation_time}")
print(f"  Data ready time (actual_ready_time): {validation_ready_time}")

# Prediction data (only data available by validation_ready_time)
pred_data = data[data['actual_ready_time'] <= validation_ready_time].copy()

print(f"\nPrediction data filtering:")
print(f"  Total rows: {len(data)}")
print(f"  Available rows: {len(pred_data)}")
print(f"  Latest bar date: {pred_data['date'].iloc[-1]}")
print(f"  Latest actual_ready_time: {pred_data['actual_ready_time'].iloc[-1]}")

features_pred = indicator.fit_transform_features(pred_data)

# Compare features at matching actual_ready_time
matching_full_idx = data[data['actual_ready_time'] == validation_ready_time].index[0]

full_rsi_base = features_full.iloc[matching_full_idx]['rsi_base']
full_rsi_mult1 = features_full.iloc[matching_full_idx]['rsi_mult1']
full_rsi_mult2 = features_full.iloc[matching_full_idx]['rsi_mult2']

pred_rsi_base = features_pred.iloc[-1]['rsi_base']
pred_rsi_mult1 = features_pred.iloc[-1]['rsi_mult1']
pred_rsi_mult2 = features_pred.iloc[-1]['rsi_mult2']

print(f"\nFull data features (at matching actual_ready_time):")
print(f"  rsi_base: {full_rsi_base:.6f}")
print(f"  rsi_mult1: {full_rsi_mult1:.6f}")
print(f"  rsi_mult2: {full_rsi_mult2:.6f}")

print(f"\nPrediction features:")
print(f"  rsi_base: {pred_rsi_base:.6f}")
print(f"  rsi_mult1: {pred_rsi_mult1:.6f}")
print(f"  rsi_mult2: {pred_rsi_mult2:.6f}")

print(f"\n{'=' * 80}")
print("LEAKAGE DETECTION")
print(f"{'=' * 80}")

diff_base = abs(full_rsi_base - pred_rsi_base)
diff_mult1 = abs(full_rsi_mult1 - pred_rsi_mult1)
diff_mult2 = abs(full_rsi_mult2 - pred_rsi_mult2)

print(f"\nBase interval (1x):")
print(f"  Difference: {diff_base:.10f}")
print(f"  Status: {'✓ PASS' if diff_base < 1e-5 else '✗ FAIL - DATA LEAKAGE'}")

print(f"\nMultiplier 1 (4x):")
print(f"  Difference: {diff_mult1:.10f}")
print(f"  Status: {'✓ PASS' if diff_mult1 < 1e-5 else '✗ FAIL - DATA LEAKAGE'}")

print(f"\nMultiplier 2 (12x):")
print(f"  Difference: {diff_mult2:.10f}")
print(f"  Status: {'✓ PASS' if diff_mult2 < 1e-5 else '✗ FAIL - DATA LEAKAGE'}")

print(f"\n{'=' * 80}")
print("VERDICT")
print(f"{'=' * 80}")

if diff_mult1 < 1e-5 and diff_mult2 < 1e-5:
    print("\n✓✓✓ v1.0.1 FIXED DATA LEAKAGE! ✓✓✓")
    print("The availability_column parameter works correctly!")
    print("Multi-interval mode is now PRODUCTION READY!")
else:
    print("\n✗ v1.0.1 still has data leakage issues")
    print(f"Please check implementation of availability_column parameter")
