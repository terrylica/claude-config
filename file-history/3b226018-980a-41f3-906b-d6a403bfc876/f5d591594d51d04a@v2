"""Pytest configuration and fixtures for ml-feature-experiments tests."""

import pytest
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from pathlib import Path


@pytest.fixture
def sample_ohlcv_data():
    """
    Generate sample OHLCV data for testing.

    Returns 100 bars of synthetic data with realistic price movements.
    """
    np.random.seed(42)

    dates = pd.date_range(start='2024-01-01', periods=100, freq='1h')

    # Generate synthetic price data with realistic patterns
    close_prices = 100 + np.cumsum(np.random.randn(100) * 0.5)

    data = {
        'date': dates,
        'open': close_prices + np.random.randn(100) * 0.2,
        'high': close_prices + np.abs(np.random.randn(100) * 0.5),
        'low': close_prices - np.abs(np.random.randn(100) * 0.5),
        'close': close_prices,
        'volume': np.random.randint(1000, 10000, 100),
        'close_time': dates + pd.Timedelta(hours=1),
        'quote_asset_volume': np.random.randint(100000, 1000000, 100),
        'number_of_trades': np.random.randint(100, 1000, 100),
        'taker_buy_base_asset_volume': np.random.randint(500, 5000, 100),
        'taker_buy_quote_asset_volume': np.random.randint(50000, 500000, 100),
    }

    return pd.DataFrame(data)


@pytest.fixture
def sample_feature_values():
    """Generate sample feature values for testing."""
    np.random.seed(42)
    return np.random.randn(100)


@pytest.fixture
def sample_data_v2_path():
    """Path to sample_data_v2 directory with real data."""
    return Path(__file__).parent.parent / "ml_feature_set" / "sample_data_v2"


@pytest.fixture
def mock_binance_response():
    """Mock response from gapless-crypto-data collector."""
    dates = pd.date_range(start='2024-01-01', periods=50, freq='1h')
    close_prices = 100 + np.cumsum(np.random.randn(50) * 0.5)

    df = pd.DataFrame({
        'date': dates,
        'open': close_prices,
        'high': close_prices + 1,
        'low': close_prices - 1,
        'close': close_prices,
        'volume': np.random.randint(1000, 10000, 50),
        'close_time': dates + pd.Timedelta(hours=1),
        'quote_asset_volume': np.random.randint(100000, 1000000, 50),
        'number_of_trades': np.random.randint(100, 1000, 50),
        'taker_buy_base_asset_volume': np.random.randint(500, 5000, 50),
        'taker_buy_quote_asset_volume': np.random.randint(50000, 500000, 50),
    })

    return {
        'dataframe': df,
        'filepath': Path('/tmp/mock_data.csv'),
        'stats': {
            'bars': len(df),
            'columns': len(df.columns),
            'date_range': f"{df['date'].min()} to {df['date'].max()}"
        }
    }
