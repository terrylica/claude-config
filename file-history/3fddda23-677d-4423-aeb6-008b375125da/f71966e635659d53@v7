# CLAUDE.md

## Execution Pattern

**Always run Python as module via Docker:**
```bash
docker exec ml-dev python -m <module_path>
```

## Docker Container

- **Runtime**: Colima (pure CLI, no GUI) - `colima start`
- **Container name**: `ml-dev`
- **Working directory**: `/workspace`
- **Install command**: `docker exec ml-dev pip install -e '.[dev]'`

## Project Context

- **Dockerfile fix**: `ENV CONDA_PLUGINS_AUTO_ACCEPT_TOS=true` resolves Anaconda ToS requirement (July 2025)
- **PR policy**: 1 file per PR, no workspace files (CLAUDE.md, .cursor/rules/)
- **Templates** (orthogonal design philosophies):
  - `ohlcv_comprehensive_sizex_v5.py` (2025-05-23): Non-linear features (Hurst, entropy, regime classification)
  - `ohlcv_fluid-dynamics_sizex_v1.py` (2025-04-29): Vectorized pandas patterns (.rolling, .shift, np.clip)

## Key Architecture Points

- **`actual_ready_time`**: Framework-generated (not in CSVs), simulates data availability delay
- **`resample_factors`**: Multi-timeframe (different intervals via OHLCV aggregation), NOT multi-period (different lookbacks)

## Modern Pandas Patterns (2025)

**High-impact methods:**
- `.ewm()` - Exponentially weighted features (MACD, adaptive indicators)
- `.expanding()` - Walk-forward cumulative features
- `.rank(pct=True)` - Percentile normalization (0-1 range)
- `.pipe()` - Method chaining for readable pipelines
- `.groupby().transform()` - Group stats back to original rows

**Performance (pandas 2.0+):**
- `engine='numba'` in `.rolling().apply()` - 50x faster (188ms vs 3.92s, >1M rows)
- `dtype_backend='pyarrow'` - 35x faster I/O
- Categorical dtypes - 60x memory reduction (low-cardinality columns)

## References

- Anaconda ToS: https://stackoverflow.com/questions/79702788/
