# CLAUDE.md

## Execution Pattern

**Always run Python as module via Docker:**
```bash
docker exec ml-dev python -m <module_path>
```

## Docker Container

- **Runtime**: Colima (pure CLI, no GUI) - `colima start`
- **Container name**: `ml-dev`
- **Working directory**: `/workspace`
- **Install command**: `docker exec ml-dev pip install -e '.[dev]'`

## Project Context

- **Dockerfile fix**: `ENV CONDA_PLUGINS_AUTO_ACCEPT_TOS=true` resolves Anaconda ToS requirement (July 2025)
- **PR policy**: 1 file per PR, no workspace files (CLAUDE.md, .cursor/rules/)
- **Templates** (orthogonal design philosophies):
  - `ohlcv_comprehensive_sizex_v5.py` (2025-05-23): Non-linear features (Hurst, entropy, regime classification)
  - `ohlcv_fluid-dynamics_sizex_v1.py` (2025-04-29): Vectorized pandas patterns (.rolling, .shift, np.clip)

## Key Architecture Points

- **`actual_ready_time`**: Framework-generated (not in CSVs), simulates data availability delay
- **`resample_factors`**: Multi-timeframe (different intervals via OHLCV aggregation), NOT multi-period (different lookbacks)

## Feature Construction Patterns (Off-the-Shelf)

**Pandas methods:**
- `.ewm()` - Exponentially weighted (MACD, adaptive indicators)
- `.expanding()` - Walk-forward cumulative features
- `.rank(pct=True)` - Percentile normalization (0-1)
- `.pipe()` - Method chaining for pipelines
- `.groupby().transform()` - Group stats → original rows
- `.interpolate(method='time')` - Time-aware missing data
- `.resample().interpolate()` - Upsample with interpolation
- Named aggs: `agg(vol_mean=('volume', 'mean'))`

**sklearn transformers (OOD-robust):**
- `PolynomialFeatures(interaction_only=True)` - Feature crosses (RSI×Volume)
- `QuantileTransformer(output_distribution='normal')` - Outliers → Gaussian (robust)
- `RobustScaler()` - IQR-based scaling (outlier-resistant)
- `TimeSeriesSplit(gap=N)` - Walk-forward validation with gap

**Robust statistics:**
- `scipy.stats.median_abs_deviation()` - MAD (more robust than std)
- `scipy.stats.mstats.winsorize()` - Cap extremes (vs trimming)
- Downside deviation - Semi-variance for risk metrics

**Signal decomposition (adaptive, non-stationary):**
- `PyEMD` (emd package) - Empirical Mode Decomposition + Hilbert-Huang (non-linear, non-stationary)
- `pywt.wavedec()` - Wavelet decomposition (trend/detail separation)
- `statsmodels.tsa.seasonal.STL` - Seasonal/trend/residual split

**Information theory & complexity (OOD-robust):**
- `ordpy` - Permutation entropy (order-based, robust to noise)
- `antropy` - Sample/approximate/multiscale entropy
- `nolds.dfa()` - Detrended Fluctuation Analysis (long-range dependence, Hurst parameter)
- `PyRQA` - Recurrence Quantification Analysis (dynamical system features)
- `sklearn.feature_selection.mutual_info_regression()` - Mutual information (non-linear dependence)

**Causal inference & regime detection:**
- `tigramite` - Transfer entropy, Granger causality (causal discovery for time series)
- `hmmlearn.GaussianHMM` - Hidden Markov Models (regime detection: bull/bear/neutral)

**Spectral & cross-series analysis:**
- `scipy.signal.coherence()` - Frequency coherence between series
- `scipy.signal.csd()` - Cross-spectral density (phase relationships)
- `scipy.fft` - Frequency domain features

**Financial risk metrics:**
- Maximum drawdown - Steepest peak-to-trough decline
- Sortino ratio - Downside deviation (vs total volatility in Sharpe)
- Calmar ratio - Return / max drawdown

**Advanced aggregations:**
- `statsmodels.regression.rolling.RollingOLS` - Rolling regression (beta over time)
- `scipy.signal.fftconvolve()` - Fast convolution (moving averages)
- `scipy.signal.find_peaks()` - Peak detection

**Dependence structures:**
- `pyvinecopulib` / `pycop` - Vine copulas, tail dependence (non-linear multivariate)

**Math utilities:**
- `np.einsum('ij,ik->jk')` - Efficient covariance matrices
- Broadcasting - Pairwise operations without loops

**Performance reference:** See `.claude/performance-blacklist.md` (not priority)

**OOD robustness principles (2025 research):**
- **Invariant features** - Extract features stable across distribution shifts (e.g., permutation entropy, DFA)
- **Decoupling** - Separate task-relevant from task-irrelevant features (e.g., EMD separates trend/noise)
- **Information-theoretic** - Mutual information, transfer entropy resist spurious correlations
- **Robust estimators** - MAD, winsorization, quantile transforms handle outliers without overfitting
- **Causal structures** - Focus on causal relationships (tigramite) vs correlations for regime shifts

**Excluded:** tsfresh, catch22/featuretools (automated but not OOD-robust enough)

## References

- Anaconda ToS: https://stackoverflow.com/questions/79702788/
