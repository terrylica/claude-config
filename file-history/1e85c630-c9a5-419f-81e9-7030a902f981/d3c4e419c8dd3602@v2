#!/usr/bin/env python3
"""
Example 1: Basic Backtesting Demo

Demonstrates:
- Walk-forward backtesting with temporal splits
- Transaction cost modeling
- Trading profit metrics (Sharpe, Sortino, Max DD)
- Simple moving average strategy

Author: ML Feature Experiments - OOD Trading Profit Implementation
Date: 2025-10-01
"""

import pandas as pd
import numpy as np
from datetime import datetime

from automation.backtesting.backtest_engine import (
    WalkForwardBacktest,
    WalkForwardConfig,
    SimpleStrategy
)
from automation.backtesting.transaction_costs import create_realistic_cost_model
from automation.backtesting.profit_metrics import ProfitMetrics


def generate_sample_data(n_periods: int = 500) -> pd.DataFrame:
    """
    Generate sample OHLCV data for testing

    In production, use data_pipeline/binance/ for real data.
    """
    print("📊 Generating sample OHLCV data...")

    np.random.seed(42)
    dates = pd.date_range('2023-01-01', periods=n_periods, freq='D')

    # Generate price series with trend + noise
    base_price = 100.0
    trend = np.linspace(0, 50, n_periods)  # Upward trend
    noise = np.random.randn(n_periods).cumsum() * 2
    close = base_price + trend + noise

    # Generate OHLC from close
    data = pd.DataFrame({
        'Open': close + np.random.randn(n_periods) * 0.5,
        'High': close + abs(np.random.randn(n_periods)) * 1.0,
        'Low': close - abs(np.random.randn(n_periods)) * 1.0,
        'Close': close,
        'Volume': np.random.randint(1000000, 5000000, n_periods)
    }, index=dates)

    # Ensure OHLC consistency
    data['High'] = data[['Open', 'High', 'Close']].max(axis=1)
    data['Low'] = data[['Open', 'Low', 'Close']].min(axis=1)

    print(f"  ✅ Generated {len(data)} periods from {data.index[0]} to {data.index[-1]}")
    print(f"  Price range: ${data['Close'].min():.2f} - ${data['Close'].max():.2f}")

    return data


def main():
    """Run basic backtest demo"""
    print("\n" + "=" * 70)
    print("BASIC BACKTESTING DEMO")
    print("=" * 70)

    # 1. Generate sample data
    data = generate_sample_data(n_periods=500)

    # 2. Create transaction cost model
    print("\n💰 Transaction Cost Model:")
    cost_model = create_realistic_cost_model()
    print(cost_model.get_cost_summary())

    # 3. Configure walk-forward validation
    print("\n🔄 Walk-Forward Configuration:")
    wf_config = WalkForwardConfig(
        n_splits=5,        # 5 folds
        test_size=30,      # 30 days test per fold
        gap=5,             # 5-day gap between train/test
        expanding_window=True
    )
    print(f"  Number of Folds:   {wf_config.n_splits}")
    print(f"  Test Size:         {wf_config.test_size} periods")
    print(f"  Gap:               {wf_config.gap} periods")
    print(f"  Window Type:       {'Expanding' if wf_config.expanding_window else 'Sliding'}")

    # 4. Create and run backtest
    print("\n🚀 Running Walk-Forward Backtest...")
    wf_bt = WalkForwardBacktest(
        data=data,
        strategy_class=SimpleStrategy,  # Simple SMA crossover
        wf_config=wf_config,
        cost_model=cost_model,
        cash=10000.0
    )

    results = wf_bt.run_walk_forward()

    # 5. Print results
    wf_bt.print_results()

    # 6. Analyze results
    print("\n📊 Results Analysis:")
    mean_sharpe = results['mean_sharpe']
    if mean_sharpe > 1.5:
        print(f"  ✅ EXCELLENT: Mean Sharpe = {mean_sharpe:.2f} (>1.5)")
    elif mean_sharpe > 1.0:
        print(f"  ✅ GOOD: Mean Sharpe = {mean_sharpe:.2f} (>1.0)")
    elif mean_sharpe > 0.5:
        print(f"  ⚠️  MODERATE: Mean Sharpe = {mean_sharpe:.2f} (>0.5)")
    else:
        print(f"  ❌ POOR: Mean Sharpe = {mean_sharpe:.2f} (<0.5)")

    if results['worst_dd'] < 0.10:
        print(f"  ✅ GOOD RISK: Max DD = {results['worst_dd']:.2%} (<10%)")
    elif results['worst_dd'] < 0.20:
        print(f"  ⚠️  MODERATE RISK: Max DD = {results['worst_dd']:.2%} (<20%)")
    else:
        print(f"  ❌ HIGH RISK: Max DD = {results['worst_dd']:.2%} (>20%)")

    # 7. Save results
    print("\n💾 Saving Results:")
    results_df = pd.DataFrame(results['fold_results'])
    output_file = 'results/basic_backtest_demo.csv'
    results_df.to_csv(output_file, index=False)
    print(f"  ✅ Results saved to {output_file}")

    print("\n" + "=" * 70)
    print("DEMO COMPLETE")
    print("=" * 70)
    print("\n📚 Next Steps:")
    print("  1. Replace SimpleStrategy with fitness-based strategy")
    print("  2. Use real data from data_pipeline/binance/")
    print("  3. Add OOD robustness testing (regime-conditional performance)")
    print("  4. Optimize using Sharpe ratio (not MAE)")


if __name__ == "__main__":
    main()
