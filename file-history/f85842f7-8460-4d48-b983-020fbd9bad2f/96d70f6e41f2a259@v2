# CLAUDE.md

This file provides guidance to Claude Code (claude.ai/code) when working with code in this repository.

## Project Overview

Non-lookahead bias range bar construction from Binance UM Futures aggTrades data.

**Core Algorithm**: Range bars close when price moves ±threshold basis points from the bar's OPEN price (not from high/low range).

**Architecture**: Pure Rust implementation for performance and reliability (processes 1B+ ticks). All components native Rust: symbol discovery, data processing, and analysis.

## Key Commands

**Dev**: `cargo build --release`, `cargo test`, `cargo clippy`, `./scripts/update-deps.sh`

**Release**: `./scripts/release.sh` - Automated versioning, changelog, and GitHub release

**Deploy**: `doppler run -- shuttle deploy`

**Data Ops**: `tier1-symbol-discovery --format comprehensive`, `rangebar-analyze`, `rangebar-export [SYMBOL] [dates] [threshold] [output] [um]`, `data-structure-validator --features data-integrity`

## Data Structure Validation

**Tool**: `data-structure-validator` validates Binance aggTrades across spot/futures markets

**Key Differences**:
- **Spot**: No headers, short columns (`a,p,q,f,l,T,m`), 16-digit μs timestamps
- **UM Futures**: Headers, descriptive columns, 13-digit ms timestamps
- **Parser**: Auto-detects format, normalizes timestamps to microseconds
- **Critical**: Use `aggTrades` nomenclature (not `trades`) - affects all naming


## Architecture

### Module Structure (v2.3.0+)

**4-Layer Architecture** (Restructured 2025-10-03):

1. **Core** (`src/core/`) - Algorithm primitives (fixed-point, range bar processor, types)
2. **Providers** (`src/providers/`) - Data source integrations
   - `binance/` - Historical CSV, symbol discovery, WebSocket streams
   - `dukascopy/` - Tick data fetcher, .bi5 parser, bid/ask range bars
3. **Engines** (`src/engines/`) - Processing modes
   - `streaming/` - Real-time bounded memory (processor, stats, indicators, replay, universal stream)
   - `batch/` - Polars-powered analytics (batch analysis engine)
4. **Infrastructure** (`src/infrastructure/`) - Supporting systems
   - `io/` - Parquet/CSV/Arrow exporters (Polars integration)
   - `config/` - Settings, CLI configuration
   - `api/` - REST API server (OpenAPI 3.1.1)

### Data Pipeline
1. **Symbol Discovery**: `tier1-symbol-discovery` → Multi-market symbol analysis
2. **Data Structure Validation**: `data-structure-validator` → Cross-market format verification
3. **Data Fetching**: `binance_historical_data` → Raw CSV/ZIP files with validated schemas
4. **Preprocessing**: CSV → Parquet with schema validation
5. **Computation**: Pure Rust processes Parquet → Range bars
6. **Analysis**: `rangebar-analyze` → Parallel Tier-1 analysis
7. **Output**: Structured bar data (OHLCV format)

**Performance**: Pure Rust, Rayon parallelism, fixed-point arithmetic

### Data Management (v2.3.0+)

- `data/` - Raw provider inputs (Binance CSVs, Dukascopy .bi5) - **gitignored**
- `cache/` - Provider-specific temp files (30-day retention) - **gitignored**
- `output/` - Generated results (selective git tracking)
  - `benchmarks/` - Performance summaries (**commit**)
  - `validation/` - Data quality reports (**commit**)
  - `production/` - Large exports (**gitignore**)
  - `experiments/` - Ad-hoc analysis (**gitignore**)
- `test_data/` - Small test fixtures (**commit**)

## Critical Algorithm Invariants

**Algorithm**: Fixed thresholds from bar OPEN (`±threshold_bps`), breach tick closes bar
**Validation**: `(high_breach → close_breach) AND (low_breach → close_breach)`

### Data Source Requirements

#### Binance (Primary - Crypto)
- **Source**: https://github.com/stas-prokopiev/binance_historical_data
- **Primary Asset Class**: `"spot"` (Default) for standard spot trading pairs
- **Optional Markets**: `"um"` (USD-M Futures) for USDT/USDC perpetuals, `"cm"` (Coin-M Futures)
- **Data Type**: `"aggTrades"` **ONLY**
- **Usage**: Specify market type via command line arguments or use spot by default

#### Dukascopy (Secondary - Forex/Multi-Asset)
- **Status**: ✅ Validated 2025-09-30 (see `docs/planning/research/dukascopy-endpoint-validation.md`)
- **Coverage**: 1,607 instruments (Forex, Crypto, Equities, Commodities)
- **Data Type**: Tick-level quotes (bid/ask with volumes)
- **Access**: Public HTTP endpoints (no authentication)
- **Format**: LZMA compressed binary (.bi5), 20 bytes per tick
- **Historical Depth**: Forex from 2003+, Crypto from 2017+
- **Implementation**: Direct Rust (xz2 + byteorder crates)
- **Config Reference**: `docs/planning/research/dukascopy-instrument-config.toml`

### Tier-1 Instruments Definition
**Tier-1 instruments** are crypto assets that Binance respects highly enough to list across **ALL THREE** futures markets:
1. **UM Futures (USDT-margined)**: e.g., BTCUSDT, ETHUSDT
2. **UM Futures (USDC-margined)**: e.g., BTCUSDC, ETHUSDC
3. **CM Futures (Coin-margined)**: e.g., BTCUSD_PERP, ETHUSD_PERP

**Current Count**: 18 Tier-1 instruments (BTC, ETH, SOL, ADA, AVAX, etc.)
**Key Characteristic**: Multi-market availability indicates Binance's highest confidence
**Use Cases**: Cross-market extrapolative reliability analysis, settlement currency arbitrage

**Structure**: `src/bin/` (tools), `tests/` (validation), `scripts/` (automation), `output/` (results)

## Common Issues

**Fixes**: `rustup update`, `cargo clean`, sort by `(timestamp, aggTradeId)`, thresholds from OPEN only

## Rust Binaries

**Tools**: `tier1-symbol-discovery --format [comprehensive|minimal]`, `rangebar-analyze`, `rangebar-export`

**Testing**: `cargo test`, `cargo bench` - validates non-lookahead, performance <100ms/1M ticks

**Publishing**: GitHub Actions OIDC on git tags, manual: `cargo publish --all-features`

## Dependency Management

**Auto-Updates**: Dependabot weekly PRs (`.github/dependabot.yml`), caret requirements (`^0.51.0`), manual validation (`scripts/update-deps.sh`)

## Release Workflow

**Automation**: git-cliff + Commitizen for automated release management

**Process**: `./scripts/release.sh` executes:
1. Version bump (Commitizen with SemVer)
2. CHANGELOG.md generation (git-cliff with detailed commit history)
3. RELEASE_NOTES.md generation (git-cliff with user-friendly format)
4. Git push with tags
5. GitHub release creation

**Configuration**:
- `.cz.toml` - Commitizen config (version tracking, conventional commits)
- `cliff.toml` - Detailed changelog template (developer-focused)
- `cliff-release-notes.toml` - Release notes template (user-focused)

**Manual Commands**:
- `uvx --from commitizen cz bump --yes` - Version bump only
- `git-cliff --config cliff.toml --output CHANGELOG.md` - Generate changelog
- `git-cliff --config cliff-release-notes.toml --latest --output RELEASE_NOTES.md` - Generate release notes
