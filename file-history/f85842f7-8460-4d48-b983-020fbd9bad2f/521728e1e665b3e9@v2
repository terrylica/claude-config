# Next Steps - Post-Restructuring v2.3.0

**Status**: Restructuring complete, audit plan created
**Date**: 2025-10-03

---

## Completed ✅

1. **Workspace Restructuring (v2.3.0)**
   - 4-layer architecture (Core → Providers → Engines → Infrastructure)
   - Data management (data/, cache/, output/ with READMEs)
   - Provider pattern for future sources
   - 173 tests passing (99 lib + integration)
   - All clippy warnings fixed
   - Zero breaking changes (backward compat via re-exports)

2. **Documentation**
   - Updated CLAUDE.md with new architecture
   - Migration plan with lessons learned
   - EURUSD audit plan created

---

## Immediate Action Items

### 1. Fix EURUSD Audit Test Compilation Errors

**Issue**: Test file has compilation errors
- `process_tick()` returns `Result<Option<...>>` not `Option<...>`
- `FixedPoint::from_f64()` doesn't exist (use `from_str()` instead)

**Fix Required** in `tests/dukascopy_eurusd_adversarial_audit.rs`:

```rust
// BEFORE (incorrect):
let bars: Vec<_> = ticks
    .iter()
    .filter_map(|t| builder.process_tick(t))  // ❌ Wrong type
    .collect();

let expected = FixedPoint::from_f64(1.10275);  // ❌ Method doesn't exist

// AFTER (correct):
let bars: Vec<_> = ticks
    .iter()
    .filter_map(|t| builder.process_tick(t).ok().flatten())  // ✅ Handles Result<Option<_>>
    .collect();

let expected = FixedPoint::from_str("1.10275").unwrap();  // ✅ Uses from_str
```

**Command**:
```bash
# Fix compilation errors, then run:
cargo test --test dukascopy_eurusd_adversarial_audit
```

---

### 2. Investigate 4 Pre-Existing Test Failures

**Failing Tests**:
1. `engines::batch::engine::tests::test_single_symbol_analysis`
2. `engines::batch::engine::tests::test_multiple_symbols_analysis`
3. `infrastructure::io::formats::tests::test_dataframe_to_rangebar_conversion`
4. `infrastructure::io::formats::tests::test_rangebar_to_rangebar_conversion`

**Error Pattern**:
```
called `Result::unwrap()` on an `Err` value: ValueExtractionFailed {
    operation: "extract_f64_at_index_3",
    source: "Unexpected type: Null"
}
```

**Root Cause**: Likely test data has NULL values in Polars DataFrame columns

**Investigation**:
```bash
# Run single test with backtrace:
RUST_BACKTRACE=1 cargo test --lib engines::batch::engine::tests::test_single_symbol_analysis -- --nocapture

# Check test data generation:
rg "test_single_symbol_analysis" src/engines/batch/engine.rs -A 30
```

**Likely Fix**: Update test data to avoid NULL values or handle them gracefully

---

### 3. Run EURUSD Adversarial Audit (After Fixing Tests)

**Phase 1**: Local synthetic tests
```bash
cargo test --test dukascopy_eurusd_adversarial_audit
```

**Expected**: 7 tests PASS (audit_7 skipped - requires network)

**Phase 2**: Real-world validation
```bash
cargo test --test dukascopy_eurusd_adversarial_audit audit_7 -- --ignored
```

**Expected**:
- Fetch 500-2000 EURUSD ticks from Dukascopy
- Produce 50-200 range bars @ 25bps
- Spread statistics within EURUSD norms (< 0.005)

---

### 4. Validate No Regressions

**Full Test Suite**:
```bash
# All features enabled
cargo test --all-features

# No default features (minimal)
cargo test --no-default-features

# Specific feature combinations
cargo test --features polars-io
cargo test --features polars-analytics
cargo test --features streaming-stats
```

**Clippy (strict)**:
```bash
cargo clippy --all-features -- -D warnings
```

**Build (release)**:
```bash
cargo build --release --all-features
```

---

## Suggested Improvements

### Short-term (This Week)

1. **Fix test compilation errors** - EURUSD audit + 4 failing tests
2. **Add regression detection CI** - GitHub Actions workflow
3. **Property-based testing** - Add proptest for Dukascopy builder

### Medium-term (This Month)

1. **Cross-validation with Binance** - Compare BTCUSD range bars (Dukascopy crypto vs Binance)
2. **Multi-instrument validation** - Test GBPUSD, USDJPY, XAUUSD
3. **Chaos engineering** - Inject faults (missing ticks, crossed markets, duplicates)

### Long-term (This Quarter)

1. **Differential testing** - Reference Python implementation for comparison
2. **Production monitoring** - Daily EURUSD audit in CI/CD
3. **Performance profiling** - Benchmark Dukascopy vs Binance throughput

---

## Risk Assessment

### Critical (P0) - Must Fix Before Production

- ✅ **Clippy warnings** - FIXED
- ⚠️ **EURUSD audit tests** - Need compilation fixes
- ⚠️ **4 failing tests** - Need investigation

### High (P1) - Fix Soon

- **No cross-validation** - Need Binance BTCUSD comparison
- **Limited edge case coverage** - Need fuzzing/property tests
- **Single instrument focus** - Only EURUSD tested

### Medium (P2) - Nice to Have

- **No performance benchmarks** - Dukascopy vs Binance speed
- **Manual test execution** - Need CI automation
- **Limited multi-instrument testing** - Only EURUSD/forex

---

## Questions for User

1. **Audit Test Priority**: Should I fix the EURUSD audit compilation errors immediately?
2. **Failing Tests**: Should I investigate the 4 pre-existing test failures first?
3. **Production Timeline**: When do you need Dukascopy EURUSD validation completed?
4. **Additional Instruments**: Beyond EURUSD, which forex pairs are most critical?

---

## References

- **Audit Plan**: `docs/planning/dukascopy-eurusd-audit-plan.md`
- **Audit Tests**: `tests/dukascopy_eurusd_adversarial_audit.rs`
- **Migration Doc**: `docs/planning/architecture/restructure-v2.3.0-migration.md`
- **Architecture**: CLAUDE.md - Module Structure section
