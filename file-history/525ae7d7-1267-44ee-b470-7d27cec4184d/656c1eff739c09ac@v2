# Claude Code User Memory

- Apply neutral, promotional-free language to generated docs/comments and new identifiers only; never alter user text; use SemVer 2.0.0 (init 1.0.0 if stable else 0.1.0); bump MAJOR for breaking, MINOR for additive, PATCH for fixes; update versions consistently across README/docstrings/metadata.

## Planning

- **Machine-Readable**: Define and maintain OpenAPI 3.1.1 spec for persistent planning files
- **Logical Dependencies**: Organize by capabilities, not time-based roadmapping - use Success Gates/Sluices for validation checkpoints
- **Dynamic Evolution**: Objectives and implementations evolve dynamically

## System Architecture & Environment

### Platform & Path Conventions
- **Target Platform**: Unix-like systems (macOS, Linux) - not Windows compatible
- **Standards**: `$HOME/.claude/` workspace, POSIX shells, use Unix conventions (`$HOME`, `$USER`) for portability

### Universal Tool Access & Working Directory Preservation
- **Hybrid Architecture**: `$HOME/.local/bin/` for executables, `$HOME/.claude/tools/` for configs - scripts use absolute paths and preserve working directory
- **PATH Standard**: Only `$HOME/.local/bin` in PATH, cross-platform consistency, avoid `cd` operations that change user context

### Current User Context
- Engineering lead responsible for features engineering for downstream seq-2-seq model consumption

## Development Environment & Tools

### Primary Toolchain
- **Python Stack**: `uv` (management), `uv run --active python -m` (execution), `hatchling` (build backend), `maturin` (Rust integration), 3.12+ - **Avoid**: pip, conda, setuptools, poetry, standalone execution
- **Rust Stack**: `cargo`, cross-platform compilation, `cargo nextest run`, `cargo deny check`, coexists with Python
- **Python Packages**: Prefer `httpx`, `platformdirs`, `orjson`, `ciso8601` over `requests`, `json`, `dateutil`, `arrow`, `maya`
- **Claude Code Tools**: `Read`, `LS`, `Glob`, `Grep` over MCP
- **Analysis**: `Semgrep`, `ast-grep`, `ShellCheck` - **GPU**: `tensorflow-metal`, `jax`, `torch`, `cupy`
- **PDF Processing**: `mupdf-tools` (`mutool draw -F html`) for born-digital PDFs with clean HTML/block grouping; Poppler `pdftohtml -xml` for exact coordinates or complex column layouts
- **Finance**: `backtesting.py` ONLY, `rangebar` crate - **Prohibited**: bt, vectorbt, mlfinlab, commercial libs
- **Indicators (when needed)**: Reference talipp pattern (github.com/nardew/talipp) for O(1) incremental updates when rolling metrics are required
- **Documentation**: ALL examples must use `uv run --active python -m` format, never standalone execution
- **Data Storage**: Prefer Parquet (zstd-9 compression) over CSV for tabular data


### Mandatory Rust Code Quality Enforcement (2025 Best Practices)
- **Zero Tolerance Policy**: All commits blocked unless passing `cargo fmt --check`, `cargo clippy -- -D warnings`, and `cargo test`
- **Enforcement**: Pre-commit hooks, VS Code auto-format, GitHub Actions validation
- **Setup**: `chmod +x .git/hooks/pre-commit && pre-commit install`

## Documentation Standards

### LLM-Optimized Documentation Architecture
- **Machine-Readable Priority**: OpenAPI 3.1.0 specs, JSON Schema, YAML specifications take precedence over human documentation
- **Integration Targets**: Cursor IDE, Claude Code CLI, AI coding assistants

### Claude Code Markdown Restrictions & README Policies
- **Markdown Files**: Global `~/.claude/` allowed, project `.claude/` prohibited (slash command conflicts)
- **README Policy**: Use `docs/README.md`, not root `README.md` - alternative naming for non-global docs

## Claude Code User Custom Extensions

### CNS (Conversation Notification System)
**Specification**: [`.claude/specifications/cns-conversation-notification-system.yaml`](.claude/specifications/cns-conversation-notification-system.yaml)

### GitHub Flavored Markdown Link Checker
**Specification**: [`.claude/specifications/gfm-link-checker.yaml`](.claude/specifications/gfm-link-checker.yaml)

### Pushover Integration
**Specification**: [`.claude/specifications/pushover-integration.yaml`](.claude/specifications/pushover-integration.yaml)

### PyPI Publishing Methods
**Specification**: [`.claude/specifications/pypi-publishing-methods.yaml`](.claude/specifications/pypi-publishing-methods.yaml)

### git-cliff Release Automation
**Full Workflow**: See [`~/.claude/tools/git-cliff/README.md`](tools/git-cliff/README.md)
**Templates**: `~/.claude/tools/git-cliff/templates/` (cliff.toml, cliff-release-notes.toml, cz.toml.template)
**Features**: Commitizen + git-cliff, language-agnostic version detection, 125K GitHub limit handling, automated workflow conflict detection

### Process Monitoring (noti)
**Config**: `~/.config/noti/noti.yaml` (Pushover: apitoken/userkey from keychain, priority=1, sound=vibe20sec)
**Wrapper**: `~/.local/bin/noti-monitor <PID>` (auto-injects Pushover credentials)
**Usage**: `nohup noti-monitor <PID> > /tmp/noti.log 2>&1 &`
**Doc**: [`~/.claude/tools/noti/README.md`](tools/noti/README.md)

## Credential Management & Security

**Credential Management**: Doppler CLI (`doppler run -- <command>`) for zero-config credential injection
**Specification**: [`.claude/specifications/doppler-integration.yaml`](.claude/specifications/doppler-integration.yaml)

### Pushover Credentials
**Storage**: Doppler (project: `claude-config`, config: `dev`)
**Usage**: `doppler run -- <command>` to inject credentials as environment variables
- `PUSHOVER_TOKEN` - Pushover API application token
- `PUSHOVER_USER` - Pushover user key

## Terminal Setup

### Ghostty Terminal Emulator
**Focus Tracking Fix**: Disable DECSET 1004 in `~/.zshrc` after Powerlevel10k instant prompt
**Terminfo Installation**: Export `xterm-ghostty` terminfo to remote servers, enable TERM forwarding in SSH
**Dark Theme**: zsh-syntax-highlighting color adjustments for comment visibility
**Doc**: [`~/.claude/docs/setup/terminal-setup.md`](docs/setup/terminal-setup.md)

### SSH Clipboard Integration (OSC 52)
**Purpose**: Enable Claude Code CLI `/export` to copy to macOS clipboard when SSH'd into remote Linux (works through tmux)
**Mechanism**: `~/.local/bin/xclip` wrapper emits OSC 52 escape sequences to stderr (`>&2`), travels over SSH, interpreted by Ghostty
**Requirements**:
- Ghostty config: `clipboard-write = allow` (macOS)
- xclip wrapper: `~/.local/bin/xclip` (remote Linux)
**Critical detail**: Use `>&2` not `/dev/tty` (non-interactive contexts like Claude Code tool execution lack controlling terminal)
**Docs**:
- Setup: [`~/.claude/docs/setup/ssh-clipboard-osc52.md`](docs/setup/ssh-clipboard-osc52.md)
- Deep dive: [`~/.claude/docs/setup/osc52-deep-dive.md`](docs/setup/osc52-deep-dive.md)

