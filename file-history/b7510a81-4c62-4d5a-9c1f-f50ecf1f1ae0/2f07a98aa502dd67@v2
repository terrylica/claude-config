# Workspace Cleanup Plan

**Date**: 2025-10-01
**Status**: Ready for execution

---

## Current State Analysis

### Critical Issue: Duplicate Directory Structures

Your workspace has **duplicate/redundant directories** from incomplete migration:

```
REDUNDANT PAIRS:
├── core/          (16K, OLD - mostly empty)
├── core_lib/      (84K, NEW - active)
│
├── utils/         (8K, OLD - only __init__.py)
├── utilities/     (8K, OLD - 1 utility script)
│
├── data_collection/      (82M! OLD - has .venv + 6 scripts)
├── data_pipeline/        (104K, NEW - migrated scripts)
│
├── feature_engineering/  (320K, OLD - has playground/ with 2 files)
├── features/             (844K, NEW - migrated features)
```

**Problem**: You completed the migration but didn't clean up the old directories. This creates:
- Confusion about which directories to use
- Wasted disk space (82M in data_collection/.venv!)
- Risk of editing wrong files
- Import path ambiguity

---

## 🗑️ PRUNE Strategy

### Phase 1: Remove Empty/Redundant Old Directories

#### 1.1 Delete Empty Old Core
```bash
# core/sync/ is empty (only __pycache__)
rm -rf core/
```

#### 1.2 Consolidate Utils
```bash
# Move the one utility to core_lib
git mv utilities/dsm_timestamp_alignment_utility.py core_lib/utilities/
rm -rf utils/ utilities/
```

#### 1.3 Clean Old data_collection
```bash
# Keep remaining unmigrated files, delete .venv
rm -rf data_collection/.venv/  # 81M saved!
rm -rf data_collection/__pycache__/

# Move remaining files to data_pipeline or archive
git mv data_collection/final_validation_check.py data_pipeline/gap_filling/
git mv data_collection/legitimate_gaps_registry.py data_pipeline/gap_filling/
git mv data_collection/safe_file_operations.py data_pipeline/gap_filling/
git mv data_collection/test_gap_filler_fix.py data_pipeline/gap_filling/
git mv data_collection/ultrathink_safe_gap_filler.py data_pipeline/gap_filling/

# Archive legacy
git mv data_collection/archive_legacy/ archive/data_collection_legacy/

# Delete remaining
rm -rf data_collection/
```

#### 1.4 Clean Old feature_engineering
```bash
# Move last 2 utility files
git mv feature_engineering/playground/component_template.py core_lib/templates/
git mv feature_engineering/playground/shared_utils.py core_lib/utilities/

# Remove empty playground subdirectories
rm -rf feature_engineering/playground/

# Keep experiment/ and production/ if they have content
ls -la feature_engineering/experiment/
ls -la feature_engineering/production/

# If empty, delete entire feature_engineering/
# If has content, rename to features_old/ temporarily for review
```

### Phase 2: Remove Migration Artifacts

```bash
# Delete temporary migration scripts
rm -f migrate_to_pipeline_stage.sh
rm -f update_imports.sh
rm -f update_imports2.sh
```

### Phase 3: Organize Empty New Directories

```bash
# Remove truly empty new directories or add README placeholders
# 4_experiments/ - rename to experiments/ (no leading number)
# 5_automation/ - rename to automation/ (no leading number)

git mv 4_experiments/ experiments/
git mv 5_automation/ automation/
```

---

## 🌱 GROW Strategy

### Phase 1: Create Missing Core Utilities Module

```bash
mkdir -p core_lib/utilities
mkdir -p core_lib/templates

# Create __init__.py files
touch core_lib/utilities/__init__.py
touch core_lib/templates/__init__.py
```

### Phase 2: Populate Examples Directory

Create 4 working examples showing how to use the new structure:

```bash
examples/
├── 01_data_collection_pipeline.py
├── 02_feature_generation_workflow.py
├── 03_walk_forward_validation.py
└── 04_temporal_safe_ml_pipeline.py
```

### Phase 3: Add Automation Scripts

```bash
automation/
├── pipelines/
│   ├── data_collection.py       # End-to-end data collection
│   ├── feature_generation.py    # Batch feature generation
│   └── validation_runner.py     # Run validation experiments
└── cli/
    └── ml_pipeline.py            # CLI entry point
```

### Phase 4: Create Comprehensive Documentation

```bash
docs/
├── guides/
│   ├── getting_started.md
│   ├── data_pipeline_guide.md
│   ├── feature_engineering_guide.md
│   └── temporal_validation_guide.md
└── references/
    ├── api_reference.md
    └── architecture.md
```

---

## Execution Plan

### Quick Cleanup (15 minutes)
```bash
# 1. Delete old empty directories
rm -rf core/
rm -rf data_collection/.venv/

# 2. Move unmigrated files
git mv utilities/dsm_timestamp_alignment_utility.py core_lib/utilities/
git mv data_collection/*.py data_pipeline/gap_filling/

# 3. Remove old directories
rm -rf utils/ utilities/ data_collection/

# 4. Rename numbered directories
git mv 4_experiments/ experiments/
git mv 5_automation/ automation/

# 5. Clean up migration scripts
rm -f migrate_to_pipeline_stage.sh update_imports*.sh

# 6. Commit cleanup
git add -A
git commit -m "chore: remove redundant old directories and clean workspace"
```

### Full Enhancement (1-2 hours)
```bash
# 1. Create core_lib utilities structure
mkdir -p core_lib/utilities core_lib/templates

# 2. Create example scripts (write 4 examples)
# 3. Create automation scripts
# 4. Update documentation
# 5. Test all imports and examples
# 6. Commit with detailed message
```

---

## Expected Results

### Before Cleanup
```
41 total directories
Duplicates: core + core_lib, utils + utilities, data_collection + data_pipeline, feature_engineering + features
Disk usage: ~83M (mostly .venv)
```

### After Cleanup
```
25-30 directories (clean hierarchy)
No duplicates
Disk usage: ~2M (saved 81M)
Clear structure: core_lib/ → data_pipeline/ → features/ → validation/ → experiments/
```

---

## Risk Assessment

| Risk | Mitigation | Severity |
|------|------------|----------|
| Delete active files | Use `git mv` for tracked files; review before `rm -rf` | Low |
| Break imports | Already migrated; old dirs unused | Low |
| Lose .venv dependencies | Already using project root .venv via uv | None |
| Accidental deletion | Git history preserves everything; can rollback | Low |

---

## Rollback Plan

If anything goes wrong:
```bash
git reset --hard HEAD~1  # Undo last commit
git reflog                # View history
git checkout <sha>        # Restore specific state
```

---

## Decision Points

1. **feature_engineering/experiment/ and production/**
   - Review contents first
   - If empty → delete
   - If has content → migrate to experiments/ or features/

2. **Old .gitignore patterns**
   - May reference old paths (data_collection/, feature_engineering/)
   - Update after cleanup

3. **CI/CD or scripts referencing old paths**
   - Search for hardcoded paths before deletion
   - Update if found

---

## Recommended Immediate Action

**Execute Quick Cleanup (15 min)**:
1. Delete 81M .venv
2. Remove duplicate directories
3. Consolidate remaining files
4. Clean workspace

**Benefits**:
- ✅ 98% disk space reduction (81M → ~2M)
- ✅ Clear single source of truth for each module
- ✅ No import confusion
- ✅ Professional workspace organization

---

Ready to execute? Say:
- **"quick cleanup"** → Run 15-min cleanup only
- **"full cleanup"** → Quick cleanup + examples + automation
- **"review first"** → Show contents of feature_engineering/ before deciding
