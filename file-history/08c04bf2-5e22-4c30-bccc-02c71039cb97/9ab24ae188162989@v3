import argparse
import logging
import os.path
import time

from ml_feature_set.validate_feature_set import validate


# Example usage of FeatureConstructor
def main():
    # 解析命令行参数
    parser = argparse.ArgumentParser(description="验证特征集")
    parser.add_argument("--feature_set_path", type=str, help="特征集路径")
    args = parser.parse_args()

    sample_data_dir = os.path.normpath(os.path.join(__file__, "..", "sample_data"))

    # 如果从命令行传递了feature_set_path，则使用它
    # 否则使用代码中定义的默认值
    if args.feature_set_path:
        feature_set_path = args.feature_set_path
    else:
        # Feature set options
        # feature_set_path = "demo_feature_set"
        # feature_set_path = "ohlcv_size79_v1"
        # feature_set_path = "ohlcv_size112_v1"
        # feature_set_path = "ohlcv_oscillator_sizex_v2"
        # feature_set_path = "ohlcv_trend-following_sizex_v1"
        # feature_set_path = "ohlcv_support-resistance_sizex_v2"
        # feature_set_path = "ohlcv_size69_indicators_v1"
        # feature_set_path = "ohlcv_size84_indicators_v2"
        # feature_set_path = "ohlcv_support-resistance-feargreed_sizex_v1"
        # feature_set_path = "ohlcv_fluid-dynamics_sizex_v1"
        # feature_set_path = "ohlcv_classic79-with-resample_sizex_v1"
        # feature_set_path = "ohlcv_rsi14_sizex_v1"
        # feature_set_path = "simple_atr_sizex_v1"
        # feature_set_path = "simple_fear_greed_sizex_v1"
        # feature_set_path = "ohlcv_comprehensive_sizex_v2"
        # feature_set_path = "ohlcv_comprehensive_sizex_v3"
        # feature_set_path = "simple_fibonacci_sizex_v1"
        # feature_set_path = "ohlcv_comprehensive_sizex_v3"
        # feature_set_path = "ohlcv_comprehensive_sizex_v4"
        # feature_set_path = "simple_ml-feature_sizex_v1"
        # feature_set_path = "ohlcv_comprehensive_sizex_v5"
        # feature_set_path = "ohlcv_trend_momentum_sizex_v1"
        feature_set_path = "ohlcv_atr-adaptive-laguerre_size85_v5"

    # Multi-data source example
    sample_data_paths = [
        f"{sample_data_dir}/resampled_binance_BTC-2h.csv",
        # f"{sample_data_dir}/resampled_coinbasepro_BTC-15m.csv"
        # f"{sample_data_dir}/resampled_binance_ETH-1h.csv"
        # f"{sample_data_dir}/resampled_binance_SOL-1h.csv"
        # f"{sample_data_dir}/resampled_binance_SOL-15m.csv"
        f"{sample_data_dir}/fear_and_greed.csv",
    ]

    # Set up logging
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger()

    print(f"正在验证特征集: {feature_set_path}")
    start_time = time.time()

    # Validate using single or multiple data sources
    is_valid = validate(feature_set_path, sample_data_paths, logger)

    end_time = time.time()
    print(f"Time taken to validate feature set: {end_time - start_time:.2f} seconds")
    return 0 if is_valid else 1


if __name__ == "__main__":
    # sys.exit(main())
    main()
