"""
Pytest configuration and fixtures for exness-data-preprocess tests.

End-to-end testing with real Exness-format data - no mocking.
"""

import shutil
import tempfile
from pathlib import Path

import pytest


@pytest.fixture
def temp_dir():
    """Create temporary directory for testing.

    SLO-AV-1: 100% cleanup success.
    SLO-MA-5: 100% cleanup success (no orphaned temp files).
    """
    temp_path = Path(tempfile.mkdtemp())
    yield temp_path
    # Cleanup
    if temp_path.exists():
        shutil.rmtree(temp_path)


@pytest.fixture
def fixtures_dir():
    """Path to test fixtures directory containing real Exness-format ZIP files."""
    return Path(__file__).parent / "fixtures"


@pytest.fixture
def processor_with_temp_dir(temp_dir):
    """Create ExnessDataProcessor with temporary directory.

    SLO-MA-1: Fixture reusable across test files.
    """
    from exness_data_preprocess.processor import ExnessDataProcessor

    return ExnessDataProcessor(base_dir=temp_dir)


@pytest.fixture
def processor_with_real_data(temp_dir, fixtures_dir):
    """Create ExnessDataProcessor and load real Exness fixture data.

    End-to-end: Loads real ZIP files from fixtures/ directory.
    No mocking - uses actual processor methods.

    SLO-MA-4: 0 external network dependencies (uses local fixtures).
    """
    from exness_data_preprocess.processor import ExnessDataProcessor
    import shutil

    processor = ExnessDataProcessor(base_dir=temp_dir)

    # Copy real fixture ZIPs to processor's temp directory
    processor.temp_dir.mkdir(parents=True, exist_ok=True)

    raw_spread_zip = fixtures_dir / "Exness_EURUSD_Raw_Spread_2024_09.zip"
    standard_zip = fixtures_dir / "Exness_EURUSD_Standard_2024_09.zip"

    if raw_spread_zip.exists():
        shutil.copy(raw_spread_zip, processor.temp_dir)
    if standard_zip.exists():
        shutil.copy(standard_zip, processor.temp_dir)

    return processor
