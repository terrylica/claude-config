# Workspace Roadmap

**Version**: 1.1.0
**Status**: Phase 1-3 Complete, Phase 4-5 Pending
**Last Updated**: 2025-10-06

---

## Completed Phases

### Phase 1: Prune Legacy Files ✅
**Completion**: 2025-10-06 (commit `f05be7d`)
**Files Removed**: 24 files, ~1.5MB

- Removed old build system: setup.py, setup.cfg, requirements*.txt, tox.ini, MANIFEST.in
- Removed stub RST documentation: AUTHORS.rst, CONTRIBUTING.rst, HISTORY.rst, README.rst
- Removed Sphinx infrastructure: docs/conf.py, docs/Makefile, docs/*.rst stubs
- Removed outdated CI/CD: .travis.yml (Python 3.6-3.8), .readthedocs.yml, .deepsource.toml
- Cleaned 13 __pycache__ directories

### Phase 2: Prune Upstream Research ✅
**Completion**: 2025-10-06 (commit `f05be7d`)
**Files Removed**: 29+ files, ~3.7MB

- Removed experiment/ directory: RAG-SR research methods, SRBench results
- Removed data/ directory: Competition certificates, test CSV
- Removed tutorial/ directory: Jupyter notebooks
- Consolidated example/examples/ → organized examples/ structure

**Outcome**: 419 → 366 files (-13%), workspace optimized for crypto feature engineering

### Phase 3: Modern Infrastructure ✅
**Completion**: 2025-10-06
**Files Created**: 6 files

- Created `.github/workflows/ci.yml`: Python 3.9-3.13 matrix, lint/test/validate/build jobs
- Created `.pre-commit-config.yaml`: ruff, trailing-whitespace, end-of-file-fixer, check-yaml, check-added-large-files
- Created `CHANGELOG.md`: Keep a Changelog v1.0.0 format, tracks 0.2.5-dev
- Created `.vscode/settings.json`: Python + Ruff integration, auto-format on save
- Created `.vscode/extensions.json`: Recommended extensions (ms-python.python, charliermarsh.ruff, tamasfe.even-better-toml)

**SLOs Met**:
- Availability: CI configured for every push/PR
- Correctness: Tests enforced before merge
- Observability: GitHub Actions UI integration
- Maintainability: Pre-commit hooks + VS Code auto-format

---

## Pending Phases

### Phase 4: Enhanced Documentation (MEDIUM PRIORITY)

**Objective**: Comprehensive API reference, troubleshooting, benchmarks

**SLOs**:
- Correctness: All code examples must be executable
- Maintainability: Auto-generated from docstrings where possible
- Observability: Clear error messages with solutions

#### Tasks

##### 4.1 API Reference
**File**: `docs/API_REFERENCE.md`
**Sections**:
- EvolutionaryForestRegressor: Constructor params, methods
- Objective functions: MSE, RMSE, MAE, R² specifications
- Configuration classes: EvaluationConfiguration, NoiseConfiguration

**Source**: Extract from evolutionary_forest/forest.py docstrings

##### 4.2 Troubleshooting Guide
**File**: `docs/TROUBLESHOOTING.md`
**Sections**:
- Import errors (torch, shap, category_encoders)
- Low OOD R² (insufficient generations, noisy targets)
- NaN in features (division by zero, log of negative)
- Memory issues (subsample data)

**Source**: Consolidate from QUICK_START.md, DEPENDENCY_ARCHITECTURE.md

##### 4.3 Benchmarks
**File**: `docs/BENCHMARKS.md`
**Metrics**:
- Time: n_gen=50, n_pop=200 on 40K samples
- Quality: OOD R² on Binance SOLUSDT 5-min
- Memory: Peak usage during training

**SLO**: Benchmarks updated with each major version

##### 4.4 Contributing Guide (Fork-Specific)
**File**: `CONTRIBUTING_FORK.md`
**Sections**:
- Setting up dev environment (uv sync --extra full)
- Running tests (pytest, pre-commit)
- Submitting fixes (branch naming, commit messages)
- Upstream sync strategy

---

### Phase 5: Deployment (LOW PRIORITY)

**Objective**: Reproducible environments, PyPI publishing

#### Tasks

##### 5.1 Docker Support
**File**: `Dockerfile`
**Base**: python:3.13-slim
**Layers**: Install uv, sync dependencies, copy source
**Entrypoint**: uv run python

##### 5.2 Docker Compose
**File**: `docker-compose.yml`
**Services**: dev (with mounted volumes for development)

##### 5.3 PyPI Publishing Workflow
**File**: `.github/workflows/pypi-publish.yml`
**Trigger**: Tags matching v*
**Jobs**: Build wheel, publish to PyPI
**Secrets**: PYPI_API_TOKEN

**SLO**: Releases published to PyPI within 10 minutes of tag

---

## Implementation Priority

**Completed** (Phase 3):
1. ✅ GitHub Actions CI/CD
2. ✅ Pre-commit hooks
3. ✅ CHANGELOG.md
4. ✅ VS Code configuration

**Next** (Phase 4):
5. API reference
6. Troubleshooting guide
7. Benchmarks
8. Fork contributing guide

**Optional** (Phase 5):
9. Docker support
10. PyPI publishing

---

## Success Criteria

### Phase 3 Complete ✅
- [x] CI runs on every push to fix/objective-functions-sklearn-api
- [x] Pre-commit hooks installed and documented
- [x] CHANGELOG.md tracks version 0.2.5-dev
- [x] VS Code opens workspace with zero configuration needed

### Phase 4 Complete When:
- [ ] API reference documents all public classes/methods
- [ ] Troubleshooting guide covers all common errors from issues
- [ ] Benchmarks show performance on real Binance data
- [ ] Contributing guide enables external contributors

### Phase 5 Complete When:
- [ ] Docker image builds and runs examples
- [ ] PyPI releases automated on git tags
- [ ] Package installable via `pip install evolutionary-forest-crypto`

---

## References

- **Cleanup Commit**: `f05be7d` - Major workspace cleanup
- **GitHub Repo**: https://github.com/terrylica/EvolutionaryForest (private)
- **User Memory**: ~/.claude/CLAUDE.md - uv tooling, pre-commit standards
- **Related Docs**:
  - docs/QUICK_START.md
  - docs/DEPENDENCY_ARCHITECTURE.md
  - docs/FORK_STATUS.md

---

## Version History

- **1.1.0** (2025-10-06): Phase 3 complete - modern infrastructure
- **1.0.0** (2025-10-06): Initial roadmap, Phase 1-2 complete
