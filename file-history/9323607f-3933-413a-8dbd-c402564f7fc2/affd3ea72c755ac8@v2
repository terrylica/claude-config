"""Quick start example for OOD-robust range bar ML.

This script demonstrates the complete pipeline:
1. Load data
2. Train model with regime stratification
3. Conformal calibration
4. Stress testing
5. Comprehensive evaluation

Usage:
    uv run --active python -m research.ml_ood.examples.quick_start
"""

from pathlib import Path
import sys

import torch
from torch.utils.data import DataLoader

# Add parent directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent))

from data import RangeBarDataset, create_splits
from data.utils import FixedPointConverter
from models import OODRobustRangeBarModel
from training import RegimeStratifiedSampler, ConformalCalibrator
from evaluation import StressTestSuite, OODMetrics


def main():
    print("="*60)
    print("OOD-Robust Range Bar ML - Quick Start")
    print("="*60)

    # Configuration
    DATA_PATH = Path("output/solusdt_historical_2022_2025/spot_SOLUSDT_rangebar_20220101_20250930_0050bps.csv")
    SEQUENCE_LEN = 64
    BATCH_SIZE = 256
    EPOCHS = 5  # Quick demo
    DEVICE = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    print(f"\nDevice: {DEVICE}")
    print(f"Data: {DATA_PATH}")

    # Step 1: Load and prepare data
    print("\n" + "="*60)
    print("Step 1: Loading Data")
    print("="*60)

    # Load full dataset
    df = FixedPointConverter.load_csv(DATA_PATH)
    df = FixedPointConverter.compute_features(df)

    # Create temporal splits
    train_df, val_df, test_df = create_splits(df)

    # Create datasets
    print("\nCreating PyTorch datasets...")
    train_dataset = RangeBarDataset(
        csv_path=DATA_PATH,
        sequence_len=SEQUENCE_LEN,
        detect_regimes=True,
    )

    # Normalize features
    train_stats = train_dataset.normalize_features()

    print(f"✓ Training samples: {len(train_dataset):,}")
    print(f"✓ Features: {len(train_dataset.feature_cols)}")
    print(f"✓ Sequence length: {SEQUENCE_LEN}")

    # Create data loaders
    train_sampler = RegimeStratifiedSampler(
        train_dataset,
        batch_size=BATCH_SIZE,
    )
    train_loader = DataLoader(
        train_dataset,
        batch_size=BATCH_SIZE,
        sampler=train_sampler,
        num_workers=2,
    )

    # Step 2: Create model
    print("\n" + "="*60)
    print("Step 2: Creating Model")
    print("="*60)

    model = OODRobustRangeBarModel(
        n_features=len(train_dataset.feature_cols),
        d_model=256,
        n_heads=8,
        n_layers=4,
        embedding_dim=128,
    ).to(DEVICE)

    print(model)

    # Step 3: Training demo (minimal for quick start)
    print("\n" + "="*60)
    print("Step 3: Training Demo")
    print("="*60)
    print(f"Training for {EPOCHS} epochs (quick demo)...")

    optimizer = torch.optim.AdamW(model.parameters(), lr=1e-4, weight_decay=0.01)

    model.train()
    for epoch in range(1, EPOCHS + 1):
        total_loss = 0.0
        n_batches = 0

        for batch in train_loader:
            sequences = batch["features"].to(DEVICE)
            targets = batch["target"].to(DEVICE)
            original_features = sequences[:, -1, :].to(DEVICE)

            # Forward pass
            outputs = model(sequences)
            loss, loss_dict = model.compute_loss(outputs, targets, original_features)

            # Backward pass
            optimizer.zero_grad()
            loss.backward()
            torch.nn.utils.clip_grad_norm_(model.parameters(), max_norm=1.0)
            optimizer.step()

            total_loss += loss.item()
            n_batches += 1

            if n_batches >= 10:  # Quick demo: only 10 batches per epoch
                break

        avg_loss = total_loss / n_batches
        print(f"Epoch {epoch}/{EPOCHS} - Loss: {avg_loss:.4f}")

    print("✓ Training complete (demo mode)")

    # Step 4: Stress Testing
    print("\n" + "="*60)
    print("Step 4: Stress Testing")
    print("="*60)

    stress_tester = StressTestSuite(model, train_dataset, DEVICE)

    # Test on Terra/Luna crash
    terra_metrics = stress_tester.run_stress_test("terra_luna_crash", batch_size=256)

    if terra_metrics:
        print("\n✓ Stress test results:")
        print(f"  Accuracy: {terra_metrics.get('stress_accuracy', 0):.1%}")
        print(f"  Anomaly score: {terra_metrics.get('stress_anomaly_mean', 0):.4f}")
        print(f"  Uncertainty trend: {terra_metrics.get('uncertainty_trend', 0):+.4f}")

    # Step 5: Conformal Calibration (demo)
    print("\n" + "="*60)
    print("Step 5: Conformal Calibration")
    print("="*60)

    # For demo, use a small subset as calibration set
    calibration_loader = DataLoader(
        train_dataset,
        batch_size=BATCH_SIZE,
        shuffle=False,
        num_workers=2,
    )

    calibrator = ConformalCalibrator(alpha=0.1)
    quantile = calibrator.calibrate(model, calibration_loader, DEVICE)

    print(f"\n✓ Calibrated quantile: {quantile:.4f}")

    # Step 6: Comprehensive Evaluation
    print("\n" + "="*60)
    print("Step 6: Evaluation Metrics")
    print("="*60)

    test_loader = DataLoader(
        train_dataset,  # Using train for demo
        batch_size=BATCH_SIZE,
        shuffle=False,
        num_workers=2,
    )

    metrics = OODMetrics.compute_all_metrics(
        model,
        test_loader,
        DEVICE,
        regime_conditional=True,
    )

    OODMetrics.print_metrics(metrics, title="Demo Evaluation")

    # Summary
    print("\n" + "="*60)
    print("Quick Start Complete!")
    print("="*60)
    print("\n✓ Pipeline stages demonstrated:")
    print("  1. Data loading with regime detection")
    print("  2. Model creation (Transformer + dual-task head)")
    print("  3. Training with regime-stratified sampling")
    print("  4. Stress testing on crisis periods")
    print("  5. Conformal calibration for uncertainty")
    print("  6. Comprehensive OOD metrics")
    print("\nFor full training, run:")
    print("  uv run --active python -m research.ml_ood.train \\")
    print("    --data output/solusdt_historical_2022_2025/spot_SOLUSDT_rangebar_20220101_20250930_0050bps.csv \\")
    print("    --epochs 50 \\")
    print("    --batch-size 256")
    print("\n" + "="*60)


if __name__ == "__main__":
    main()
