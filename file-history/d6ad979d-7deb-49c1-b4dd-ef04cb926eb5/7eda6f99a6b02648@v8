# Insurance Project Memory

**Architecture**: Link Farm + Hub-and-Spoke with Progressive Disclosure

**Purpose**: Personal insurance automation and credential management

**Documentation Hub**: [`docs/INDEX.md`](/Users/terryli/own/insurance/docs/INDEX.md)

---

## Quick Links

**Architecture**: [`docs/architecture/`](/Users/terryli/own/insurance/docs/architecture/) - Page Object Model design and test strategy
**Specifications**: [`specifications/`](/Users/terryli/own/insurance/specifications/) - OpenAPI 3.1.0 specs
**Tests**: [`tests/`](/Users/terryli/own/insurance/tests/) - Pytest reconnaissance and automation
**Page Objects**: [`pages/`](/Users/terryli/own/insurance/pages/) - Reusable page classes
**Audit**: [`docs/AUDIT.md`](/Users/terryli/own/insurance/docs/AUDIT.md) - API verification (v1.1.0)
**Decisions**: [`docs/decisions/`](/Users/terryli/own/insurance/docs/decisions/) - Technology evaluations

---

## Current Status (2025-10-17)

**Phase**: Phase 0 Complete - Restructured to Best Practices
**Version**: Architecture v1.0.0

**Phase 0 Accomplishments** ‚úÖ:
- ‚úì Directory structure following Playwright best practices
- ‚úì Base page class with common methods (DRY principle)
- ‚úì Artifact manager utility for centralized capture
- ‚úì Pytest fixtures for shared setup
- ‚úì Page-level specifications (modular approach)
- ‚úì Authentication refactored to reusable module
- ‚úì Reconnaissance refactored to pytest framework
- ‚úì Architecture documentation complete

**Next**: Phase 1 - Systematic Discovery
- Run full form exploration using pytest reconnaissance tests
- Capture all form pages and field structures
- Document complete page inventory and field catalog
- Map state transitions and conditional logic

**See**: [`docs/architecture/test-strategy.md`](/Users/terryli/own/insurance/docs/architecture/test-strategy.md) (v1.0.0)

---

## Credential Management

**Doppler Project**: `insurance` (production config: `prd`)

**Access Pattern**:
```bash
doppler run --project insurance --config prd -- <command>
```

**View Secrets**:
```bash
doppler secrets --project insurance --config prd
```

**Current Credentials**:
- Manulife Par Account (`MANULIFE_PAR_USERNAME`, `MANULIFE_PAR_PASSWORD`)
- Manulife Passkey (`MANULIFE_PAR_PASSKEY_*`) - For CDP WebAuthn automation

**Migration Workflow**: [`docs/workflows/credential-sync.md`](/Users/terryli/own/insurance/docs/workflows/credential-sync.md)
**Auth Implementation**: [`docs/workflows/authentication-implementation.md`](/Users/terryli/own/insurance/docs/workflows/authentication-implementation.md)

---

## Playwright Automation

**Framework**: Playwright (Python) with `uv`
**Authentication**: Passkey via `storage-state.json` (gitignored)
**Artifacts**: Screenshots, DOM dumps, HAR, trace, telemetry (no video)

**Key Features**:
- **PII-safe**: Masked screenshots, log keys only
- **ARIA-first selectors**: Stable, accessibility-driven targeting
- **Comprehensive capture**: HAR, trace with snapshots, telemetry NDJSON
- **Iframe-proof**: Automatic frame detection
- **Offline replay**: `routeFromHAR` for analysis

**Usage**:
```bash
# Reconnaissance (discovery only, no submission)
doppler run --project insurance --config prd -- \
  uv run --active pytest -v -m reconnaissance tests/reconnaissance/

# Automation (fill form, controlled submission) - Phase 3
export FORM_JSON='{"first_name":"Ada",...}'
export SUBMIT=true  # Omit or set false for dry-run
doppler run --project insurance --config prd -- \
  uv run --active pytest -v tests/automation/fill_par_form.py
```

**Documentation**: [`docs/automation/manulife-par.md`](/Users/terryli/own/insurance/docs/automation/manulife-par.md)
**Specification**: [`specifications/playwright-automation.yaml`](/Users/terryli/own/insurance/specifications/playwright-automation.yaml)

---

## üì∏ Visual Inspection Mandate

**STATUS**: MANDATORY for all reconnaissance, spike, and exploratory work
**ENFORCEMENT**: Pre-commit hook + CI/CD validation

### Why This Matters

**2025-10-17 Critical Discovery**: Reconnaissance on Manulife Par form found a selector bug ONLY through PNG examination:
- Overly broad selector `page.locator("select, [role='combobox']").filter(has_text="Select").first`
- Accidentally changed product from "Manulife Par" to "Family Term"
- ARIA tree comparison showed **NO DIFFERENCE** (same structure, different content)
- PNG screenshot clearly showed wrong product selected
- **Impact**: Would have caused 4+ hours of debugging in implementation phase vs. 30 seconds to catch visually

**Lesson**: Screenshots are NOT optional documentation ‚Äî they are MANDATORY evidence that catches issues invisible in ARIA/DOM analysis.

### Mandatory Workflow

**FOR EVERY RECONNAISSANCE OR SPIKE:**

#### 1. Capture Screenshots at Each Step

```python
# After EVERY significant action
artifact_manager.capture_screenshot(page, "step_description")
```

**Minimum Requirements**:
- [ ] Initial state (`001_initial.png`)
- [ ] After each interaction (`002_*.png`, `003_*.png`, etc.)
- [ ] Final state (`00N_final.png`)

#### 2. Examine EACH Screenshot (Not Just Generate)

**Agent Reflection Pattern** - STOP after each screenshot:

```markdown
## Visual Inspection: [step_name].png

**What I See**:
- [Describe visible elements, state, layout]

**Expected vs. Actual**:
- ‚úÖ Product dropdown shows "Manulife Par" [as expected]
- ‚úÖ Form fields match expected structure [as expected]
- ‚ö†Ô∏è  Blue banner visible [unexpected but harmless]

**PII Check**: ‚úÖ No sensitive data visible / ‚úÖ PII properly masked

**Action**: Proceed / Investigate discrepancy / Document finding
```

#### 3. Document in Report

**Link screenshots to findings**:

```markdown
## Step 2: Product Selection

See: `artifacts/recon_20251017/002_product_selected.png`

**Visual Verification**:
- Product dropdown correctly shows "Manulife Par"
- "Upload Later" radio selected as expected
- No unexpected state changes observed
```

### Pre-Commit Checklist

Before committing reconnaissance work:

- [ ] **Minimum 3 screenshots captured**
- [ ] **ALL screenshots visually examined** (describe what you saw)
- [ ] **Any visual discrepancies investigated**
- [ ] **PII masking verified** by visual inspection
- [ ] **Findings reference screenshots** in report.md
- [ ] **Manifest includes screenshot inventory** (index.json)

**ENFORCEMENT**: Pre-commit hook validates screenshot count and report references.

### Quick Reference: Good vs. Bad

‚úÖ **GOOD**:
```markdown
## Step: Fill Product Dropdown

Screenshot: `002_product_selected.png`

Visual Check:
- ‚úÖ Product shows "Manulife Par"
- ‚úÖ Upload Later selected
- ‚úÖ Form fields match Par structure

Conclusion: Proceed to next step.
```

‚ùå **BAD**:
```markdown
## Artifacts
- 001.png
- 002.png
- 003.png

Next: Implement automation.
```
*Problem: No evidence screenshots were examined, no visual verification, no findings.*

### Enforcement

**Pre-Commit Hook**: Validates minimum 3 screenshots + report references
**CI/CD**: Blocks PR if artifacts incomplete
**See**: [`docs/analysis/visual-inspection-enforcement-proposal.md`](/Users/terryli/own/insurance/docs/analysis/visual-inspection-enforcement-proposal.md)

---

## Authentication

**Method**: Automated passkey via CDP WebAuthn ‚Üí `storage-state.json`
**Module**: [`auth/passkey_authenticator.py`](/Users/terryli/own/insurance/auth/passkey_authenticator.py)
**Implementation**: [`docs/workflows/authentication-implementation.md`](/Users/terryli/own/insurance/docs/workflows/authentication-implementation.md) (v1.0.0)

**Usage**:
```bash
# CLI script
doppler run --project insurance --config prd -- \
  uv run --active python -m auth.passkey_authenticator

# As module (in tests/code)
from auth.passkey_authenticator import PasskeyAuthenticator
authenticator = PasskeyAuthenticator(...)
storage_state = authenticator.authenticate()
```

---

## Implementation Strategy

**Approach**: Systematic 3-phase strategy for complex multi-page forms

**Phase 0 - Structural Foundation** ‚úÖ (COMPLETED 2025-10-17)
- Restructure project to follow Playwright best practices
- Page Object Model architecture
- Shared utilities and pytest fixtures
- Modular page-level specifications

**Phase 1 - Systematic Discovery** (NEXT)
- Explore complete multi-page form structure
- Capture artifacts at each page transition
- Document page inventory and field catalog
- Map state transitions and conditional logic

**Phase 2 - Structured Documentation**
- Design page object classes for each form page
- Create comprehensive specifications
- Define test data sets

**Phase 3 - Modular Implementation**
- Implement page objects using base class
- Build form orchestrator
- Test dry-run and live submission modes

**Rationale**: Multi-page forms require systematic exploration before automation - discover structure ‚Üí document specs ‚Üí implement deterministically

**Full Strategy**: [`docs/architecture/test-strategy.md`](/Users/terryli/own/insurance/docs/architecture/test-strategy.md) (v1.0.0)
**Alternative Considered**: Stagehand - See [`docs/decisions/stagehand-evaluation.md`](/Users/terryli/own/insurance/docs/decisions/stagehand-evaluation.md)

---

## Dynamic Form Handling

**Constraint**: No selector fallbacks or retry logic - explicit waits only

**Playwright Wait Strategies**:
- **Lazy loading**: `locator.wait_for(state='visible')` - wait for element appearance
- **API-driven dropdowns**: `page.wait_for_response(url_pattern)` - wait for data fetch
- **SPA transitions**: `page.wait_for_load_state('networkidle')` - wait for route change
- **Conditional fields**: `x-depends-on` in specs defines prerequisite fields
- **Multi-step forms**: `x-form-steps` array defines navigation sequence
- **Iframe content**: `frame_locator().locator().wait_for()` - wait for nested elements

**Timeout Configuration**: Per-field via `x-timeout` in specifications (default 15s)
**Failure Mode**: Timeout exceptions with artifacts (screenshots, trace, HAR, telemetry)

---

## Environment Variables

**FORM_JSON**: JSON payload with form field values
```bash
export FORM_JSON='{"first_name":"Ada","last_name":"Lovelace","email":"ada@example.com","advisor_id":"A123456","policy":"PAR-00112233"}'
```

**SUBMIT**: Controls form submission (default: `false`)
```bash
export SUBMIT=true   # Actually submit form
export SUBMIT=false  # Dry-run: fill but don't submit
# Omit variable = dry-run mode
```

**Doppler Secrets**: Injected via `doppler run --project insurance --config prd`
- `MANULIFE_PAR_USERNAME` - Usage determined during reconnaissance
- `MANULIFE_PAR_PASSWORD` - Usage determined during reconnaissance

---

## AI Agent Brief

For any AI coding agent implementing form automation:

> **Environment**: Python + Playwright, auth via `storage-state.json`, secrets via Doppler
> **Input**: JSON payload in `FORM_JSON` env var
> **Artifacts**: Screenshots (PII-masked), DOM dumps, HAR, trace, telemetry NDJSON
> **No video recording**
> **Implementation**: ARIA-first selectors, explicit waits (no retry logic), fail-fast on errors
> **Submission**: Environment-controlled via `SUBMIT=true` flag
> **Output**: `artifacts/YYYY-MM-DD_HH-MM-SS/` with `index.json` manifest

**Full specification**: [`specifications/manulife-par-form.yaml`](/Users/terryli/own/insurance/specifications/manulife-par-form.yaml)

---

## Development Standards

**Python**: `uv run --active python -m <module>`
**Versioning**: SemVer 2.0.0
**Paths**: Always absolute (`/Users/terryli/...`), space after extension
**Security**: Doppler injection only, never commit secrets
**Machine-Readable**: OpenAPI 3.1.0 specs prioritized over human docs

---

## Project Structure

```
~/own/insurance/
‚îú‚îÄ‚îÄ CLAUDE.md                           # Project hub (this file)
‚îú‚îÄ‚îÄ pytest.ini                          # Pytest configuration
‚îú‚îÄ‚îÄ .gitignore                          # Excludes secrets, artifacts, auth state
‚îú‚îÄ‚îÄ pages/                              # Page objects (OUTSIDE tests/)
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ base_page.py                   # Base class with common methods
‚îÇ   ‚îî‚îÄ‚îÄ *_page.py                      # Page-specific classes (Phase 3)
‚îú‚îÄ‚îÄ tests/                              # Pytest test directory
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ conftest.py                    # Shared fixtures (browser, page, artifacts)
‚îÇ   ‚îú‚îÄ‚îÄ reconnaissance/                # Exploratory discovery tests
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ explore_welcome_page.py   # Welcome page exploration
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ explore_full_form.py      # Full form exploration (Phase 1)
‚îÇ   ‚îî‚îÄ‚îÄ automation/                    # Form automation tests (Phase 3)
‚îú‚îÄ‚îÄ utils/                              # Shared utilities
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ artifact_manager.py            # Centralized artifact capture
‚îú‚îÄ‚îÄ fixtures/                           # Test data (Phase 2)
‚îÇ   ‚îî‚îÄ‚îÄ __init__.py
‚îú‚îÄ‚îÄ auth/                               # Authentication
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ passkey_authenticator.py      # Reusable auth module
‚îÇ   ‚îî‚îÄ‚îÄ archive/                       # Archived scripts from Phase 0
‚îÇ       ‚îú‚îÄ‚îÄ final_auth.py             # Original auth script
‚îÇ       ‚îú‚îÄ‚îÄ reconnaissance.py         # Original reconnaissance
‚îÇ       ‚îî‚îÄ‚îÄ README.md                 # Migration guide
‚îú‚îÄ‚îÄ docs/                               # Documentation
‚îÇ   ‚îú‚îÄ‚îÄ INDEX.md                       # Documentation hub
‚îÇ   ‚îú‚îÄ‚îÄ AUDIT.md                       # Playwright API verification
‚îÇ   ‚îú‚îÄ‚îÄ architecture/                  # Architecture docs (Phase 0)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ page-object-design.md     # POM design patterns (v1.0.0)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ test-strategy.md          # 3-phase strategy (v1.0.0)
‚îÇ   ‚îú‚îÄ‚îÄ automation/                    # Automation workflows
‚îÇ   ‚îú‚îÄ‚îÄ analysis/                      # Technical analysis
‚îÇ   ‚îú‚îÄ‚îÄ decisions/                     # Technology evaluations
‚îÇ   ‚îú‚îÄ‚îÄ research/                      # Deep-dive reference docs
‚îÇ   ‚îî‚îÄ‚îÄ workflows/                     # Operational workflows
‚îú‚îÄ‚îÄ specifications/                     # Machine-readable specs
‚îÇ   ‚îú‚îÄ‚îÄ playwright-automation.yaml    # Universal automation spec
‚îÇ   ‚îú‚îÄ‚îÄ manulife-par-form.yaml       # Main form specification
‚îÇ   ‚îú‚îÄ‚îÄ slo.yaml                      # Service level objectives
‚îÇ   ‚îî‚îÄ‚îÄ pages/                         # Page-level specs (modular)
‚îÇ       ‚îî‚îÄ‚îÄ welcome-page.yaml         # Welcome page spec (v1.0.0)
‚îú‚îÄ‚îÄ artifacts/                         # Generated artifacts (gitignored)
‚îÇ   ‚îî‚îÄ‚îÄ .gitkeep
‚îî‚îÄ‚îÄ storage-state.json                 # Playwright auth state (gitignored)
```

---

## Playwright Feature Requirements

Specifications define required Playwright capabilities:

- [x] **Tracing**: screenshots + DOM snapshots via `BrowserContext.tracing.start()`
- [x] **HAR recording**: Network capture via `Browser.new_context(record_har=...)`
- [x] **PII-safe screenshots**: Mask sensitive fields via `Page.screenshot(mask=[...])`
- [x] **ARIA-first selectors**: `getByLabel/Role/Placeholder` priority
- [x] **ARIA snapshots**: Accessibility tree via `Locator.aria_snapshot()` (YAML)
- [x] **Iframe handling**: `FrameLocator` for nested forms
- [x] **Network telemetry**: `request/response/requestfailed` events logged
- [x] **Console capture**: JS errors and logs via `console/pageerror` events
- [x] **Offline replay**: `routeFromHAR` for analysis
- [x] **File upload**: `setInputFiles` for PDF/documents
- [x] **Wait strategies**: `wait_for_load_state`, `wait_for_response`, `locator.wait_for`
- [x] **No video recording**: Performance/PII concerns

**API Verification**: [`docs/AUDIT.md`](/Users/terryli/own/insurance/docs/AUDIT.md) v1.1.0 (11/11 APIs confirmed)
**Specifications**: [`specifications/playwright-automation.yaml`](/Users/terryli/own/insurance/specifications/playwright-automation.yaml) `x-implementation-requirements`

---

## Global Resources

**Parent Config**: [`~/.claude/CLAUDE.md`](/Users/terryli/.claude/CLAUDE.md)
**Doppler Integration**: [`~/.claude/specifications/doppler-integration.yaml`](/Users/terryli/.claude/specifications/doppler-integration.yaml)
**Toolchain**: [`~/.claude/docs/setup/toolchain.md`](/Users/terryli/.claude/docs/setup/toolchain.md)
**Credential Management**: [`~/.claude/docs/setup/credential-management.md`](/Users/terryli/.claude/docs/setup/credential-management.md)
