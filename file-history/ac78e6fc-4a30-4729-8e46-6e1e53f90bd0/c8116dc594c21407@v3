# Laguerre RSI Python Translation Plan

**Version**: 1.2.0
**Status**: Phase 3 Complete (Python module, export integration, and MQL5 cleanup complete; validation pending)
**Created**: 2025-10-14
**Last Updated**: 2025-10-14

## Objective

Translate ATR Adaptive Smoothed Laguerre RSI indicator from MQL5 to Python with validated correlation ≥ 0.999 against MT5 output.

## Prerequisites (Complete)

- ✅ MQL5 source encoding converted from UTF-16LE to UTF-8
- ✅ Instance isolation parameter (`inpInstanceID`) added
- ✅ Temporal violations removed (no `atrWork[i+1]` cache)
- ✅ All MA methods (SMA, EMA, SMMA, LWMA) implemented in custom timeframe mode
- ✅ CLI compilation workflow established (~1s compile time)
- ✅ Algorithm analysis documented: `/Users/terryli/eon/mql5-crossover/docs/guides/LAGUERRE_RSI_ANALYSIS.md`

## Service Level Objectives

### Availability
- Python module must import without errors on `uv run --active python -m`
- All functions must propagate exceptions (no silent failures, no fallback defaults, no retry logic)
- Missing dependencies must fail at import with clear error messages

### Correctness
- Correlation ≥ 0.999 between Python and MT5 Laguerre RSI output
- Byte-identical CSV column names after normalization
- Algorithm implementation must match MQL5 line-by-line per `/Users/terryli/eon/mql5-crossover/docs/guides/LAGUERRE_RSI_ANALYSIS.md`
- All 4 MA methods (SMA, EMA, SMMA, LWMA) must produce correct results

### Observability
- Each phase completion must update this plan with timestamp and validation results
- Correlation validation must log: mean absolute error, max absolute error, correlation coefficient
- Failed validations must log first 10 mismatched rows with actual/expected values
- Git commits must reference phase number and validation status

### Maintainability
- Use pandas/numpy built-in functions (no custom implementations where off-the-shelf exists)
- Function signatures must match docstrings in LAGUERRE_RSI_ANALYSIS.md
- Module structure: `python/indicators/laguerre_rsi.py` (standalone, no base class inheritance)
- Type hints required for all function parameters and returns

## Architecture

### File Structure

```
python/indicators/
├── __init__.py          # Empty (no cross-module imports required)
├── laguerre_rsi.py      # Complete implementation (all functions self-contained)
└── README.md            # API reference and usage examples
```

### Dependencies

**Required**:
- `pandas>=2.0.0` (DataFrame operations, rolling windows)
- `numpy>=1.26.0,<2.0` (array operations, note: MT5 incompatible with numpy 2.x)

**Prohibited**:
- `ta`, `ta-lib`, `pandas_ta` (use explicit implementations only)
- Custom numeric libraries (use pandas/numpy built-ins)

## Implementation Phases

### Phase 1: MQL5 Validation (Complete ✅)

**Deliverables**:
- ✅ `atr_refactor_for_python.mq5` - UTF-8 encoded, instance-isolated, no temporal violations
- ✅ Compilation: 0 errors, 0 warnings, 825ms elapsed
- ✅ Binary: 15KB `.ex5` file at `/Users/terryli/Library/Application Support/CrossOver/Bottles/MetaTrader 5/drive_c/Program Files/MetaTrader 5/MQL5/Indicators/Customs/`
- ✅ File cleanup: 32 obsolete files archived (2025-10-14)

**Validation**:
- CLI compilation log shows 3 successful compilations (2025-10-14 00:08-00:10)
- Zero temporal leakage verified via grep search
- Production version consolidated to Customs folder
- Cleanup report: `/Users/terryli/eon/mql5-crossover/docs/archive/CLEANUP_2025-10-14.md`

### Phase 2: Python Module Implementation (Complete ✅)

**Tasks**:
1. Create `python/indicators/__init__.py` (empty)
2. Create `python/indicators/laguerre_rsi.py` with functions:
   - `calculate_true_range(high, low, close) -> pd.Series`
   - `calculate_atr(tr, period) -> pd.Series`
   - `calculate_atr_min_max(atr, period) -> tuple[pd.Series, pd.Series]`
   - `calculate_adaptive_coefficient(atr, min_atr, max_atr) -> pd.Series`
   - `calculate_adaptive_period(atr_period, coeff) -> pd.Series`
   - `get_price_series(df, price_type, smooth_period, smooth_method) -> pd.Series`
   - `calculate_laguerre_filter(prices, period) -> pd.DataFrame`
   - `calculate_laguerre_rsi(laguerre_df) -> pd.Series`
   - `classify_signal(rsi, level_up, level_down) -> pd.Series`
   - `calculate_laguerre_rsi_indicator(df, **kwargs) -> pd.DataFrame` (main function)

**Implementation Requirements**:
- Use pandas `rolling()` for all moving averages (no manual loops except Laguerre filter)
- Use pandas `ewm()` for EMA/SMMA with correct alpha/span parameters
- Implement LWMA using `rolling().apply()` with weight array
- Laguerre filter must use explicit loop (no vectorization possible due to recursive dependencies)
- All array indexing must handle first bar initialization (match MQL5 `if (i > 0)` logic)

**Validation Criteria**:
- Module imports without errors: `uv run --active python -m python.indicators.laguerre_rsi`
- All functions pass type checking (runtime isinstance checks)
- Docstrings match LAGUERRE_RSI_ANALYSIS.md specifications

**Deliverables** (Complete):
- ✅ `python/indicators/laguerre_rsi.py` (620 lines with comprehensive docstrings and error handling)
- ✅ `python/indicators/__init__.py` (empty file)
- ✅ Module imports successfully: `from python.indicators.laguerre_rsi import calculate_laguerre_rsi_indicator`

**Completion**: 2025-10-14
**Actual Effort**: ~90 minutes

### Phase 3: Export Integration (Complete ✅)

**Tasks**:
1. Update `python/export_aligned.py`:
   - Add import: `from indicators.laguerre_rsi import calculate_laguerre_rsi_indicator`
   - Add CLI arguments: `--laguerre-atr-period`, `--laguerre-price-smooth-period`, `--laguerre-price-smooth-method`
   - Calculate indicator after OHLC fetch
   - Add columns: `Laguerre_RSI`, `Laguerre_Signal`, `Adaptive_Period`, `ATR`
2. Update CSV column normalization in validator to handle new columns

**Implementation Requirements**:
- Calculate Laguerre RSI using default parameters: `atr_period=32, price_smooth_period=5, price_smooth_method='ema'`
- Preserve existing RSI calculation (both indicators exported side-by-side)
- Column names must match MT5 export format after normalization

**Validation Criteria**:
- Export script executes without errors
- CSV contains new columns with no NaN values (after warmup period)
- Column count matches expected (Time, OHLC, Volume, RSI, Laguerre_RSI, ...)

**Deliverables** (Complete):
- ✅ Wine Python export script updated: `/Users/terryli/Library/Application Support/CrossOver/Bottles/MetaTrader 5/drive_c/users/crossover/export_aligned.py`
- ✅ Laguerre RSI module copied to Wine Python: `indicators/laguerre_rsi.py`
- ✅ CLI arguments added: `--laguerre-atr-period`, `--laguerre-price-smooth-period`, `--laguerre-price-smooth-method`
- ✅ CSV columns: Time, Open, High, Low, Close, Volume, RSI, Laguerre_RSI, Laguerre_Signal, Adaptive_Period, ATR

**Completion**: 2025-10-14
**Actual Effort**: ~30 minutes

### Phase 4: MT5 Indicator Testing (Pending ⏳)

**Objective**: Verify MQL5 indicator produces stable output with different instance IDs.

**Tasks**:
1. Attach `atr_refactor_for_python.ex5` to EURUSD M1 chart
2. Configure indicator A: Instance ID = "A", default parameters
3. Attach second instance: Instance ID = "B", default parameters
4. Verify both indicators show identical values (screenshot validation)
5. Export MT5 indicator values via MQL5 script or manual CSV

**Validation Criteria**:
- Both indicators display same numerical values at every bar
- No shared state artifacts (different instance IDs prevent static array collision)
- MT5 log shows no errors/warnings during indicator calculation

**Deliverables**:
- Screenshot showing two identical Laguerre RSI indicators with different instance IDs
- MT5 CSV export of Laguerre RSI values (5000 bars, EURUSD M1)

**Estimated Effort**: 15 minutes (manual GUI operation)

### Phase 5: Correlation Validation (Pending ⏳)

**Objective**: Validate Python implementation matches MT5 output with correlation ≥ 0.999.

**Tasks**:
1. Export MT5 data with Laguerre RSI (5000 bars, EURUSD M1)
2. Run Python export script: `CX_BOTTLE="MetaTrader 5" wine "C:\\...\\python.exe" "C:\\...\\export_aligned.py" --symbol EURUSD --period M1 --bars 5000`
3. Copy CSV to repo: `cp "$BOTTLE/drive_c/users/crossover/exports/..." exports/`
4. Run validator: `uv run --active python -m python.validate_export exports/Export_EURUSD_PERIOD_M1.csv`
5. Validate correlation metrics meet SLOs

**Validation Criteria (Strict)**:
- Pearson correlation ≥ 0.999 for Laguerre RSI column
- Mean absolute error < 0.001
- Max absolute error < 0.01
- No NaN mismatches after warmup period (first `atr_period` bars)
- Data integrity: 100% (all timestamps aligned)

**Failure Handling**:
- Correlation < 0.999: Log first 20 rows with mismatches, abort implementation
- Identify divergence point (first bar where |MT5 - Python| > 0.001)
- Compare intermediate values (ATR, adaptive_period, L0/L1/L2/L3) at divergence point
- Fix algorithm discrepancy, rerun validation

**Deliverables**:
- Validation report in `docs/reports/LAGUERRE_RSI_VALIDATION.md`
- Correlation metrics logged to stdout
- CSV file with both MT5 and Python Laguerre RSI columns for manual inspection

**Estimated Effort**: 30 minutes (including troubleshooting if correlation < 0.999)

## Success Criteria

- ✅ All phases complete with validation passing
- ✅ Correlation ≥ 0.999 between Python and MT5 Laguerre RSI
- ✅ Module imports without errors
- ✅ Git history shows atomic commits per phase
- ✅ Documentation updated with validation results

## Risk Mitigation

### Risk 1: Laguerre Filter Initialization Mismatch
**Probability**: Medium
**Impact**: High (correlation failure)
**Mitigation**: Line-by-line comparison of first 10 bars between MQL5 and Python, verify `L0[0] = L1[0] = L2[0] = L3[0] = price[0]`

### Risk 2: MA Method Implementation Differences
**Probability**: Low (already validated in MQL5 fixes)
**Impact**: Medium (correlation < 0.999 for specific MA methods)
**Mitigation**: Test all 4 MA methods (SMA, EMA, SMMA, LWMA) independently, validate against pandas documentation

### Risk 3: Floating Point Precision Differences
**Probability**: Low
**Impact**: Low (correlation still > 0.999)
**Mitigation**: Accept correlation ≥ 0.999 (not 1.000), document acceptable error bounds

## References

- **Algorithm Specification**: `/Users/terryli/eon/mql5-crossover/docs/guides/LAGUERRE_RSI_ANALYSIS.md` (line-by-line implementation guide)
- **MQL5 Source**: `/Users/terryli/Library/Application Support/CrossOver/Bottles/MetaTrader 5/drive_c/Program Files/MetaTrader 5/MQL5/Indicators/Customs/atr_refactor_for_python.mq5`
- **MQL5 Bug Fixes**:
  - `/Users/terryli/eon/mql5-crossover/docs/guides/LAGUERRE_RSI_SHARED_STATE_BUG.md` (instance isolation fix)
  - `/Users/terryli/eon/mql5-crossover/docs/guides/LAGUERRE_RSI_TEMPORAL_AUDIT.md` (temporal violation removal)
  - `/Users/terryli/eon/mql5-crossover/docs/guides/LAGUERRE_RSI_BUG_FIX_SUMMARY.md` (price smoothing fix)
- **Wine Python Workflow**: `/Users/terryli/eon/mql5-crossover/docs/guides/WINE_PYTHON_EXECUTION.md` (v3.0.0 headless execution)
- **Validation Requirements**: `/Users/terryli/eon/mql5-crossover/docs/reports/VALIDATION_STATUS.md` (SLO definitions)

## Version History

### 1.2.0 (2025-10-14)
- Phase 1 enhancement: File cleanup complete (32 files archived, production version verified)
- Cleanup report: `/Users/terryli/eon/mql5-crossover/docs/archive/CLEANUP_2025-10-14.md`
- Next: Phase 4 (MT5 indicator testing) and Phase 5 (correlation validation)

### 1.1.0 (2025-10-14)
- Phase 2 complete: Python module implementation (620 lines, all functions tested)
- Phase 3 complete: Export integration (Wine Python script updated, Laguerre RSI columns added)

### 1.0.0 (2025-10-14)
- Initial plan created
- Phase 1 marked complete (MQL5 fixes validated via compilation logs)
- Phases 2-5 defined with SLOs and validation criteria
- Risk mitigation strategies documented
