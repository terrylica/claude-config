#!/usr/bin/env python3
"""
Download full October 2023 tick data for all trading symbols.

This script downloads the complete month of tick data from OKX CDN for
all spot markets, suitable for the V1.7 backtester.

Run with: uv run --active python download_oct2023_full.py
"""

import logging
import sys
import time
from pathlib import Path

# Add libs to path for testing
sys.path.insert(0, str(Path(__file__).parent.parent / "libs" / "okx-price-provider" / "src"))

from okx_price_provider import download_month_ticks

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)

logger = logging.getLogger(__name__)


def main():
    """Download full October 2023 tick data."""
    print("\n" + "=" * 80)
    print("Downloading Full October 2023 Tick Data from OKX CDN")
    print("=" * 80 + "\n")

    # Target directory
    cache_dir = Path("data/okx_ticks")
    output_file = cache_dir / "202310.parquet"

    print(f"Target file: {output_file}")
    print(f"Market type: All spot markets (allspot)")
    print(f"Symbols: ALL (no filter - download everything)")
    print(f"Expected: ~100M-500M trades, ~5-10 GB compressed\n")

    # Confirm before proceeding
    response = input("This will download the full month of data. Continue? [y/N]: ")
    if response.lower() != 'y':
        print("Aborted.")
        return

    # Start download
    start_time = time.time()

    try:
        stats = download_month_ticks(
            msg_type="allspot",
            year=2023,
            month=10,
            output_parquet=output_file,
            symbols_filter=None,  # Download ALL symbols
            skip_errors=True,
        )

        elapsed = time.time() - start_time

        print(f"\n{'=' * 80}")
        print("Download Complete - SUCCESS!")
        print(f"{'=' * 80}")
        print(f"Days succeeded:      {stats['days_succeeded']}")
        print(f"Days failed:         {stats['days_failed']}")
        if stats['failed_days']:
            print(f"Failed days:         {stats['failed_days']}")
        print(f"Total trades:        {stats['total_trades']:,}")
        print(f"Unique symbols:      {stats['unique_symbols']}")
        print(f"Date range:          {stats['date_range'][0]} to {stats['date_range'][1]}")
        print(f"File size:           {stats['file_size_mb']:.2f} MB")
        print(f"Elapsed time:        {elapsed:.1f} seconds ({elapsed/60:.1f} minutes)")
        print(f"{'=' * 80}\n")

        print("✓ Full October 2023 dataset ready")
        print(f"✓ File location: {output_file}")
        print(f"\nNext steps:")
        print("1. Create V1.7 backtester prototype")
        print("2. Test with real prices from tick data")
        print("3. Compare V1.7 vs V1.6 results")

    except Exception as e:
        elapsed = time.time() - start_time
        print(f"\n{'=' * 80}")
        print("Download FAILED")
        print(f"{'=' * 80}")
        print(f"Error: {e}")
        print(f"Elapsed time: {elapsed:.1f} seconds")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
