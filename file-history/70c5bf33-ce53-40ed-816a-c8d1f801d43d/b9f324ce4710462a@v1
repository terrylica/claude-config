#!/usr/bin/env bash
# Pre-commit hook to:
# 1. Automatically remove unused imports and variables from Python files using ruff
# To install: 
# 1. Copy this file to .git/hooks/pre-commit
# 2. Make it executable: chmod +x .git/hooks/pre-commit

# Exit on error
set -e

# Debugging can be enabled for troubleshooting
DEBUG=false

echo "üîç [$(date '+%Y-%m-%d %H:%M:%S')] Starting pre-commit hook checks..."

# Get list of staged Python files only
STAGED_PY_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.py$' || true)

if [ -n "$STAGED_PY_FILES" ]; then
    # Multi-level approach to find Python and ruff
    find_best_python() {
        # 1. Try the active virtual environment first
        if [ -n "$VIRTUAL_ENV" ] && [ -f "$VIRTUAL_ENV/bin/python" ]; then
            echo "$VIRTUAL_ENV/bin/python"
            return
        fi
        
        # 2. Look for a .venv in the repository root
        REPO_ROOT=$(git rev-parse --show-toplevel)
        if [ -f "$REPO_ROOT/.venv/bin/python" ]; then
            echo "$REPO_ROOT/.venv/bin/python"
            return
        fi
        
        # 3. Fall back to system PATH
        PYTHON_IN_PATH=$(command -v python || command -v python3)
        if [ -n "$PYTHON_IN_PATH" ]; then
            echo "$PYTHON_IN_PATH"
            return
        fi
        
        # 4. Try pyenv as a last resort
        if [ -d "$HOME/.pyenv/shims" ] && [ -f "$HOME/.pyenv/shims/python" ]; then
            echo "$HOME/.pyenv/shims/python"
            return
        fi
        
        # No Python found
        echo ""
    }
    
    find_best_ruff() {
        local PYTHON_PATH="$1"
        
        # 1. Check if ruff exists in the same directory as Python
        PYTHON_DIR=$(dirname "$PYTHON_PATH")
        if [ -f "$PYTHON_DIR/ruff" ]; then
            echo "$PYTHON_DIR/ruff"
            return
        fi
        
        # 2. Ask Python to find ruff's location
        if [ -n "$PYTHON_PATH" ]; then
            RUFF_FROM_PYTHON=$("$PYTHON_PATH" -c "import shutil; print(shutil.which('ruff') or '')" 2>/dev/null || echo "")
            if [ -n "$RUFF_FROM_PYTHON" ]; then
                echo "$RUFF_FROM_PYTHON"
                return
            fi
            
            # 3. Try to find ruff in site-packages
            # This works for both venv and global installs
            SITE_PACKAGES=$("$PYTHON_PATH" -c "import site; print(site.getsitepackages()[0])" 2>/dev/null || echo "")
            if [ -n "$SITE_PACKAGES" ] && [ -d "$SITE_PACKAGES/../bin" ] && [ -f "$SITE_PACKAGES/../bin/ruff" ]; then
                echo "$SITE_PACKAGES/../bin/ruff"
                return
            fi
        fi
        
        # 4. Fall back to system PATH
        RUFF_IN_PATH=$(command -v ruff)
        if [ -n "$RUFF_IN_PATH" ]; then
            echo "$RUFF_IN_PATH"
            return
        fi
        
        # No ruff found
        echo ""
    }
    
    # Find Python and ruff
    PYTHON_PATH=$(find_best_python)
    if [ -z "$PYTHON_PATH" ]; then
        echo "‚ùå [$(date '+%Y-%m-%d %H:%M:%S')] Error: Python not found in PATH or virtual environment"
        exit 1
    fi
    
    RUFF_PATH=$(find_best_ruff "$PYTHON_PATH")
    
    if $DEBUG; then
        echo "Debug: Python found at $PYTHON_PATH"
        echo "Debug: Ruff found at $RUFF_PATH"
        "$PYTHON_PATH" -c "import sys; print(f'Python version: {sys.version}')"
    fi
    
    echo "‚ö° [$(date '+%Y-%m-%d %H:%M:%S')] Running ruff on staged Python files..."
    
    # Check if ruff exists
    if [ -z "$RUFF_PATH" ]; then
        # Try to install ruff if not found
        echo "üîÑ [$(date '+%Y-%m-%d %H:%M:%S')] Ruff not found, attempting to install..."
        "$PYTHON_PATH" -m pip install ruff
        
        # Check again after installation
        RUFF_PATH=$(find_best_ruff "$PYTHON_PATH")
        
        if [ -z "$RUFF_PATH" ]; then
            echo "‚ùå [$(date '+%Y-%m-%d %H:%M:%S')] Error: ruff not found and could not be installed"
            echo "    Please install it manually with: pip install ruff"
            exit 1
        fi
    fi
    
    # Run ruff only on staged Python files - fix unused imports (F401) and unused variables (F841)
    echo "$STAGED_PY_FILES" | xargs "$RUFF_PATH" check --fix --select F401,F841
    
    # Check if ruff made any changes
    if ! git diff --exit-code --quiet; then
        echo "üìù [$(date '+%Y-%m-%d %H:%M:%S')] Ruff cleaned up unused imports and variables in:"
        echo "$STAGED_PY_FILES" | sed 's/^/    /'
        # Automatically stage the changes made by ruff
        echo "$STAGED_PY_FILES" | xargs git add
        
        echo "‚úÖ [$(date '+%Y-%m-%d %H:%M:%S')] Changes staged successfully! Continuing with commit..."
    else
        echo "‚ú® [$(date '+%Y-%m-%d %H:%M:%S')] No unused imports or variables found in staged Python files."
    fi
else
    echo "‚ÑπÔ∏è  [$(date '+%Y-%m-%d %H:%M:%S')] No Python files staged for commit."
fi

echo "üéâ [$(date '+%Y-%m-%d %H:%M:%S')] Pre-commit hook completed successfully!"
exit 0 