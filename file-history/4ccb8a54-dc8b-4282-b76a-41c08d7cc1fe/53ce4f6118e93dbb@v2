# AI-Assisted Form Automation Discovery Tools - 2025 Guide

## Executive Summary

When faced with challenges like our current term riders table discovery issue, several AI-powered tools can help automate the discovery and interaction with complex forms. This guide covers the most relevant tools for your use case.

---

## 1. **Playwright MCP** ⭐ Recommended

### What It Is
Microsoft released Playwright MCP (Model Context Protocol) in March 2025. It's a server that bridges LLMs (like Claude) with Playwright for AI-powered browser automation.

### How It Helps with Our Issue
- **Accessibility Tree Analysis**: Uses semantic browser tree instead of just screenshots
- **Real-time Element Discovery**: Identifies elements based on role, label, and state
- **Dynamic Element Handling**: Can detect when elements become visible after interactions
- **AI-Powered Navigation**: Claude can understand form context and determine next steps

### Key Features
```
✅ Navigation and form filling
✅ Data extraction
✅ Handles dynamic/lazy-loaded forms
✅ No selector brittle issues (uses accessibility tree)
✅ Works with Claude Desktop, VS Code, Cursor
```

### How to Use with Our Riders Table Problem
Instead of waiting for `#coverageType-0` to appear, Playwright MCP could:
1. Ask Claude: "What form fields are available after selecting riders?"
2. Dynamically discover the correct selectors at runtime
3. Automatically adjust if elements render differently
4. Use natural language like "click the coverage type dropdown"

### Integration with Current Project
```bash
# Install Playwright MCP server
npm install @playwright/mcp

# Use in tests with Claude
# Claude can dynamically figure out the riders form structure
```

---

## 2. **Stagehand** - Open Source AI Web Agent SDK

### What It Is
Built on top of Playwright with three simple AI methods: `act()`, `extract()`, `observe()`. It injects AI capabilities into traditional automation.

### How It Helps
- **Plain English Instructions**: Write tests like "Fill in the riders form with these values"
- **Smart Element Discovery**: Automatically finds elements even if selectors change
- **Flexible Implementation**: Mix traditional Playwright code with AI-powered steps

### Key Features
```
✅ Open source (TypeScript)
✅ Built on Playwright foundation (familiar syntax)
✅ AI-powered action execution
✅ Better than full-agent solutions (more predictable)
✅ Available on GitHub
```

### Example Usage for Our Issue
```typescript
import { Stagehand } from "@browserbase/stagehand";

const stagehand = new Stagehand();
await stagehand.init();

// Instead of trying to find #coverageType-0, just tell it what to do
await stagehand.act("Select 'Single-life' from the coverage type dropdown in the riders table");
await stagehand.act("Fill in the coverage amount field with 100000");
await stagehand.act("Click the 'Add coverage' link to confirm");
```

---

## 3. **ZeroStep** - AI Runtime Decision Making

### What It Is
Eliminates the need for explicit selectors. AI determines actions at runtime based on plain-text instructions.

### How It Helps
- **Runtime Action Determination**: AI decides what element to interact with based on context
- **No Selector Management**: Works around our `#coverageType-0` discovery problem
- **GPT-4 Integration**: Uses advanced language models for context understanding
- **Production-Ready**: Recommended over open-source alternatives for production

### Key Features
```
✅ No brittle selectors
✅ Works with hidden/dynamic elements
✅ Handles form variations automatically
✅ Production-tested
⚠️  API costs (GPT-4)
```

### Comparison to Our Current Approach
**Current**: Hardcode selectors → Element not found → Debug
**ZeroStep**: Natural language → AI finds right element → Works

---

## 4. **Auto Playwright** - Open Source Alternative

### What It Is
Converts plain-language instructions into executable Playwright test scripts. Open-source exploration of ZeroStep's approach.

### How It Helps
- **AI-Generated Tests**: Write what you want, AI writes the code
- **Faster Test Development**: Reduces manual coding
- **Speedy Test Creation**: Great for rapid prototyping

### Limitations
```
⚠️  Slower than hand-written tests (AI overhead)
⚠️  Higher API costs
⚠️  Not recommended for high-frequency testing
✅  Good for test development and debugging
```

---

## 5. **Playwright Inspector** - Native Debugging Tool

### What It Is
Built-in Playwright debugging GUI for stepping through tests and discovering locators at runtime.

### How It Helps with Current Issue
```bash
# Run test in debug mode
PWDEBUG=1 pytest tests/reconnaissance/test_term_riders_focus.py

# Or with Node
npx playwright test --debug
```

### Features
```
✅ Step through tests line by line
✅ "Pick Locator" to hover and discover elements
✅ Actionability logs show why elements can't be found
✅ Live edit locators to test before committing
✅ Shows if element is visible, enabled, stable
✅ See scrolling and interaction history
```

### For Our Problem
Run the test with `PWDEBUG=1` to see:
- When "Term riders" appears
- Why `#coverageType-0` isn't found
- What's actually on the page when it fails
- DOM state and element properties

---

## 6. **Playwright Trace Viewer** - Post-Execution Analysis

### What It Is
Records test execution with snapshots, screenshots, network, DOM at each step.

### How It Helps
```python
# In conftest.py
with context.tracing.start(screenshots=True, snapshots=True, sources=True):
    yield page

# Run with --trace on
# pytest --trace on tests/reconnaissance/test_term_riders_focus.py

# Then view with:
# playwright show-trace trace.zip
```

### Investigation for Our Issue
- See exactly what the DOM contains when term riders is selected
- Compare with reconnaissance artifacts
- Identify if elements are hidden or in different location
- See network requests around riders selection

---

## 7. **Browser MCP** - Claude Integration

### What It Is
Claude-native MCP server for direct browser automation through Claude Desktop.

### How It Helps
- **Chat with Claude about Forms**: "How do I fill the riders form?"
- **Real-time Page Understanding**: Claude sees actual page state
- **Natural Debugging**: "Why can't I find the coverage dropdown?"

### Integration Path
```bash
# Add to Claude Desktop config
# Enables natural language form filling directly in Claude
```

---

## 8. **Accessibility Tree-Based Tools**

### Tools
- **Axe DevTools**: AI-powered accessibility analysis
- **Microsoft Accessibility Insights**: Computer vision + accessibility
- **Chrome DevTools**: Built-in element inspection

### How They Help
- Analyze form structure even when hidden
- Understand element relationships
- Find alternate selectors if primary fails
- Identify when elements are truly missing vs. just not visible

---

## Recommended Approach for Your Current Problem

### Immediate Debugging (30 minutes)
```bash
# Step 1: Use Playwright Inspector to understand what's happening
PWDEBUG=1 doppler run --project insurance --config prd -- \
  uv run --active pytest -v tests/reconnaissance/test_term_riders_focus.py -s

# Step 2: Use Pick Locator to hover over actual elements that appear
# Step 3: Check actionability logs to see if elements are hidden/disabled
# Step 4: Save findings to update selectors
```

### Medium-term Solution (1-2 hours)
```bash
# Option A: Try Stagehand for smarter element discovery
npm install @browserbase/stagehand
# Refactor fill_riders_table to use Stagehand's act() method

# Option B: Use Playwright Trace Viewer
pytest --trace on tests/reconnaissance/test_term_riders_focus.py
playwright show-trace trace.zip
# Analyze DOM snapshots to understand structure

# Option C: Use Playwright MCP
# Let Claude analyze actual page state and suggest fixes
```

### Long-term Architecture (1 day)
```
1. Integrate Playwright MCP for intelligent element discovery
2. Replace brittle selectors with accessibility tree navigation
3. Use Stagehand for AI-assisted form interactions
4. Maintain hybrid approach: Playwright + AI for complex cases
```

---

## Comparison Table

| Tool | Use Case | Cost | Complexity | Reliability |
|------|----------|------|-----------|------------|
| **Playwright Inspector** | Quick debugging | FREE | Low | Native |
| **Playwright MCP** | AI-powered automation | FREE | Medium | High |
| **Stagehand** | Smart form filling | FREE (OSS) | Medium | High |
| **ZeroStep** | Production automation | Paid | Low | Very High |
| **Auto Playwright** | Rapid prototyping | Paid | Low | Medium |
| **Browser MCP** | Claude integration | FREE | Medium | Medium |
| **Accessibility Tools** | Structure analysis | FREE-Paid | Low | High |

---

## Next Steps for Your Project

### Phase 1: Diagnose (Use Inspector)
1. Run test with `PWDEBUG=1` flag
2. Use "Pick Locator" when riders table appears
3. Document actual element structure
4. Compare with reconnaissance artifacts

### Phase 2: Adapt (Update Selectors)
1. If elements have different IDs, update selectors in page object
2. Add longer waits if elements render after delay
3. Add intermediate interactions if needed
4. Re-test with updated selectors

### Phase 3: Improve (AI Integration)
1. Try Stagehand for intelligent element discovery
2. Consider Playwright MCP for complex forms
3. Build hybrid approach for robustness

### Phase 4: Monitor
1. Add Playwright traces to capture state on failures
2. Use accessibility tree to validate form structure
3. Create regression tests for form variations

---

## Recommended Resources

- **Playwright Debugging**: https://playwright.dev/python/docs/debug
- **Stagehand GitHub**: https://github.com/browserbase/stagehand
- **Playwright MCP**: https://playbooks.com/mcp/playwright
- **Browser MCP**: https://browsermcp.io/
- **ZeroStep**: https://zerostep.com/

---

## Conclusion

For your current issue (riders table elements not appearing), **start with Playwright Inspector** ($0, immediate insight). If that doesn't reveal the problem, **move to Playwright Trace Viewer** to see DOM state. For production robustness, **consider Stagehand or Playwright MCP** to eliminate selector brittleness.

The key insight: **Move from brittle selectors to intelligent element discovery using accessibility tree + AI**.
