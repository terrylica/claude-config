"""Manulife Par form page object.

This page object encapsulates interactions with the Manulife Par insurance
application form, following the Page Object Model (POM) pattern.

Status: Minimal implementation - will be expanded during Phase 4 refactor

Reference: https://playwright.dev/python/docs/pom
"""

from pages.base_page import BasePage


class ManulifeParPage(BasePage):
    """Page object for Manulife Par insurance application form.

    This class will eventually contain methods for all form interactions,
    but currently serves as an example of the POM pattern during Phase 2.

    Attributes:
        page: Inherited from BasePage - Playwright Page instance
        welcome_url: Entry point URL for the form
    """

    def __init__(self, page):
        """Initialize Manulife Par page object.

        Args:
            page: Playwright Page object from fixture
        """
        super().__init__(page)
        self.welcome_url = "https://www.insurance.manulife.ca/dda/welcomeInformation"

    # Example method demonstrating POM pattern
    def select_riders(self, choice: str) -> None:
        """Select riders option using custom React component pattern.

        This method demonstrates the correct way to interact with custom
        React button components that require JavaScript event dispatch.

        Args:
            choice: "Yes" or "No"

        Raises:
            ValueError: If choice is not "Yes" or "No"

        Example:
            >>> manulife_page = ManulifeParPage(page)
            >>> manulife_page.select_riders("No")

        Technical Notes:
            Uses BasePage.dispatch_click_event() to handle custom React components.
            See: docs/analysis/custom-react-components-spike.md
        """
        if choice not in ["Yes", "No"]:
            raise ValueError(f"Invalid choice: {choice}. Must be 'Yes' or 'No'")

        # Map choice to element ID
        button_id = "RIDER_STATUS_ID-0" if choice == "Yes" else "RIDER_STATUS_ID-1"

        # Scroll into view first
        self.scroll_into_view(f"#{button_id}")

        # Use inherited dispatch_click_event for custom React component
        self.dispatch_click_event(f"#{button_id}")

    def fill_riders_table(self, coverage_type: str = "Single-life",
                          coverage_applies_to: str = "Insured person 1, A...",
                          coverage_option: str = "20 year",
                          coverage_amount: str = "100000") -> None:
        """Fill the Term riders table when "Yes" is selected for riders.

        This fills the first row of the Term riders table with specified values.

        Args:
            coverage_type: Type of coverage (e.g., "Single-life")
            coverage_applies_to: Who coverage applies to (e.g., "Insured person 1, A...")
            coverage_option: Coverage option (e.g., "20 year")
            coverage_amount: Coverage amount in dollars (e.g., "100000")

        Example:
            >>> page_obj.select_riders("Yes")
            >>> page_obj.fill_riders_table("Single-life", "Insured person 1, A...", "20 year", "100000")
        """
        try:
            # Wait for riders table to appear
            self.page.wait_for_selector("text=Term riders", timeout=5000)

            # Click on Coverage type dropdown
            coverage_type_dropdown = self.page.locator("text=Term riders").locator("..").locator("select").first
            coverage_type_dropdown.select_option(coverage_type)
            self.page.wait_for_timeout(300)

            # Click on Coverage applies to dropdown
            coverage_applies_dropdown = self.page.locator("text=Coverage applies to").locator("..").locator("select")
            coverage_applies_dropdown.select_option(coverage_applies_to)
            self.page.wait_for_timeout(300)

            # Click on Coverage option dropdown
            coverage_option_dropdown = self.page.locator("text=Coverage option").locator("..").locator("select")
            coverage_option_dropdown.select_option(coverage_option)
            self.page.wait_for_timeout(300)

            # Fill Coverage amount field
            coverage_amount_input = self.page.locator("text=Coverage amount").locator("..").locator("input")
            coverage_amount_input.fill(coverage_amount)
            self.page.wait_for_timeout(300)

            # Fill Other coverage amount field (if visible)
            try:
                other_amount_input = self.page.locator("text=Other coverage amount").locator("..").locator("input").first
                if other_amount_input.is_visible(timeout=2000):
                    other_amount_input.fill(coverage_amount)
                    self.page.wait_for_timeout(300)
            except:
                pass  # Other coverage amount is optional

            # Click Action button to confirm the rider entry
            try:
                action_button = self.page.get_by_role("button", name="Action").first
                if action_button.is_visible(timeout=2000):
                    self.scroll_into_view_if_needed(action_button)
                    action_button.click()
                    self.page.wait_for_timeout(500)
            except:
                pass  # Action button may not be visible yet

        except Exception as e:
            # Riders table may not be available in some forms
            print(f"Warning: Could not fill riders table: {e}")

    def confirm_term_rider(self) -> None:
        """Confirm/add term rider after filling the riders table.

        Clicks the "Add term writer" or similar button to confirm the rider selection
        and enable the option to add additional riders.

        Example:
            >>> page_obj.select_riders("Yes")
            >>> page_obj.fill_riders_table()
            >>> page_obj.confirm_term_rider()
        """
        # Find and click the "Add term writer" or confirmation button
        # Common button text patterns for adding riders
        add_button = self.page.get_by_role("button", name="Add term writer").first
        if add_button.is_visible(timeout=2000):
            self.scroll_into_view_if_needed(add_button)
            add_button.click()
            self.page.wait_for_timeout(500)

    #
    # ===== INSURED PERSON DETAILS =====
    #

    def fill_insured_name(self, first_name: str, last_name: str, middle_initial: str = "") -> None:
        """Fill insured person's name fields.

        Args:
            first_name: First name (max 20 characters)
            last_name: Last name (max 25 characters)
            middle_initial: Optional middle initial (1 character)

        Example:
            >>> page_obj.fill_insured_name("Ada", "Lovelace", "")
        """
        self.page.get_by_label("First name").fill(first_name)
        if middle_initial:
            self.page.get_by_label("Middle initial (optional)").fill(middle_initial)
        self.page.get_by_label("Last name").fill(last_name)

    def select_sex(self, sex: str) -> None:
        """Select sex/gender option.

        Args:
            sex: Either "Male" or "Female"

        Raises:
            ValueError: If sex is not "Male" or "Female"

        Example:
            >>> page_obj.select_sex("Female")

        Note:
            Uses .first() because there may be multiple sex fields on the form
            (e.g., for joint/co-insured). This selects the primary insured's sex.
        """
        if sex not in ["Male", "Female"]:
            raise ValueError(f"Invalid sex: {sex}. Must be 'Male' or 'Female'")

        self.page.get_by_role("radio", name=sex).first.click()

    def fill_date_of_birth(self, day: str, month: str, year: str) -> None:
        """Fill date of birth fields.

        Args:
            day: Day as 2-digit string (e.g., "15")
            month: Month as full name (e.g., "January", "june")
                  Case-insensitive
            year: Year as 4-digit string (e.g., "1990")

        Example:
            >>> page_obj.fill_date_of_birth("10", "December", "1990")

        Note:
            Insurance age is auto-calculated after filling DOB
        """
        self.page.get_by_label("Day (dd)").fill(day)
        self.page.get_by_label("Month").select_option(month.lower())
        self.page.get_by_label("Year (yyyy)").fill(year)

        # Wait for insurance age to be calculated
        self.page.wait_for_timeout(500)

    def get_insurance_age(self) -> str:
        """Get the auto-calculated insurance age.

        Returns:
            Insurance age as string (e.g., "35")

        Example:
            >>> age = page_obj.get_insurance_age()
            >>> print(f"Insurance age: {age}")
        """
        return self.page.get_by_label("Insurance ageLearn more").input_value()

    def select_smoking_status(self, status: str) -> None:
        """Select illustrated smoking status.

        Args:
            status: Either "Smoker" or "Non-Smoker"

        Raises:
            ValueError: If status is not valid

        Example:
            >>> page_obj.select_smoking_status("Non-Smoker")
        """
        if status not in ["Smoker", "Non-Smoker"]:
            raise ValueError(f"Invalid smoking status: {status}")

        self.page.get_by_label("Illustrated smoking status").select_option(status)

    #
    # ===== COVERAGE DETAILS =====
    #

    def fill_coverage_details(
        self,
        coverage_type: str = "Single",
        premium_duration: str = "Pay for 10 years",
        amount: str = "100000",
        dividend_option: str = "Paid-up insurance"
    ) -> None:
        """Fill all coverage detail fields.

        Args:
            coverage_type: Coverage type (default: "Single")
            premium_duration: Premium payment duration
                            Options: "Pay for 10 years", "Pay for 20 years",
                                     "Pay to age 90", "Pay to age 100"
            amount: Insurance amount in dollars (e.g., "250000")
                   Will be auto-formatted with thousand separators
            dividend_option: Dividend option
                           Options: "Paid-up insurance", "Cash"

        Example:
            >>> page_obj.fill_coverage_details(
            ...     coverage_type="Single",
            ...     premium_duration="Pay for 10 years",
            ...     amount="250000",
            ...     dividend_option="Paid-up insurance"
            ... )
        """
        self.page.get_by_label("Coverage type").select_option(coverage_type)
        self.page.get_by_label("Premium Duration").select_option(premium_duration)
        self.page.get_by_label("Amount of insurance, dollar").fill(amount)
        self.page.get_by_label("Dividend option").select_option(dividend_option)

    #
    # ===== CUSTOM REACT RADIO BUTTONS (Require JS Dispatch) =====
    #

    def select_quebec_policy(self, choice: str) -> None:
        """Select whether policy will be issued in Quebec.

        CRITICAL: Uses custom React component requiring JS dispatch.

        Args:
            choice: "Yes" or "No"

        Raises:
            ValueError: If choice is not "Yes" or "No"

        Example:
            >>> page_obj.select_quebec_policy("No")
        """
        if choice not in ["Yes", "No"]:
            raise ValueError(f"Invalid choice: {choice}. Must be 'Yes' or 'No'")

        # Map choice to element ID
        button_id = "wel-pol-quebec-0" if choice == "Yes" else "wel-pol-quebec-1"

        self.scroll_into_view(f"#{button_id}")
        self.dispatch_click_event(f"#{button_id}")

    def select_additional_products(self, choice: str) -> None:
        """Select whether applying for additional products.

        CRITICAL: Uses custom React component requiring JS dispatch.

        Args:
            choice: "Yes" or "No"

        Raises:
            ValueError: If choice is not "Yes" or "No"

        Example:
            >>> page_obj.select_additional_products("No")
        """
        if choice not in ["Yes", "No"]:
            raise ValueError(f"Invalid choice: {choice}. Must be 'Yes' or 'No'")

        # Map choice to element ID
        button_id = "wel-multiple-prod-0" if choice == "Yes" else "wel-multiple-prod-1"

        self.scroll_into_view(f"#{button_id}")
        self.dispatch_click_event(f"#{button_id}")

    def select_additional_product_types(self, product_types: list[str]) -> None:
        """Select which additional product types to apply for.

        CRITICAL: Uses custom React checkboxes requiring click (not check).

        This method should only be called after selecting "Yes" for additional products.
        At least one product type must be selected to pass validation.

        Args:
            product_types: List of product types to select. Valid options:
                - "Critical Illness"
                - "Life"

        Raises:
            ValueError: If product_types is empty or contains invalid values

        Example:
            >>> page_obj.select_additional_products("Yes")
            >>> page_obj.select_additional_product_types(["Critical Illness"])
            >>> # Or select both:
            >>> page_obj.select_additional_product_types(["Critical Illness", "Life"])

        Note:
            These are custom React checkboxes (empty aria-label), accessed by ID.
            Must use .click() not .check() to trigger React onChange events.
        """
        valid_types = {
            "Critical Illness": "wel-prod-types-criticalIllness",
            "Life": "wel-prod-types-life"
        }

        if not product_types:
            raise ValueError("At least one product type must be selected")

        for product_type in product_types:
            if product_type not in valid_types:
                raise ValueError(f"Invalid product type: {product_type}. Must be one of {list(valid_types.keys())}")

        # Click each checkbox using ID (custom React components requiring JS dispatch)
        for product_type in product_types:
            checkbox_id = valid_types[product_type]

            # Use JavaScript dispatch to trigger React onChange (like other custom components)
            self.scroll_into_view(f"#{checkbox_id}")
            self.dispatch_click_event(f"#{checkbox_id}")
            self.page.wait_for_timeout(300)  # Allow React state update

    def select_medical_info_method(self, method: str = "On this electronic application") -> None:
        """Select how medical information will be provided.

        CRITICAL: Uses custom React component requiring JS dispatch.

        Args:
            method: Medical info method. Default: "On this electronic application"

        Example:
            >>> page_obj.select_medical_info_method("On this electronic application")
        """
        # Map choice to element ID
        # ID pattern: wel-electronic-app-0 for "On this electronic application"
        button_id = "wel-electronic-app-0"

        self.scroll_into_view(f"#{button_id}")
        self.dispatch_click_event(f"#{button_id}")

    #
    # ===== FORM ACTIONS =====
    #

    def click_validate_button(self) -> None:
        """Click 'Start a new application' button to trigger validation.

        IMPORTANT DISCOVERY (2025-10-17):
        This button is a CLIENT-SIDE VALIDATION button, NOT a navigation
        or submission button. It will:
        - Validate all form fields
        - Show/hide validation errors
        - Format data (e.g., add thousand separators to amounts)
        - NOT navigate to a new page
        - NOT submit to server

        Use check_for_validation_errors() after clicking to verify success.

        Example:
            >>> page_obj.click_validate_button()
            >>> errors = page_obj.check_for_validation_errors()
            >>> if not errors:
            ...     print("Validation passed!")

        Reference:
            docs/analysis/FINAL-CONCLUSION.md
        """
        button = self.page.get_by_role("button", name="Start a new application")
        button.scroll_into_view_if_needed()
        button.click()

        # Wait for validation to complete
        self.page.wait_for_timeout(1000)

    #
    # ===== HIGH-LEVEL HELPER METHODS =====
    #

    def fill_complete_form(
        self,
        first_name: str,
        last_name: str,
        sex: str,
        dob_day: str,
        dob_month: str,
        dob_year: str,
        smoking_status: str,
        coverage_type: str = "Single",
        premium_duration: str = "Pay for 10 years",
        amount: str = "100000",
        dividend_option: str = "Paid-up insurance",
        riders: str = "No",
        quebec: str = "No",
        additional_products: str = "No",
        additional_product_types: list[str] = None,
        middle_initial: str = ""
    ) -> None:
        """Fill the entire coverage form with all required fields.

        This is a convenience method that calls all individual field methods
        in the correct order.

        Args:
            first_name: Insured person's first name
            last_name: Insured person's last name
            sex: "Male" or "Female"
            dob_day: Day of birth (e.g., "15")
            dob_month: Month of birth (e.g., "June")
            dob_year: Year of birth (e.g., "1990")
            smoking_status: "Smoker" or "Non-Smoker"
            coverage_type: Coverage type (default: "Single")
            premium_duration: Premium payment duration
            amount: Insurance amount in dollars
            dividend_option: Dividend option
            riders: Add riders? "Yes" or "No" (default: "No")
            quebec: Quebec policy? "Yes" or "No" (default: "No")
            additional_products: Additional products? "Yes" or "No" (default: "No")
            additional_product_types: List of product types if additional_products="Yes".
                Valid values: ["Critical Illness"], ["Life"], or ["Critical Illness", "Life"]
                If None and additional_products="Yes", defaults to ["Critical Illness"]
            middle_initial: Optional middle initial

        Example:
            >>> page_obj.fill_complete_form(
            ...     first_name="Ada",
            ...     last_name="Lovelace",
            ...     sex="Female",
            ...     dob_day="10",
            ...     dob_month="December",
            ...     dob_year="1990",
            ...     smoking_status="Non-Smoker",
            ...     amount="250000"
            ... )

        Note:
            This method does NOT click the validation button.
            Call click_validate_button() separately if needed.
        """
        # Insured person details
        self.fill_insured_name(first_name, last_name, middle_initial)
        self.select_sex(sex)
        self.fill_date_of_birth(dob_day, dob_month, dob_year)
        self.select_smoking_status(smoking_status)

        # Coverage details
        self.fill_coverage_details(coverage_type, premium_duration, amount, dividend_option)

        # Custom React radio buttons
        self.select_riders(riders)

        # If riders selected, fill and confirm term rider
        if riders == "Yes":
            # Wait for riders table to appear
            self.page.wait_for_timeout(500)
            # Fill the first term rider with default values
            self.fill_riders_table()
            # Confirm/add the term rider
            self.confirm_term_rider()

        self.select_quebec_policy(quebec)
        self.select_additional_products(additional_products)

        # If additional products selected, specify which types
        if additional_products == "Yes":
            # Default to both Critical Illness AND Life if not specified
            product_types = additional_product_types or ["Critical Illness", "Life"]
            self.select_additional_product_types(product_types)

        # Select medical information method: "On this electronic application"
        self.select_medical_info_method("On this electronic application")
