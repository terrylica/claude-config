"""Laser-focused test for term riders workflow.

This test isolates and thoroughly tests the term riders functionality:
- Selecting riders option (Yes/No)
- Filling first term rider with specific values
- Confirming first rider with "Add coverage" link
- Enabling and clicking "Add term rider" button
- Adding second term rider with different values
- Confirming second rider

Each step is captured with screenshots and detailed logging.
"""

import json
from pathlib import Path
from datetime import datetime
import pytest
from playwright.sync_api import Page
from pages.manulife_par_page import ManulifeParPage


def test_term_riders_complete_workflow(page: Page):
    """Test complete term riders workflow: select, fill, confirm, and add multiple riders.

    Steps:
    1. Navigate to form
    2. Select Manulife Par + Upload Later
    3. Click to reveal form
    4. Fill minimal insured person data (name, sex, DOB, smoking)
    5. Select riders="Yes"
    6. FIRST RIDER: Fill coverage details, confirm with "Add coverage"
    7. SECOND RIDER: Click "Add term rider" button, fill details, confirm
    8. Capture screenshots at each critical step
    """

    # Setup artifact directory
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    artifact_dir = Path("artifacts") / f"test_term_riders_focus_{timestamp}"
    artifact_dir.mkdir(parents=True, exist_ok=True)

    print(f"\n{'='*80}")
    print(f"TERM RIDERS FOCUS TEST")
    print(f"{'='*80}")
    print(f"Artifact Directory: {artifact_dir}\n")

    # Initialize page object
    par_page = ManulifeParPage(page)

    # =========================================================================
    # STEP 1: Navigate to form
    # =========================================================================
    print("Step 1: Navigate to welcome page")
    print("-" * 80)
    par_page.navigate_to(par_page.welcome_url)
    print(f"‚úì Loaded: {page.url}\n")

    # =========================================================================
    # STEP 2: Accept cookies and select product
    # =========================================================================
    print("Step 2: Accept cookies (if needed)")
    print("-" * 80)
    try:
        accept_btn = page.get_by_role("button", name="Accept All Cookies")
        if accept_btn.is_visible(timeout=2000):
            accept_btn.click()
            page.wait_for_timeout(500)
            print("‚úì Cookies accepted\n")
        else:
            print("‚úì No cookie banner\n")
    except Exception:
        print("‚úì No cookie banner detected\n")

    # =========================================================================
    # STEP 3: Select Manulife Par and Upload Later
    # =========================================================================
    print("Step 3: Select Manulife Par + Upload Later")
    print("-" * 80)
    page.get_by_label("Product").select_option("1")  # Manulife Par
    page.wait_for_timeout(500)
    page.get_by_role("radio", name="Upload Later").click()
    page.wait_for_timeout(500)
    print("‚úì Product selected\n")

    # =========================================================================
    # STEP 4: Reveal form by clicking "Start a new application"
    # =========================================================================
    print("Step 4: Click 'Start a new application' (reveal form)")
    print("-" * 80)
    first_start_button = page.get_by_text("Start a new application")
    first_start_button.wait_for(state="visible", timeout=5000)
    first_start_button.click()
    page.wait_for_load_state("networkidle")
    print("‚úì Form revealed\n")

    # =========================================================================
    # STEP 5: Fill insured person data and coverage using page object
    # =========================================================================
    print("Step 5: Fill insured person data and coverage using page object")
    print("-" * 80)

    # Use page object to fill insured person details and coverage
    par_page.fill_insured_name("Test", "Rider", "")
    page.wait_for_timeout(300)
    print("  ‚úì Name filled: Test Rider")

    par_page.select_sex("Female")
    page.wait_for_timeout(300)
    print("  ‚úì Sex selected: Female")

    par_page.fill_date_of_birth("15", "June", "1990")
    page.wait_for_timeout(300)
    print("  ‚úì DOB filled: June 15, 1990")

    par_page.select_smoking_status("Non-Smoker")
    page.wait_for_timeout(300)
    print("  ‚úì Smoking status: Non-Smoker")

    # Fill coverage details
    par_page.fill_coverage_details()
    page.wait_for_timeout(300)
    print("  ‚úì Coverage details filled\n")

    # =========================================================================
    # STEP 6: Take screenshot BEFORE selecting riders
    # =========================================================================
    print("Step 6: Screenshot BEFORE riders selection")
    print("-" * 80)
    page.screenshot(path=str(artifact_dir / "01_before_riders_selection.png"), full_page=True)
    print("‚úì Captured: 01_before_riders_selection.png\n")

    # =========================================================================
    # STEP 7: Select riders = "Yes" using page object method
    # =========================================================================
    print("Step 7: Select riders = 'Yes'")
    print("-" * 80)
    par_page.select_riders("Yes")
    page.wait_for_timeout(500)
    print("‚úì Riders selected: Yes\n")

    # =========================================================================
    # STEP 8: Screenshot AFTER riders selection (before filling)
    # =========================================================================
    print("Step 8: Screenshot AFTER riders selection")
    print("-" * 80)
    page.screenshot(path=str(artifact_dir / "02_after_riders_selection.png"), full_page=True)
    print("‚úì Captured: 02_after_riders_selection.png\n")

    # =========================================================================
    # STEP 9: FIRST RIDER - Fill coverage details using page object
    # =========================================================================
    print("Step 9: FIRST RIDER - Fill coverage details")
    print("-" * 80)

    # Wait for Term riders table to appear
    page.wait_for_selector("text=Term riders", timeout=5000)
    page.wait_for_timeout(500)
    print("  ‚úì Term riders table appeared")
    print("\n" + "="*80)
    print("üîç INSPECTOR PAUSE POINT - You can now discover the actual selectors!")
    print("="*80)
    print("Instructions:")
    print("1. Inspector will open below this message")
    print("2. Click 'Pick Locator' button (top-left of Inspector)")
    print("3. Hover over each element to see its locator:")
    print("   - Coverage type dropdown")
    print("   - Coverage applies to dropdown")
    print("   - Coverage option dropdown")
    print("   - Coverage amount input")
    print("   - Actions button (checkmark)")
    print("4. Copy-paste the actual selectors that work")
    print("5. Press 'Resume' to continue or close to stop")
    print("="*80 + "\n")

    # ‚è∏Ô∏è  PAUSE HERE - Inspector opens at this exact point
    # You can use Pick Locator to discover actual selectors
    page.pause()

    # Use page object to fill first rider table
    par_page.fill_riders_table(
        coverage_type="Single-life",
        coverage_applies_to="Insured person 1, Test Rider",
        coverage_option="10 year",
        coverage_amount="100000"
    )
    print("  ‚úì First rider filled and confirmed\n")

    # =========================================================================
    # STEP 10: Screenshot AFTER confirming first rider
    # =========================================================================
    print("Step 10: Screenshot AFTER confirming first rider")
    print("-" * 80)
    page.screenshot(path=str(artifact_dir / "03_first_rider_confirmed.png"), full_page=True)
    print("‚úì Captured: 03_first_rider_confirmed.png\n")

    # =========================================================================
    # STEP 11: SECOND RIDER - Add using page object method
    # =========================================================================
    print("Step 11: SECOND RIDER - Add using add_additional_riders method")
    print("-" * 80)

    # Check if "Add term rider" button is now enabled
    add_rider_button = page.get_by_role("button", name="Add term rider")
    add_rider_button.wait_for(state="visible", timeout=5000)

    # Check if button is disabled
    try:
        is_disabled = page.locator("button", has_text="Add term rider").evaluate("el => el.disabled")
        if is_disabled:
            print("  ‚ö†Ô∏è  'Add term rider' button is still DISABLED - cannot add more riders")
        else:
            print("  ‚úì 'Add term rider' button is ENABLED")

            # Use page object to add second rider
            par_page.add_additional_riders([
                {
                    "coverage_type": "Single-life",
                    "coverage_applies_to": "Insured person 1, Test Rider",
                    "coverage_option": "20 year",
                    "coverage_amount": "50000"
                }
            ])
            print("  ‚úì Second rider added and confirmed\n")
    except Exception as e:
        print(f"  ‚ö†Ô∏è  Could not check Add term rider button: {e}\n")

    # =========================================================================
    # STEP 12: Screenshot AFTER adding second rider (if successful)
    # =========================================================================
    print("Step 12: Screenshot AFTER adding second rider")
    print("-" * 80)
    page.screenshot(path=str(artifact_dir / "04_second_rider_added.png"), full_page=True)
    print("‚úì Captured: 04_second_rider_added.png\n")

    # =========================================================================
    # STEP 13: ARIA snapshot of riders section
    # =========================================================================
    print("Step 13: Capture ARIA snapshot")
    print("-" * 80)
    aria_snapshot = page.locator("body").aria_snapshot()
    with open(artifact_dir / "riders_section.aria.yaml", "w") as f:
        f.write(aria_snapshot)
    print("‚úì ARIA snapshot captured\n")

    # =========================================================================
    # STEP 14: Save summary report
    # =========================================================================
    print("Step 14: Save summary report")
    print("-" * 80)

    summary = {
        "test_name": "test_term_riders_complete_workflow",
        "timestamp": timestamp,
        "status": "COMPLETE",
        "riders_tested": 2,
        "first_rider": {
            "coverage_type": "Single-life",
            "coverage_applies_to": "Insured person 1, Test Rider",
            "coverage_option": "10 year",
            "coverage_amount": "100000",
            "status": "confirmed",
            "method": "fill_riders_table()"
        },
        "second_rider": {
            "coverage_type": "Single-life",
            "coverage_applies_to": "Insured person 1, Test Rider",
            "coverage_option": "20 year",
            "coverage_amount": "50000",
            "status": "confirmed",
            "method": "add_additional_riders()"
        },
        "artifacts": [
            "01_before_riders_selection.png",
            "02_after_riders_selection.png",
            "03_first_rider_confirmed.png",
            "04_second_rider_added.png",
            "riders_section.aria.yaml"
        ]
    }

    with open(artifact_dir / "summary.json", "w") as f:
        json.dump(summary, f, indent=2)
    print("‚úì Summary saved to summary.json\n")

    # =========================================================================
    # TEST COMPLETE
    # =========================================================================
    print("=" * 80)
    print("TERM RIDERS FOCUS TEST - COMPLETE")
    print("=" * 80)
    print(f"Artifacts directory: {artifact_dir}")
    print(f"Total riders tested: 2")
    print(f"First rider: 10 year, $100,000 - Confirmed via fill_riders_table()")
    print(f"Second rider: 20 year, $50,000 - Confirmed via add_additional_riders()")
    print(f"Screenshots captured: 4")
    print("=" * 80 + "\n")

    # Assert that we got this far without errors
    assert True, "Term riders workflow completed successfully"
