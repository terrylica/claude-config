"""
Reconnaissance Test: Validation Feedback Loop

Purpose: Click "Start a new application" repeatedly to discover all required fields
         through validation error feedback.

Strategy:
1. Fill form with minimal data
2. Click "Start a new application"
3. Capture validation errors (red text)
4. Fix errors
5. Repeat until navigation succeeds

Goal: Use validation errors to discover what's required to reach next page
"""

import pytest
from playwright.sync_api import Page
from pathlib import Path
from pages.manulife_par_page import ManulifeParPage


@pytest.mark.reconnaissance
def test_validation_feedback_to_next_page(page: Page, artifact_manager):
    """
    Use validation errors as feedback to discover required fields.

    Each iteration:
    - Click "Start a new application" button
    - Capture validation errors
    - Fix errors
    - Repeat
    """

    print("\n" + "=" * 70)
    print("VALIDATION FEEDBACK LOOP - Discovering Required Fields")
    print("=" * 70)

    # Initialize page object
    manulife_page = ManulifeParPage(page)

    # Navigate to welcome page (using storage state for auth)
    print("\nStep 1: Navigate to welcome page...")
    manulife_page.navigate_to(manulife_page.welcome_url)
    artifact_manager.capture_screenshot(page, "001_welcome_page")
    print(f"‚úì Welcome page loaded: {page.url}")

    # Accept cookies if present
    print("\nStep 2: Accept cookies...")
    try:
        accept_button = page.get_by_role("button", name="Accept all cookies")
        if accept_button.is_visible(timeout=2000):
            accept_button.click()
            page.wait_for_timeout(500)
            print("‚úì Cookies accepted")
    except:
        print("‚ÑπÔ∏è  No cookie banner")

    # Select Manulife Par product
    print("\nStep 3: Select Manulife Par product...")
    product_dropdown = page.get_by_label("Product")
    product_dropdown.select_option("1")  # Manulife Par
    page.wait_for_timeout(500)
    artifact_manager.capture_screenshot(page, "002_product_selected")
    print("‚úì Manulife Par selected")

    # Step 4: Select illustration upload option (REQUIRED to reveal form)
    print("\nStep 4: Select illustration upload option...")
    upload_later = page.get_by_role("radio", name="Upload Later")
    upload_later.click()
    page.wait_for_timeout(500)
    artifact_manager.capture_screenshot(page, "003_illustration_selected")
    print("‚úì Upload Later selected")

    # Step 5: Click "Start a new application" to reveal form fields
    print("\nStep 5: Click 'Start a new application' to reveal form...")
    start_button = page.get_by_role("button", name="Start a new application")
    start_button.click()
    page.wait_for_timeout(1000)
    artifact_manager.capture_screenshot(page, "004_form_revealed")
    print("‚úì Form should now be revealed")

    # Step 6: Fill ALL known fields on welcome page (from Phase 6 exploration)
    print("\nStep 6: Fill all known fields on welcome page...")

    # Fill insured person details
    manulife_page.fill_insured_name("Ada", "Lovelace")
    manulife_page.select_sex("Female")
    manulife_page.fill_date_of_birth("10", "December", "1990")
    manulife_page.select_smoking_status("Non-Smoker")

    # Fill coverage details
    manulife_page.fill_coverage_details(
        coverage_type="Single",
        premium_duration="Pay for 10 years",
        amount="250000",
        dividend_option="Paid-up insurance"
    )

    # Fill custom React button fields
    manulife_page.select_riders("No")
    manulife_page.select_quebec_policy("No")
    manulife_page.select_additional_products("No")
    manulife_page.select_medical_info_method("On this electronic application")

    print("‚úì Form filled with all known fields")
    artifact_manager.capture_screenshot(page, "007_form_filled")

    # ITERATION 1: Click "Start a new application" to validate and navigate
    print("\n" + "=" * 70)
    print("ITERATION 1: Click 'Start a new application' to validate")
    print("=" * 70)

    # Capture URL before validation attempt
    url_before = page.url
    print(f"URL before validation: {url_before}")

    # Click validation button (second click - this time to validate and navigate)
    validate_button = page.get_by_role("button", name="Start a new application")
    validate_button.scroll_into_view_if_needed()
    validate_button.click()
    page.wait_for_timeout(1000)
    artifact_manager.capture_screenshot(page, "008_after_validation_click")

    # Check for validation errors
    print("\nChecking for validation errors...")
    errors = manulife_page.check_for_validation_errors()

    if not errors:
        print("‚úÖ NO VALIDATION ERRORS!")

        # Check if URL changed (navigation occurred)
        url_after_validation = page.url
        print(f"\n  URL before: {url_before}")
        print(f"  URL after:  {url_after_validation}")
        print(f"  Navigation: {url_before != url_after_validation}")

        if url_before != url_after_validation:
            print("\nüéâ SUCCESS: Navigated to next page!")
            artifact_manager.capture_screenshot(page, "009_next_page")
            artifact_manager.capture_aria_tree(page, "009_next_page_aria")
        else:
            print("\n‚ö†Ô∏è  No navigation - button might not trigger navigation")
            print("     Need to find actual navigation mechanism")
    else:
        print(f"‚ùå VALIDATION ERRORS ({len(errors)}):")
        for i, error in enumerate(errors, 1):
            print(f"   {i}. {error}")

        # Analyze error messages to understand what's needed
        print("\nError Analysis:")

        for error in errors:
            error_lower = error.lower()

            if "illustration" in error_lower:
                print(f"\n  üìã Illustration Error: {error}")
                print("     Possible fixes:")
                print("       - Select 'Upload Now' instead of 'Upload Later'")
                print("       - Upload a PDF file")
                print("       - Find way to bypass illustration requirement")

            elif "required" in error_lower:
                print(f"\n  ‚ö†Ô∏è  Required Field Error: {error}")
                print("     Need to identify which field and fill it")

            else:
                print(f"\n  ‚ùì Unknown Error: {error}")

    # Save error state
    with open(artifact_manager.session_dir / "validation_errors.txt", "w") as f:
        f.write(f"Iteration 1 - After form fill\n")
        f.write(f"URL: {page.url}\n")
        f.write(f"Errors: {len(errors)}\n\n")
        for i, error in enumerate(errors, 1):
            f.write(f"{i}. {error}\n")

    print("\n" + "=" * 70)
    print("NEXT STEPS based on validation errors:")
    print("=" * 70)

    if "illustration" in str(errors).lower():
        print("1. Try selecting 'Upload Now' instead of 'Upload Later'")
        print("2. Investigate if file upload is required")
        print("3. Check if there's a way to proceed without illustration")

    if "required" in str(errors).lower():
        print("1. Examine screenshot to find unfilled red-marked fields")
        print("2. Check ARIA tree for fields with aria-invalid='true'")
        print("3. Add missing fields to form fill logic")

    print("\n‚úì Validation feedback loop test complete")
    print(f"   Artifacts: {artifact_manager.session_dir}")
    print("   Review screenshots to understand error context")
