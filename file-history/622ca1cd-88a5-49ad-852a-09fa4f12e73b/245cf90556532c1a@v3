# Headless MQL5 Script Execution - Solution A Implementation Plan

**Version**: 1.2.0
**Date**: 2025-10-17
**Status**: üî¥ BLOCKED ([Inputs] parameter passing issue)
**Approach**: Dummy Chart + Programmatic Symbol Loading

---

## Overview

### Problem Statement

MT5 `startup.ini` with `[StartUp]` section fails for cold-start symbols (symbols never opened in GUI). Script execution requires existing chart context. No command-line flags exist to force chart creation.

**Reference**: External research PDF (2025-10-17) - 44 sources confirming limitation

### Solution A: Hybrid Approach

Combine one-time GUI setup (dummy chart) with programmatic symbol loading via MQL5 functions (`SymbolSelect()`, `CopyRates()`). Script becomes symbol-agnostic - loads target symbol at runtime regardless of dummy chart's symbol.

**Key Insight**: Chart context requirement is for script *launch*, not for symbol *access*. Once script runs, it can load any symbol programmatically.

### Architecture Decision

**Chosen**: Solution A (over Xvfb virtual display)
**Rationale**:
- Lower complexity (no containers/virtualization)
- Uses existing CrossOver setup
- Community-proven pattern (MQL5 moderators endorse)
- Maintainable (survives MT5 updates)

**Trade-off Accepted**: One-time GUI interaction for dummy chart setup

---

## Service Level Objectives

| Metric | Target | Measurement Method |
|--------|--------|-------------------|
| **Availability** | 100% | Script executes for any symbol without prior GUI setup |
| **Correctness** | ‚â• 0.999 correlation | Python validation vs MQL5 export (SMA test case) |
| **Observability** | 100% | MT5 logs confirm symbol loading, iCustom success, CSV creation |
| **Maintainability** | ‚â• 90% | Single dummy chart survives MT5 updates, no profile accumulation |

**Excluded**: Performance/speed (startup time acceptable), security (out of scope)

---

## Implementation Phases

### Phase 0: Research Validation ‚úÖ COMPLETE

**Objective**: Confirm Solution A viability via external research

**Actions**:
1. ‚úÖ External AI research via comprehensive prompt
2. ‚úÖ PDF report received (10 pages, 44 references)
3. ‚úÖ Confirmed: No undocumented command-line flags
4. ‚úÖ Confirmed: `SymbolSelect()` + history wait pattern used by community

**Outcome**: Solution A documented with step-by-step guidance from MQL5 moderators

**Evidence**: `/Users/terryli/Downloads/MetaTrader 5 Headless MQL5 Script Execution.pdf`

---

### Phase 1: Modify ExportAligned.mq5 ‚úÖ COMPLETE

**Objective**: Make script symbol-agnostic via programmatic symbol loading

**Original Assumption**: Script uses `ChartSymbol()` and `ChartPeriod()` - needs major refactoring

**Discovery**: ExportAligned.mq5 already implements most of Solution A pattern
- ‚úÖ Has `InpSymbol` and `InpTimeframe` inputs (lines 9-10)
- ‚úÖ Has `SymbolSelect(symbol, true)` call (line 33)
- ‚úÖ All downstream calls use `symbol` and `InpTimeframe` variables
- ‚ùå Missing: History wait loop (added in Phase 1.2)

**Outcome**: Only 1 code change needed (history wait loop), not 4 as originally planned

#### Step 1.1: Add Input Parameters ‚úÖ ALREADY EXISTS

**File**: `MQL5/Scripts/DataExport/ExportAligned.mq5`

**Planned Changes**:
```mql5
// Add BEFORE existing inputs
input string          InpTargetSymbol       = "EURUSD";
input ENUM_TIMEFRAMES InpTargetPeriod       = PERIOD_M1;
```

**Actual State** (ExportAligned.mq5:9-10):
```mql5
input string          InpSymbol             = "EURUSD";
input ENUM_TIMEFRAMES InpTimeframe          = PERIOD_M1;
```

**Result**: NO CHANGES NEEDED - Script already has runtime symbol/timeframe inputs

#### Step 1.2: Add Symbol Loading Logic ‚úÖ PARTIALLY COMPLETE

**Location**: `OnStart()` function, BEFORE `LoadRates()` call

**Existing Code** (ExportAligned.mq5:33-37):
```mql5
if(!SymbolSelect(symbol,true))
  {
   PrintFormat("SymbolSelect failed for %s (error %d)",symbol,GetLastError());
   return;
  }
```

**Missing Code**: History wait loop (ADDED at lines 39-56):
```mql5
// Wait for history download (Solution A pattern - max 5 seconds)
datetime from=TimeCurrent()-PeriodSeconds(InpTimeframe)*1000;

for(int i=0; i<50 && CopyTime(symbol,InpTimeframe,0,1,NULL)<1; i++)
  {
   Sleep(100);
   if(i%10==0)
      PrintFormat("Waiting for %s %s history... (%d/50)",symbol,EnumToString(InpTimeframe),i);
  }

// Verify history available
if(CopyTime(symbol,InpTimeframe,0,1,NULL)<1)
  {
   PrintFormat("History timeout for %s %s",symbol,EnumToString(InpTimeframe));
   return;
  }

PrintFormat("Symbol loaded: %s %s",symbol,EnumToString(InpTimeframe));
```

**Result**: SymbolSelect already implemented, history wait loop added (matches external research pattern)

#### Step 1.3: Update LoadRates Call ‚úÖ ALREADY CORRECT

**Actual Code** (ExportAligned.mq5:59):
```mql5
string symbol = InpSymbol;  // Line 25
if(!LoadRates(symbol, InpTimeframe, InpBars, series))
```

**Analysis**:
- Uses `symbol` variable (derived from `InpSymbol` input)
- Uses `InpTimeframe` input directly
- Pattern already matches Solution A requirements

**Result**: NO CHANGES NEEDED

#### Step 1.4: Update Module Calls ‚úÖ ALREADY CORRECT

**Actual Code**:
- **RSI** (ExportAligned.mq5:77):
  ```mql5
  if(!RSIModule_Load(symbol,InpTimeframe,series.count,InpRSIPeriod,rsiColumn,rsiError))
  ```
- **SMA** (ExportAligned.mq5:91):
  ```mql5
  if(!SMAModule_Load(symbol,InpTimeframe,series.count,InpSMAPeriod,smaColumn,smaError))
  ```
- **Laguerre RSI** (ExportAligned.mq5:105):
  ```mql5
  if(!LaguerreRSIModule_Load(symbol,InpTimeframe,series.count,...))
  ```

**Analysis**: All module calls already use `symbol` and `InpTimeframe` variables

**Result**: NO CHANGES NEEDED - Correctness already ensured

---

### Phase 2: One-Time Dummy Chart Setup ‚è≥ PENDING

**Objective**: Create persistent chart context for script launch

**Manual Steps** (GUI required once):

1. **Launch MT5 GUI**:
   ```bash
   open ~/Applications/CrossOver.app
   # Navigate to MetaTrader 5 bottle, launch terminal64.exe
   ```

2. **Create Dummy Chart**:
   - File ‚Üí New Chart ‚Üí EURUSD
   - Set timeframe: M1 (or any - script ignores it)
   - No indicators/EAs needed (blank chart acceptable)

3. **Save Profile**:
   - Tools ‚Üí Options ‚Üí Server tab
   - ‚úÖ Enable "Save personal settings and data on exit"
   - File ‚Üí Profiles ‚Üí Save Profile As ‚Üí "Default" (if not already)

4. **Verify Profile Persistence**:
   - Close MT5
   - Relaunch MT5
   - Confirm EURUSD M1 chart reopens automatically

5. **Document Configuration**:
   - Record profile name (likely "Default")
   - Check `config/common.ini` for `ProfileLast=Default`

**Expected Files** (after setup):
```
$BOTTLE/drive_c/Program Files/MetaTrader 5/
‚îú‚îÄ‚îÄ config/
‚îÇ   ‚îî‚îÄ‚îÄ common.ini          # Contains ProfileLast=Default
‚îî‚îÄ‚îÄ profiles/
    ‚îî‚îÄ‚îÄ charts/
        ‚îî‚îÄ‚îÄ Default/
            ‚îî‚îÄ‚îÄ chart01.chr  # Dummy chart state
```

**SLO Impact**: Availability (one-time setup enables 100% cold-start capability)

**Observability**: Verify chart persistence across MT5 restarts before proceeding

---

### Phase 3: Update startup.ini Configuration ‚è≥ PENDING

**Objective**: Configure script launch without symbol specification

**Current startup.ini** (from Iteration 2 - FAILED):
```ini
[StartUp]
Script=Scripts\\DataExport\\ExportAligned
Symbol=EURUSD
Period=PERIOD_M1
ShutdownTerminal=1
```

**Target startup.ini** (Solution A):
```ini
[Experts]
Enabled=1
AllowLiveTrading=0
AllowDllImport=0

[StartUp]
Script=Scripts\\DataExport\\ExportAligned
# NO Symbol= or Period= parameters
# Script uses InpSymbol input instead (loaded via [Inputs] section)
ShutdownTerminal=1

[Inputs]
InpSymbol=XAUUSD
InpTimeframe=1
InpBars=5000
InpUseRSI=false
InpUseSMA=true
InpSMAPeriod=14
InpUseLaguerreRSI=false
InpOutputName=Export_XAUUSD_M1_SMA.csv
```

**Critical Changes**:
1. **Removed** `Symbol=` and `Period=` ‚Üí Script launches on dummy chart (EURUSD M1)
2. **Added** `[Inputs]` section ‚Üí Pass `InpSymbol=XAUUSD` to script (overrides default)
3. **Added** `[Experts]` section ‚Üí Standard MT5 configuration
4. **Script path**: Use `Scripts\\DataExport\\ExportAligned` (MT5 resolves to .ex5)

**Reference**: External research page 4-5, MQL5 official documentation

**Alternative Approach** (if [Inputs] doesn't work):
Use preset file: `MQL5/Presets/export_params.set`
```
InpTargetSymbol=XAUUSD
InpTargetPeriod=1
InpBars=5000
InpUseSMA=true
```
Then in startup.ini: `ScriptParameters=export_params.set`

**SLO Impact**: Observability (clear configuration, no hidden state)

---

### Phase 4: Recompile and Test ‚è≥ PENDING

**Objective**: Validate Solution A implementation with cold-start symbol

#### Step 4.1: Recompile ExportAligned.mq5

**Command**:
```bash
BOTTLE="$HOME/Library/Application Support/CrossOver/Bottles/MetaTrader 5"

# Copy to simple path
cp "$BOTTLE/drive_c/Program Files/MetaTrader 5/MQL5/Scripts/DataExport/ExportAligned.mq5" \
   "$BOTTLE/drive_c/ExportAligned.mq5"

# Compile (NO /inc flag)
/Users/terryli/Applications/CrossOver.app/Contents/SharedSupport/CrossOver/bin/wine \
  --bottle "MetaTrader 5" \
  --cx-app "C:/Program Files/MetaTrader 5/MetaEditor64.exe" \
  /log /compile:"C:/ExportAligned.mq5"
```

**Verification**:
```bash
# Check compilation log
python3 << 'EOF'
from pathlib import Path
log = Path.home() / "Library/Application Support/CrossOver/Bottles/MetaTrader 5/drive_c/Program Files/MetaTrader 5/logs/metaeditor.log"
lines = log.read_text(encoding='utf-16-le').strip().split('\n')
print(lines[-1])  # Should show "0 errors"
EOF

# Verify .ex5 created
ls -lh "$BOTTLE/drive_c/ExportAligned.ex5"

# Copy back
cp "$BOTTLE/drive_c/ExportAligned.ex5" \
   "$BOTTLE/drive_c/Program Files/MetaTrader 5/MQL5/Scripts/DataExport/ExportAligned.ex5"
```

**SLO**: Compilation must succeed with 0 errors (propagate if fails)

#### Step 4.2: Create Test Configuration

**File**: `$BOTTLE/drive_c/Program Files/MetaTrader 5/config/startup_sma_test.ini`

**Content**:
```ini
[Experts]
Enabled=1
AllowLiveTrading=0
AllowDllImport=0

[StartUp]
Script=Scripts\\DataExport\\ExportAligned
ShutdownTerminal=1

[Inputs]
InpSymbol=EURUSD
InpTimeframe=1
InpBars=100
InpUseRSI=false
InpUseSMA=true
InpSMAPeriod=14
InpUseLaguerreRSI=false
InpOutputName=Export_EURUSD_M1_SMA.csv
```

**Note**: Start with EURUSD (dummy chart symbol) for baseline test, then XAUUSD for cold-start test

#### Step 4.3: Execute Test Run

**Command**:
```bash
CROSSOVER_BIN="$HOME/Applications/CrossOver.app/Contents/SharedSupport/CrossOver/bin/cxstart"
BOTTLE_NAME="MetaTrader 5"
TERMINAL_EXE="C:\\Program Files\\MetaTrader 5\\terminal64.exe"

timeout 120 "$CROSSOVER_BIN" \
  --bottle "$BOTTLE_NAME" \
  --wait-children \
  -- \
  "$TERMINAL_EXE" \
  /portable \
  /skipupdate \
  /config:"config\\startup_sma_test.ini"
```

**Expected Behavior**:
1. MT5 launches
2. Dummy chart (EURUSD M1) loads
3. ExportAligned.ex5 starts on dummy chart
4. Script calls `SymbolSelect("EURUSD", true)` ‚Üí already in Market Watch
5. Script calls `CopyTime()` ‚Üí history available immediately
6. Script runs `SMAModule_Load()` ‚Üí iCustom(EURUSD, M1, SimpleSMA_Test)
7. CSV exported to `MQL5/Files/Export_EURUSD_M1_SMA.csv`
8. MT5 shuts down (ShutdownTerminal=1)

**Observability Checkpoints**:
```bash
# Check MT5 script logs
tail -50 "$BOTTLE/drive_c/Program Files/MetaTrader 5/MQL5/Logs/$(date +%Y%m%d).log"

# Check for export file
ls -lh "$BOTTLE/drive_c/Program Files/MetaTrader 5/MQL5/Files/Export_EURUSD_M1_SMA.csv"

# Verify CSV contents
head -5 "$BOTTLE/drive_c/Program Files/MetaTrader 5/MQL5/Files/Export_EURUSD_M1_SMA.csv"
```

**Success Criteria**:
- ‚úÖ Log shows "Symbol loaded: EURUSD PERIOD_M1"
- ‚úÖ Log shows "Export complete: 100 bars"
- ‚úÖ CSV exists with SMA_14 column
- ‚úÖ No errors in MQL5 logs

**On Error**: Propagate error with full log context (no silent handling)

#### Step 4.4: Cold-Start Test (XAUUSD)

**Update startup_sma_test.ini**:
```ini
InpSymbol=XAUUSD
InpOutputName=Export_XAUUSD_M1_SMA.csv
```

**Execute**: Same command as Step 4.3

**Expected Behavior**:
1. Script calls `SymbolSelect("XAUUSD", true)` ‚Üí adds to Market Watch
2. Script waits for history download (up to 5 seconds)
3. Log shows progress: "Waiting for XAUUSD PERIOD_M1 history... (0/50)", "(10/50)", etc.
4. History arrives, script continues
5. CSV exported successfully

**Success Criteria**:
- ‚úÖ Symbol never opened in GUI before
- ‚úÖ Script successfully loads symbol and history
- ‚úÖ CSV created with XAUUSD data
- ‚úÖ Correlation with v3.0.0 Python API export ‚â• 0.999

**SLO Validation**: This test confirms 100% availability for cold-start symbols

---

### Phase 4 Test Results (2025-10-17) üî¥ BLOCKED

**Status**: Phases 1-3 complete, Phase 4 testing blocked by [Inputs] parameter passing issue

#### Phase 4.1: Recompile ‚úÖ COMPLETE

**Actions**:
1. Removed `RefreshRates()` MQL4 function (line 54) - compilation blocker in MQL5
2. CLI compilation succeeded: 0 errors, 0 warnings, 907ms
3. ExportAligned.ex5 deployed to Scripts/DataExport/

**Discovery**: `RefreshRates()` does not exist in MQL5 (MQL4-only)

#### Phase 4.2: EURUSD Baseline Test ‚úÖ PARTIAL SUCCESS

**Config**: `C:\users\crossover\Config\startup_sma_test.ini`
- Correct location (NOT Program Files/MetaTrader 5/Config/)
- Script path: `DataExport\ExportAligned` (MT5 adds "Scripts\" prefix automatically)

**Result**:
- ‚úÖ Script executed successfully
- ‚úÖ CSV created: `Export_EURUSD_PERIOD_M1.csv` (308KB, 5000 bars)
- ‚úÖ History wait loop worked (0ms wait - symbol already loaded)
- ‚ùå [Inputs] section NOT applied - script used defaults

**Log Evidence** (MQL5/Logs/20251017.log):
```
ExportAligned (EURUSD,H1) Symbol selected: EURUSD
ExportAligned (EURUSD,H1) History available for EURUSD PERIOD_M1 (waited 0 ms)
ExportAligned (EURUSD,H1) Export complete: 5000 bars for EURUSD PERIOD_M1 -> Export_EURUSD_PERIOD_M1.csv
```

**[Inputs] Issue**:
- Expected: SMA enabled, 100 bars, `Export_EURUSD_M1_SMA.csv`
- Actual: RSI enabled (default), 5000 bars (default), `Export_EURUSD_PERIOD_M1.csv`
- Conclusion: [Inputs] section format incorrect or unsupported

#### Phase 4.3: XAUUSD Cold-Start Test üî¥ BLOCKED

**Config Update**: Changed `InpSymbol=XAUUSD` and `InpOutputName=Export_XAUUSD_M1_SMA.csv`

**Result**:
- ‚úÖ Script executed successfully
- ‚úÖ Used EURUSD (default from InpSymbol="EURUSD" hardcoded in script)
- ‚ùå [Inputs] parameters NOT applied
- ‚ùå Cannot validate cold-start without working parameter passing

**Impact**: Cold-start validation blocked - cannot change target symbol without working [Inputs]

#### Critical Blockers

1. **[Inputs] Section Format**:
   - startup.ini [Inputs] section not being applied to script
   - Script always uses hardcoded defaults from .mq5 file
   - Unknown if syntax is wrong or feature unsupported
   - Requires external research or MQL5 documentation

2. **Alternative Approaches**:
   - Preset file method (`.set` files + `ScriptParameters=` in startup.ini)
   - Modify ExportAligned.mq5 defaults directly (breaks single source of truth)
   - Use v3.0.0 Python API instead (already working)

3. **Partial Validation**:
   - Solution A pattern works for symbol loading (SymbolSelect + history wait)
   - Dummy chart approach works (script launches on EURUSD M1 dummy)
   - But cannot test cold-start without parameter passing

---

### Phase 5: Python Validation ‚è≥ PENDING

**Objective**: Verify MQL5 SMA values match Python implementation (‚â• 0.999 correlation)

**Prerequisites**:
- ‚úÖ `Export_EURUSD_M1_SMA.csv` exists from Phase 4
- ‚úÖ `users/crossover/indicators/simple_sma.py` exists from Iteration 2.1

**Steps**:

1. **Copy CSV to accessible location**:
   ```bash
   BOTTLE="$HOME/Library/Application Support/CrossOver/Bottles/MetaTrader 5"
   cp "$BOTTLE/drive_c/Program Files/MetaTrader 5/MQL5/Files/Export_EURUSD_M1_SMA.csv" \
      "$BOTTLE/drive_c/users/crossover/exports/"
   ```

2. **Run validation** (if validate_indicator.py supports SMA):
   ```bash
   cd "$BOTTLE/drive_c/users/crossover"
   python validate_indicator.py \
     --csv exports/Export_EURUSD_M1_SMA.csv \
     --indicator sma \
     --threshold 0.999
   ```

3. **Alternative** (manual validation):
   ```python
   import pandas as pd
   from indicators.simple_sma import calculate_sma
   from scipy.stats import pearsonr

   # Load MQL5 export
   df = pd.read_csv("exports/Export_EURUSD_M1_SMA.csv")
   df.columns = df.columns.str.lower()

   # Calculate Python SMA
   py_result = calculate_sma(df, period=14, price_col='close')

   # Compare (skip warmup period)
   mql5_sma = df['sma_14'].values[14:]
   py_sma = py_result['sma'].values[14:]

   # Remove NaN
   mask = ~(pd.isna(mql5_sma) | pd.isna(py_sma))
   corr, pval = pearsonr(mql5_sma[mask], py_sma[mask])

   print(f"Correlation: {corr:.6f}")
   print(f"Pass: {corr >= 0.999}")
   ```

**Success Criteria**:
- ‚úÖ Correlation ‚â• 0.999
- ‚úÖ No NaN mismatches (both have same warmup period)
- ‚úÖ Last 10 bars match exactly (< 0.0001 difference)

**On Failure**: Investigate discrepancies, update simple_sma.py if needed, propagate error

**SLO Impact**: Correctness validated at ‚â• 0.999 threshold

---

### Phase 6: Documentation Update ‚è≥ PENDING

**Objective**: Consolidate learnings into workflow documentation

**Files to Update**:

1. **`docs/guides/MQL5_TO_PYTHON_MIGRATION_GUIDE.md`** (version bump: 2.0.0 ‚Üí 2.1.0):
   - Add "Solution A: Dummy Chart Approach" section
   - Document `SymbolSelect()` + history wait pattern
   - Update Phase 4 (Script Execution) with new startup.ini format
   - Reference external research PDF

2. **`docs/reports/ITERATION_2_SMA_INTERIM_REPORT.md`** ‚Üí Rename to `ITERATION_2_SMA_SUCCESS_REPORT.md`:
   - Remove "BLOCKED" status
   - Add Solution A implementation summary
   - Document SLO results (all 100%)
   - Link to this plan file

3. **`CLAUDE.md`** (version: 2.0.0 ‚Üí 2.1.0):
   - Update "Critical Discoveries" with Solution A findings
   - Add reference to HEADLESS_MQL5_SCRIPT_SOLUTION_A.md
   - Update "Key Commands" with new startup.ini format
   - Archive v2.0.0 mq5run script reference (deprecated by Solution A)

4. **Create**: `docs/guides/SOLUTION_A_DUMMY_CHART_PATTERN.md`:
   - Standalone reference for Solution A pattern
   - Code examples (MQL5 SymbolSelect pattern)
   - startup.ini configuration
   - Troubleshooting guide

**Consolidation Principles**:
- Single source of truth per topic
- Version tracking (SemVer)
- No promotional language
- Abstract intent (not implementation details)
- Cross-reference external research PDF

**SLO Impact**: Maintainability (clear documentation enables future use)

---

## Validation Criteria

### Go/No-Go Decision Points

**After Phase 1** (Code changes):
- ‚úÖ Code review: `SymbolSelect()` exists (already implemented at line 33)
- ‚úÖ Code review: History wait loop added (lines 39-56)
- ‚úÖ Code review: All calls use `symbol`/`InpTimeframe` variables (already correct)

**After Phase 4** (Execution test):
- ‚úÖ EURUSD test passes (baseline)
- ‚úÖ XAUUSD test passes (cold-start validation)
- ‚úÖ No errors in MT5 logs
- ‚úÖ CSV files created with expected columns

**After Phase 5** (Validation):
- ‚úÖ SMA correlation ‚â• 0.999
- ‚úÖ Python implementation matches MQL5 behavior

**Overall Success**:
- ‚úÖ All SLOs met (100% availability, ‚â• 0.999 correctness, 100% observability, ‚â• 90% maintainability)
- ‚úÖ Documentation updated and consolidated
- ‚úÖ Iteration 2 unblocked

---

## Rollback Plan

If Solution A fails to meet SLOs:

**Option 1**: Accept one-time GUI initialization per symbol (v2.0.0 limitation)
- Manually open EURUSD M1 chart once
- Run ExportAligned via GUI to generate CSV
- Document as acceptable workflow limitation

**Option 2**: Pivot to v3.0.0 Python API approach (current production method)
- Continue Python indicator reimplementation
- Accept inability to access MQL5 indicator buffers
- Document SMAModule.mqh as compilation success only

**Option 3**: Implement Xvfb virtual display (Solution B from research)
- High complexity, last resort
- Requires Docker/container setup
- Use only if Solution A fundamentally broken

**Decision Criteria**: If Phase 4 cold-start test fails after debugging, escalate to user for decision

---

## References

### External Research
- **PDF Report**: `/Users/terryli/Downloads/MetaTrader 5 Headless MQL5 Script Execution.pdf`
  - 10 pages, 44 citations
  - MQL5 moderator quotes (Fernando Carreiro, Miguel Angel Vico)
  - Community consensus on Xvfb vs dummy chart approaches
  - SymbolSelect() documentation (MQL4 reference applies to MQL5)

### Internal Documentation
- **Reality Check Matrix**: `docs/reports/REALITY_CHECK_MATRIX.md`
- **Minimal Workflow**: `docs/guides/MQL5_TO_PYTHON_MINIMAL.md`
- **Validation Status**: `docs/reports/VALIDATION_STATUS.md` (v2.0.0 limitations)
- **Laguerre RSI Validation**: `docs/reports/LAGUERRE_RSI_VALIDATION_SUCCESS.md` (correlation methodology)

### Code Files
- **ExportAligned.mq5**: `MQL5/Scripts/DataExport/ExportAligned.mq5` (to be modified)
- **SMAModule.mqh**: `MQL5/Include/DataExport/modules/SMAModule.mqh` (compiled, ready)
- **SimpleSMA_Test**: `MQL5/Indicators/Custom/PythonInterop/SimpleSMA_Test.mq5` (compiled)
- **Python SMA**: `users/crossover/indicators/simple_sma.py` (ready)

---

## Version History

| Version | Date | Changes | Author |
|---------|------|---------|--------|
| 1.0.0 | 2025-10-17 | Initial plan based on external research Solution A | Claude |
| 1.1.0 | 2025-10-17 | Phase 1 rectification - ExportAligned.mq5 already had Solution A pattern (only history wait loop missing) | Claude |
| 1.2.0 | 2025-10-17 | Phase 4 test results - BLOCKED by [Inputs] parameter passing issue. RefreshRates() removed (MQL4-only). Config location and script path discoveries. | Claude |

---

**Phase 1-3 Status**: ‚úÖ COMPLETE
**Phase 4 Status**: üî¥ BLOCKED - [Inputs] section not applying parameters to script
**Next Action**: Research [Inputs] format or pivot to alternative parameter passing (preset files or v3.0.0 Python API)
