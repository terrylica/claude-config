#!/usr/bin/env python3
"""
Fetch Touchstone documentation from Notion.

Retrieves and displays documentation from internal Notion pages.
Requires NOTION_API_TOKEN and NOTION_TOUCHSTONE_PAGE_ID environment variables.

Usage:
    # Using Doppler for credential injection
    doppler run --project claude-config --config dev -- python3 util/touchstone/fetch_notion_docs.py

    # With optional output format
    doppler run --project claude-config --config dev -- python3 util/touchstone/fetch_notion_docs.py --format markdown

    # Save to file
    doppler run --project claude-config --config dev -- python3 util/touchstone/fetch_notion_docs.py --output touchstone_docs.md
"""

import argparse
import json
import os
import sys
from pathlib import Path

from notion_client import Client


def get_page_content(notion: Client, page_id: str) -> dict:
    """
    Retrieve page content including metadata and blocks.

    Args:
        notion: Notion client instance
        page_id: Page ID to retrieve

    Returns:
        Dictionary containing page metadata and content blocks
    """
    # Get page metadata
    page = notion.pages.retrieve(page_id=page_id)

    # Get page blocks (content)
    blocks = notion.blocks.children.list(block_id=page_id)

    return {
        "page": page,
        "blocks": blocks,
    }


def blocks_to_markdown(blocks: list) -> str:
    """
    Convert Notion blocks to Markdown format.

    Args:
        blocks: List of Notion block objects

    Returns:
        Markdown-formatted string
    """
    markdown_lines = []

    for block in blocks.get("results", []):
        block_type = block.get("type")

        if block_type == "paragraph":
            text = extract_rich_text(block["paragraph"].get("rich_text", []))
            if text:
                markdown_lines.append(text)
                markdown_lines.append("")  # Empty line after paragraph

        elif block_type == "heading_1":
            text = extract_rich_text(block["heading_1"].get("rich_text", []))
            markdown_lines.append(f"# {text}")
            markdown_lines.append("")

        elif block_type == "heading_2":
            text = extract_rich_text(block["heading_2"].get("rich_text", []))
            markdown_lines.append(f"## {text}")
            markdown_lines.append("")

        elif block_type == "heading_3":
            text = extract_rich_text(block["heading_3"].get("rich_text", []))
            markdown_lines.append(f"### {text}")
            markdown_lines.append("")

        elif block_type == "bulleted_list_item":
            text = extract_rich_text(block["bulleted_list_item"].get("rich_text", []))
            markdown_lines.append(f"- {text}")

        elif block_type == "numbered_list_item":
            text = extract_rich_text(block["numbered_list_item"].get("rich_text", []))
            markdown_lines.append(f"1. {text}")

        elif block_type == "code":
            language = block["code"].get("language", "")
            text = extract_rich_text(block["code"].get("rich_text", []))
            markdown_lines.append(f"```{language}")
            markdown_lines.append(text)
            markdown_lines.append("```")
            markdown_lines.append("")

        elif block_type == "quote":
            text = extract_rich_text(block["quote"].get("rich_text", []))
            markdown_lines.append(f"> {text}")
            markdown_lines.append("")

        elif block_type == "divider":
            markdown_lines.append("---")
            markdown_lines.append("")

        elif block_type == "callout":
            text = extract_rich_text(block["callout"].get("rich_text", []))
            icon = block["callout"].get("icon", {})
            emoji = icon.get("emoji", "ℹ️") if icon.get("type") == "emoji" else "ℹ️"
            markdown_lines.append(f"> {emoji} **Note**: {text}")
            markdown_lines.append("")

    return "\n".join(markdown_lines)


def extract_rich_text(rich_text_array: list) -> str:
    """
    Extract plain text from Notion rich text objects.

    Args:
        rich_text_array: Array of Notion rich text objects

    Returns:
        Concatenated plain text string
    """
    text_parts = []

    for text_obj in rich_text_array:
        content = text_obj.get("plain_text", "")
        annotations = text_obj.get("annotations", {})

        # Apply markdown formatting based on annotations
        if annotations.get("bold"):
            content = f"**{content}**"
        if annotations.get("italic"):
            content = f"*{content}*"
        if annotations.get("code"):
            content = f"`{content}`"
        if annotations.get("strikethrough"):
            content = f"~~{content}~~"

        # Handle links
        if text_obj.get("href"):
            content = f"[{content}]({text_obj['href']})"

        text_parts.append(content)

    return "".join(text_parts)


def get_page_title(page: dict) -> str:
    """
    Extract page title from page metadata.

    Args:
        page: Notion page object

    Returns:
        Page title string
    """
    properties = page.get("properties", {})

    # Try to find title property
    for prop_name, prop_value in properties.items():
        if prop_value.get("type") == "title":
            title_array = prop_value.get("title", [])
            if title_array:
                return extract_rich_text(title_array)

    return "Untitled"


def main():
    parser = argparse.ArgumentParser(
        description="Fetch Touchstone documentation from Notion",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=__doc__,
    )
    parser.add_argument(
        "--format",
        choices=["markdown", "json"],
        default="markdown",
        help="Output format (default: markdown)",
    )
    parser.add_argument(
        "--output",
        "-o",
        type=Path,
        help="Output file path (default: stdout)",
    )
    parser.add_argument(
        "--page-id",
        help="Override NOTION_TOUCHSTONE_PAGE_ID environment variable",
    )

    args = parser.parse_args()

    # Get credentials from environment
    api_token = os.getenv("NOTION_API_TOKEN")
    page_id = args.page_id or os.getenv("NOTION_TOUCHSTONE_PAGE_ID")

    if not api_token:
        print("Error: NOTION_API_TOKEN environment variable not set", file=sys.stderr)
        print("Use Doppler: doppler run --project claude-config --config dev -- python3 ...", file=sys.stderr)
        sys.exit(1)

    if not page_id:
        print("Error: NOTION_TOUCHSTONE_PAGE_ID environment variable not set", file=sys.stderr)
        print("or provide --page-id argument", file=sys.stderr)
        sys.exit(1)

    # Initialize Notion client with latest API version
    notion = Client(
        auth=api_token,
        notion_version="2025-09-03",
    )

    try:
        # Fetch page content
        content = get_page_content(notion, page_id)

        # Format output
        if args.format == "json":
            output = json.dumps(content, indent=2)
        else:  # markdown
            title = get_page_title(content["page"])
            markdown_content = blocks_to_markdown(content["blocks"])
            output = f"# {title}\n\n{markdown_content}"

        # Write output
        if args.output:
            args.output.write_text(output)
            print(f"Documentation saved to {args.output}", file=sys.stderr)
        else:
            print(output)

    except Exception as e:
        print(f"Error fetching Notion page: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()
