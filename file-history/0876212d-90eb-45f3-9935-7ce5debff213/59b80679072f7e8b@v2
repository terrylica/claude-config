"""
Reconnaissance Test: Comprehensive "Start a new application" Button Investigation

Purpose: Final comprehensive test to understand what this button actually does.

Tests:
1. Fill form completely
2. Capture full state BEFORE clicking
3. Click button
4. Wait generously for any React updates
5. Scroll through entire page checking for changes
6. Compare ALL aspects (DOM, ARIA, screenshots, page height, console, localStorage)

Status: Temporary exploration test
Cleanup: Archive after investigation complete
"""

import pytest
from playwright.sync_api import Page
from pathlib import Path
import json

@pytest.mark.reconnaissance
def test_comprehensive_button_investigation(page: Page):
    """
    Comprehensive investigation of "Start a new application" button behavior
    """

    artifacts_dir = Path("artifacts/test_button_comprehensive")
    artifacts_dir.mkdir(parents=True, exist_ok=True)

    print("\n" + "=" * 80)
    print("COMPREHENSIVE BUTTON INVESTIGATION")
    print("=" * 80)
    print(f"Artifacts: {artifacts_dir}\n")

    # ===== SETUP =====
    print("SETUP: Navigate and fill form")
    print("-" * 80)

    page.goto("https://www.insurance.manulife.ca/dda/welcomeInformation", wait_until="networkidle")

    # Accept cookies
    try:
        page.get_by_role("button", name="Accept all cookies").click(timeout=2000)
        page.wait_for_timeout(500)
    except:
        pass

    # Select Manulife Par + Upload Later
    page.get_by_label("Product").select_option("1")
    page.wait_for_timeout(500)

    # Select Upload Later
    page.get_by_role("radio", name="Upload Later").click()
    page.wait_for_timeout(500)

    # Click first "Start a new application" to reveal form fields
    first_start_button = page.get_by_text("Start a new application")
    first_start_button.wait_for(state="visible", timeout=5000)
    first_start_button.click()
    page.wait_for_load_state("networkidle")

    # Fill all required fields
    page.get_by_label("First name").fill("Grace")
    page.get_by_label("Last name").fill("Hopper")
    page.get_by_role("radio", name="Female").click()
    page.get_by_label("Day (dd)").fill("09")
    page.get_by_label("Month").select_option("december")
    page.get_by_label("Year (yyyy)").fill("1906")
    page.get_by_label("Illustrated smoking status").select_option("Non-Smoker")
    page.get_by_label("Coverage type").select_option("Single")
    page.get_by_label("Premium Duration").select_option("Pay for 10 years")
    page.get_by_label("Amount of insurance, dollar").fill("500000")
    page.get_by_label("Dividend option").select_option("Paid-up insurance")

    # Custom React buttons
    for selector in ["#RIDER_STATUS_ID-1", "#wel-pol-quebec-1", "#wel-multiple-prod-1", "#wel-electronic-app-0"]:
        page.evaluate(f"""
            document.querySelector('{selector}').click();
            document.querySelector('{selector}').dispatchEvent(new Event('change', {{ bubbles: true }}));
        """)
        page.wait_for_timeout(200)

    print("✓ Form filled completely\n")

    # ===== CAPTURE BEFORE STATE =====
    print("BEFORE: Capturing complete state before button click")
    print("-" * 80)

    # Scroll to top first
    page.evaluate("window.scrollTo(0, 0)")
    page.wait_for_timeout(500)

    # Get page dimensions
    dimensions_before = page.evaluate("""() => ({
        scrollHeight: document.documentElement.scrollHeight,
        clientHeight: document.documentElement.clientHeight,
        scrollWidth: document.documentElement.scrollWidth,
        clientWidth: document.documentElement.clientWidth
    })""")

    # Get all headings
    headings_before = page.locator("h1, h2, h3").all_text_contents()

    # Get localStorage
    storage_before = page.evaluate("() => JSON.stringify(localStorage)")

    # Get button state
    button = page.get_by_role("button", name="Start a new application")
    button_attrs_before = page.evaluate("""() => {
        const btn = document.querySelector('[data-testid="start-new-application-button"]');
        return {
            text: btn?.textContent,
            disabled: btn?.disabled,
            dataSaving: btn?.getAttribute('data-saving'),
            className: btn?.className
        };
    }""")

    # Screenshots
    page.screenshot(path=str(artifacts_dir / "01_before_top.png"), full_page=False)
    page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
    page.wait_for_timeout(500)
    page.screenshot(path=str(artifacts_dir / "02_before_bottom.png"), full_page=False)
    page.screenshot(path=str(artifacts_dir / "03_before_fullpage.png"), full_page=True)

    # ARIA snapshot
    page.evaluate("window.scrollTo(0, 0)")
    with open(artifacts_dir / "before.aria.yaml", "w") as f:
        f.write(page.locator("body").aria_snapshot())

    print(f"  Scroll height: {dimensions_before['scrollHeight']}px")
    print(f"  Client height: {dimensions_before['clientHeight']}px")
    print(f"  Headings: {len(headings_before)}")
    print(f"  Button data-saving: {button_attrs_before.get('dataSaving')}")
    print(f"  localStorage keys: {len(json.loads(storage_before))}")
    print()

    # ===== CLICK BUTTON =====
    print("ACTION: Clicking 'Start a new application' button")
    print("-" * 80)

    # Scroll button into view and click
    button.scroll_into_view_if_needed()
    page.wait_for_timeout(500)

    # Take screenshot right before click
    page.screenshot(path=str(artifacts_dir / "04_immediate_before_click.png"), full_page=False)

    button.click()
    print("✓ Button clicked")

    # Wait generously for any updates
    print("  → Waiting 5 seconds for React updates...")
    page.wait_for_timeout(5000)
    print()

    # ===== CAPTURE AFTER STATE =====
    print("AFTER: Capturing complete state after button click")
    print("-" * 80)

    # Get page dimensions
    dimensions_after = page.evaluate("""() => ({
        scrollHeight: document.documentElement.scrollHeight,
        clientHeight: document.documentElement.clientHeight,
        scrollWidth: document.documentElement.scrollWidth,
        clientWidth: document.documentElement.clientWidth
    })""")

    # Get all headings
    headings_after = page.locator("h1, h2, h3").all_text_contents()

    # Get localStorage
    storage_after = page.evaluate("() => JSON.stringify(localStorage)")

    # Get button state
    button_attrs_after = page.evaluate("""() => {
        const btn = document.querySelector('[data-testid="start-new-application-button"]');
        return {
            text: btn?.textContent,
            disabled: btn?.disabled,
            dataSaving: btn?.getAttribute('data-saving'),
            className: btn?.className
        };
    }""")

    # Get current scroll position
    scroll_pos = page.evaluate("() => window.scrollY")

    # Screenshots at current position
    page.screenshot(path=str(artifacts_dir / "05_after_same_position.png"), full_page=False)

    # Scroll to top and capture
    page.evaluate("window.scrollTo(0, 0)")
    page.wait_for_timeout(500)
    page.screenshot(path=str(artifacts_dir / "06_after_top.png"), full_page=False)

    # Scroll to bottom and capture
    page.evaluate("window.scrollTo(0, document.body.scrollHeight)")
    page.wait_for_timeout(500)
    page.screenshot(path=str(artifacts_dir / "07_after_bottom.png"), full_page=False)

    # Full page
    page.screenshot(path=str(artifacts_dir / "08_after_fullpage.png"), full_page=True)

    # ARIA snapshot
    page.evaluate("window.scrollTo(0, 0)")
    with open(artifacts_dir / "after.aria.yaml", "w") as f:
        f.write(page.locator("body").aria_snapshot())

    print(f"  Scroll height: {dimensions_after['scrollHeight']}px")
    print(f"  Client height: {dimensions_after['clientHeight']}px")
    print(f"  Headings: {len(headings_after)}")
    print(f"  Button data-saving: {button_attrs_after.get('dataSaving')}")
    print(f"  localStorage keys: {len(json.loads(storage_after))}")
    print()

    # ===== COMPARE =====
    print("COMPARISON: Analyzing changes")
    print("-" * 80)

    # Dimensions
    height_changed = dimensions_before['scrollHeight'] != dimensions_after['scrollHeight']
    print(f"  Page height changed: {height_changed}")
    if height_changed:
        diff = dimensions_after['scrollHeight'] - dimensions_before['scrollHeight']
        print(f"    Before: {dimensions_before['scrollHeight']}px")
        print(f"    After:  {dimensions_after['scrollHeight']}px")
        print(f"    Diff:   {diff:+d}px")

    # Headings
    headings_changed = headings_before != headings_after
    print(f"  Headings changed: {headings_changed}")
    if headings_changed:
        print(f"    Before: {headings_before}")
        print(f"    After:  {headings_after}")

    # LocalStorage
    storage_changed = storage_before != storage_after
    print(f"  localStorage changed: {storage_changed}")
    if storage_changed:
        before_keys = set(json.loads(storage_before).keys())
        after_keys = set(json.loads(storage_after).keys())
        new_keys = after_keys - before_keys
        removed_keys = before_keys - after_keys
        if new_keys:
            print(f"    New keys: {new_keys}")
        if removed_keys:
            print(f"    Removed keys: {removed_keys}")

    # Button
    button_changed = button_attrs_before != button_attrs_after
    print(f"  Button attributes changed: {button_changed}")
    if button_changed:
        print(f"    Before: {button_attrs_before}")
        print(f"    After:  {button_attrs_after}")

    print()

    # ===== SEARCH FOR NEW SECTIONS =====
    print("SEARCH: Looking for new sections or hidden elements")
    print("-" * 80)

    # Look for common next-step keywords
    keywords = ["attachment", "review", "submit", "next", "continue", "confirm", "summary"]
    for keyword in keywords:
        elements = page.locator(f"text=/{keyword}/i").all()
        if elements:
            print(f"  '{keyword}': {len(elements)} matches")

    # Check for new form sections
    sections = page.locator("h1, h2").all()
    print(f"  Total sections (h1/h2): {len(sections)}")
    for section in sections:
        text = section.text_content()
        if text:
            print(f"    - {text}")

    print()

    # ===== SUMMARY =====
    print("=" * 80)
    print("INVESTIGATION COMPLETE")
    print("=" * 80)
    print(f"\nSummary:")
    print(f"  - Page height changed: {height_changed}")
    print(f"  - Headings changed: {headings_changed}")
    print(f"  - localStorage changed: {storage_changed}")
    print(f"  - Button changed: {button_changed}")
    print(f"\nArtifacts: {artifacts_dir}")
    print(f"  - 8 screenshots (before/after at different scroll positions)")
    print(f"  - 2 ARIA snapshots (before.aria.yaml, after.aria.yaml)")
    print(f"\nRecommendation:")
    if not any([height_changed, headings_changed, storage_changed]):
        print("  ⚠️  NO SIGNIFICANT CHANGES DETECTED")
        print("  The button appears to be non-functional or purely client-side validation")
    else:
        print("  ✓ Changes detected - review artifacts for details")
    print()

    assert True, "Investigation complete - review artifacts"
