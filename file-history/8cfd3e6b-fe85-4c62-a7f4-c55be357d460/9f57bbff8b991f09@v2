# AI Research Agent Prompt: CrossOver Bottle File Tracking

## Research Objective

Find best practices and production-proven methods for version controlling files inside CodeWeavers CrossOver bottle environments, specifically for MetaTrader 5 with Wine Python integration.

## Context

**Environment**:
- macOS Sequoia 15.1
- CrossOver 24.0.5 (commercial Wine wrapper)
- MetaTrader 5 Build 5331 in dedicated bottle
- Wine Python 3.12.8 + MetaTrader5 package inside bottle
- Main project git repo: `/Users/terryli/eon/mql5-crossover/`
- Bottle filesystem: `~/Library/Application Support/CrossOver/Bottles/MetaTrader 5/drive_c/`

**Files to Track**:
1. Python scripts: `C:\users\crossover\export_aligned.py` (Wine path)
2. Python environment: `C:\Program Files\Python312\` (packages, config)
3. MT5 configuration: `C:\Program Files\MetaTrader 5\config\startup.ini`
4. CSV exports: `C:\users\crossover\exports\` (output files)
5. Compiled MQL5: `C:\Program Files\MetaTrader 5\MQL5\Scripts\*.ex5`

**Current Strategy**:
- Main project repo tracks source MQL5/Python files
- `mq5c` copies and compiles MQL5 files into bottle
- `mq5run` generates configs and runs MT5 in bottle
- Python scripts (v3.0.0) run via Wine Python inside bottle

## Research Questions

### Primary Questions

1. **Git Inside Wine/CrossOver Bottles**:
   - Can macOS git directly track files inside CrossOver bottle filesystems?
   - Are there performance or stability issues with git repos spanning Wine boundaries?
   - Do CrossOver updates preserve git repos inside bottles?

2. **Version Control Strategies**:
   - Separate git repo in bottle vs submodule from main repo?
   - Symlinks from main repo to bottle (Wine compatibility)?
   - Copy/sync strategies (rsync, unison, git-annex)?
   - Config management tools (Ansible, Chef, dotfiles managers)?

3. **Wine-Specific Considerations**:
   - Line ending issues (CRLF in Wine vs LF in macOS)?
   - Case sensitivity (Wine uses case-insensitive by default)?
   - Path translation complexities?
   - File locking during MT5 execution?

4. **Backup and Recovery**:
   - Best practices for bottle snapshots (tar, Time Machine, git bundles)?
   - CrossOver bottle backup tools or CLI?
   - Disaster recovery workflows?

5. **Multi-Machine Sync**:
   - Remote git hosting for bottle configs (GitHub, GitLab)?
   - Sensitive data handling (MT5 credentials, API keys)?
   - Differential sync approaches?

### Secondary Questions

6. **Production Examples**:
   - Open source projects using Wine + git?
   - MetaTrader/trading platform config management examples?
   - Python-in-Wine deployment patterns?

7. **Alternative Approaches**:
   - Docker/container-based MT5 (if viable on macOS)?
   - Virtual machine snapshots vs git?
   - Infrastructure-as-code for Wine environments?

## Search Keywords and Phrases

**Primary**:
- "git inside wine bottle"
- "version control crossover bottles"
- "wine python version control"
- "metatrader configuration management"
- "crossover bottle backup git"

**Technical**:
- "wine drive_c git repository"
- "crossover bottles infrastructure as code"
- "wine prefix version control"
- "trading platform config management"
- "wine environment reproducibility"

**Community**:
- site:codeweavers.com git bottles
- site:winehq.org version control prefix
- site:github.com crossover configuration management
- site:reddit.com r/wine git

## Information to Extract

For each solution found, document:

1. **Method Overview**:
   - High-level approach (git, symlinks, sync tool, etc.)
   - Pros and cons
   - Production-readiness (hobby vs enterprise)

2. **Implementation Details**:
   - Exact commands/scripts
   - File structure requirements
   - Integration with CrossOver/Wine

3. **Gotchas and Edge Cases**:
   - Known issues or limitations
   - Workarounds or fixes
   - Performance implications

4. **Community Validation**:
   - GitHub stars, forum upvotes, or adoption metrics
   - Active maintenance status
   - Tested Wine/CrossOver versions

5. **Alternatives Considered**:
   - Why author chose this approach
   - Rejected alternatives and reasons

## Output Format

Provide findings in this structure:

```markdown
# Bottle File Tracking Solutions

## Solution 1: [Name]
- **Source**: [URL]
- **Approach**: [Brief description]
- **Wine Compatibility**: [Version range]
- **Pros**: [Bulleted list]
- **Cons**: [Bulleted list]
- **Implementation**: [Code/commands]
- **Production Status**: [Hobby/Production/Enterprise]
- **Recommendation**: [1-5 stars]

## Solution 2: ...

## Recommended Approach
[Synthesized recommendation with rationale]

## Implementation Plan
[Step-by-step guide for best solution]
```

## Success Criteria

Research is complete when:
1. At least 3 distinct approaches documented
2. Production examples found (with GitHub repos or forum threads)
3. Wine/CrossOver-specific gotchas identified
4. Clear recommendation with implementation steps
5. Risk assessment for each approach

## Time Box

- **Web search**: 30 sources maximum
- **Analysis depth**: Focus on Wine/CrossOver-specific content
- **Output**: Concise summary (not exhaustive lists)

## Notes

- **Bias toward simplicity**: Prefer off-the-shelf solutions over custom code
- **Bias toward robustness**: Production-proven > theoretically elegant
- **Bias toward Wine-native**: Solutions designed for Wine > generic approaches
- **Consider user skill level**: Solutions should be maintainable by non-DevOps engineers
