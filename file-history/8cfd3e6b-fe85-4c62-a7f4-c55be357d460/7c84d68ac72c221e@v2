# ATR Adaptive Smoothed Laguerre RSI 2 (Extended) - Analysis

**Status**: Analysis Complete (2025-10-13)
**Source File**: `/Users/terryli/Library/Application Support/CrossOver/Bottles/MetaTrader 5/drive_c/Program Files/MetaTrader 5/MQL5/Indicators/Custom/ATR adaptive smoothed Laguerre RSI 2 (extended).mq5`
**Purpose**: Comprehensive breakdown for Python translation

---

## Executive Summary

This indicator combines three advanced techniques:
1. **ATR (Average True Range)** - Volatility measurement
2. **Adaptive Period** - Period adjusts based on market volatility (ATR min/max range)
3. **Laguerre Filter** - Four-stage recursive filter for smooth RSI calculation

**Key Innovation**: The Laguerre RSI period adapts dynamically based on current volatility relative to recent min/max ATR values, making it more responsive in volatile markets and smoother in quiet markets.

---

## Input Parameters

```mql5
input int                    inpCustomMinutes   = 0;        // Custom interval in minutes (0 = chart timeframe)
input int                    inpHistoryBars     = 5000;     // M1 bars for historical coverage
input int                    inpAtrPeriod       = 32;       // ATR period
input ENUM_APPLIED_PRICE     inpRsiPrice        = PRICE_CLOSE; // Price
input int                    inpRsiMaPeriod     = 5;        // Price smoothing period
input ENUM_MA_METHOD         inpRsiMaType       = MODE_EMA; // Price smoothing method
input double                 inpLevelUp         = 0.85;     // Level up
input double                 inpLevelDown       = 0.15;     // Level down
input bool                   inpShowDebug       = false;    // Show debug information
```

**Python Translation Requirements**:
- `atr_period`: int (default 32)
- `price_type`: str (default 'close') - 'open', 'high', 'low', 'close', 'median', 'typical', 'weighted'
- `price_smooth_period`: int (default 5)
- `price_smooth_method`: str (default 'ema') - 'sma', 'ema', 'smma', 'lwma'
- `level_up`: float (default 0.85)
- `level_down`: float (default 0.15)
- `custom_minutes`: int (default 0) - For future custom timeframe support

---

## Algorithm Breakdown

### Step 1: True Range Calculation

**Formula**:
```python
# For i > 0:
TR[i] = max(high[i], close[i-1]) - min(low[i], close[i-1])

# For i = 0 (first bar):
TR[0] = high[0] - low[0]
```

**MQL5 Code** (lines 242-245):
```mql5
atrWork[i].tr = (i > 0) ?
                (high[i] > close[i-1] ? high[i] : close[i-1]) -
                (low[i] < close[i-1] ? low[i] : close[i-1])
                : high[i] - low[i];
```

**Python Implementation**:
```python
import numpy as np
import pandas as pd

def calculate_true_range(high: pd.Series, low: pd.Series, close: pd.Series) -> pd.Series:
    """
    Calculate True Range.

    Args:
        high: High prices
        low: Low prices
        close: Close prices

    Returns:
        True Range values
    """
    prev_close = close.shift(1)

    # True Range = max(high, prev_close) - min(low, prev_close)
    tr = np.maximum(high, prev_close) - np.minimum(low, prev_close)

    # First bar: TR = high - low
    tr.iloc[0] = high.iloc[0] - low.iloc[0]

    return tr
```

---

### Step 2: ATR Calculation (Simple Moving Average of TR)

**Formula**:
```python
# Initial accumulation (i <= atr_period):
trSum[i] = sum(TR[0:i+1])  # Sum all TR values up to current bar

# Sliding window (i > atr_period):
trSum[i] = trSum[i-1] + TR[i] - TR[i-atr_period]  # Add newest, remove oldest

# ATR calculation:
ATR[i] = trSum[i] / atr_period
```

**MQL5 Code** (lines 248-262):
```mql5
if(i > inpAtrPeriod)
{
    // Sliding window: add newest, remove oldest
    atrWork[i].trSum = atrWork[i-1].trSum + atrWork[i].tr - atrWork[i-inpAtrPeriod].tr;
}
else
{
    // Initial accumulation phase
    atrWork[i].trSum = atrWork[i].tr;
    for(int k=1; k<inpAtrPeriod && i>=k; k++)
        atrWork[i].trSum += atrWork[i-k].tr;
}

// Calculate ATR as average of TR values
atrWork[i].atr = atrWork[i].trSum / (double)inpAtrPeriod;
```

**Python Implementation**:
```python
def calculate_atr(tr: pd.Series, period: int = 14) -> pd.Series:
    """
    Calculate ATR using simple moving average of True Range.

    Args:
        tr: True Range values
        period: ATR period (default 14)

    Returns:
        ATR values
    """
    # Simple moving average of TR
    atr = tr.rolling(window=period).mean()

    return atr
```

**Note**: The MQL5 implementation uses a manual sliding window calculation for performance. The Python pandas `rolling().mean()` achieves the same result more concisely.

---

### Step 3: ATR Min/Max Lookback

**Purpose**: Find the minimum and maximum ATR values over the lookback period to calculate the adaptive coefficient.

**Formula**:
```python
# For each bar i:
lookback_start = max(0, i - atr_period + 1)
lookback_end = i

min_atr[i] = min(ATR[lookback_start:lookback_end])
max_atr[i] = max(ATR[lookback_start:lookback_end])
```

**MQL5 Code** (lines 271-283):
```mql5
if(inpAtrPeriod > 1 && i > 0)
{
    // Initialize with previous ATR value
    atrWork[i].prevMax = atrWork[i].prevMin = atrWork[i-1].atr;

    // Find min/max exactly as original
    for(int k=2; k<inpAtrPeriod && i>=k; k++)
    {
        if(atrWork[i-k].atr > atrWork[i].prevMax)
            atrWork[i].prevMax = atrWork[i-k].atr;
        if(atrWork[i-k].atr < atrWork[i].prevMin)
            atrWork[i].prevMin = atrWork[i-k].atr;
    }
}
else
{
    // Not enough data, use current ATR for both min and max
    atrWork[i].prevMax = atrWork[i].prevMin = atrWork[i].atr;
}
```

**Python Implementation**:
```python
def calculate_atr_min_max(atr: pd.Series, period: int) -> tuple[pd.Series, pd.Series]:
    """
    Calculate rolling minimum and maximum ATR over lookback period.

    Args:
        atr: ATR values
        period: Lookback period

    Returns:
        Tuple of (min_atr, max_atr)
    """
    # Rolling min/max over lookback period
    min_atr = atr.rolling(window=period).min()
    max_atr = atr.rolling(window=period).max()

    return min_atr, max_atr
```

---

### Step 4: Adaptive Coefficient Calculation

**Purpose**: Calculate a coefficient (0.0 to 1.0) that adjusts the Laguerre RSI period based on current volatility.

**Formula**:
```python
# Ensure current ATR is within min/max range
_max = max(max_atr[i], atr[i])
_min = min(min_atr[i], atr[i])

# Calculate coefficient
if _min != _max:
    coeff = 1.0 - (atr[i] - _min) / (_max - _min)
else:
    coeff = 0.5

# Adaptive period
adaptive_period = atr_period * (coeff + 0.75)
```

**MQL5 Code** (lines 293-298):
```mql5
// Calculate adaptive parameters for Laguerre RSI
double _max = atrWork[i].prevMax > atrWork[i].atr ? atrWork[i].prevMax : atrWork[i].atr;
double _min = atrWork[i].prevMin < atrWork[i].atr ? atrWork[i].prevMin : atrWork[i].atr;
double _coeff = (_min != _max) ? 1.0-(atrWork[i].atr-_min)/(_max-_min) : 0.5;

// Calculate Laguerre RSI with adaptive period
val[i] = iLaGuerreRsi(prices[i], inpAtrPeriod*(_coeff+0.75), i, rates_total);
```

**Python Implementation**:
```python
def calculate_adaptive_coefficient(atr: pd.Series, min_atr: pd.Series, max_atr: pd.Series) -> pd.Series:
    """
    Calculate adaptive coefficient based on ATR position within min/max range.

    Args:
        atr: Current ATR values
        min_atr: Minimum ATR over lookback period
        max_atr: Maximum ATR over lookback period

    Returns:
        Adaptive coefficient (0.0 to 1.0)
    """
    # Ensure current ATR is within min/max range
    _max = np.maximum(max_atr, atr)
    _min = np.minimum(min_atr, atr)

    # Calculate coefficient
    # When ATR is at minimum: coeff = 1.0 (longest period)
    # When ATR is at maximum: coeff = 0.0 (shortest period)
    coeff = pd.Series(0.5, index=atr.index)  # Default
    mask = _min != _max
    coeff[mask] = 1.0 - (atr[mask] - _min[mask]) / (_max[mask] - _min[mask])

    return coeff

def calculate_adaptive_period(atr_period: int, coeff: pd.Series) -> pd.Series:
    """
    Calculate adaptive period for Laguerre RSI.

    Args:
        atr_period: Base ATR period
        coeff: Adaptive coefficient (0.0 to 1.0)

    Returns:
        Adaptive period values
    """
    # Adaptive period = atr_period * (coeff + 0.75)
    # Range: atr_period * 0.75 to atr_period * 1.75
    return atr_period * (coeff + 0.75)
```

**Key Insight**:
- When volatility is LOW (ATR near minimum): coeff ≈ 1.0 → period ≈ 1.75 × atr_period (longer, smoother)
- When volatility is HIGH (ATR near maximum): coeff ≈ 0.0 → period ≈ 0.75 × atr_period (shorter, more responsive)

---

### Step 5: Laguerre Filter (Four Stages)

**Purpose**: Apply a four-stage recursive filter to the price, creating smooth transitions.

**Formula**:
```python
# Gamma calculation
gamma = 1.0 - 10.0 / (period + 9.0)

# Four-stage filter (each stage depends on previous stage and previous bar)
L0[i] = price[i] + gamma * (L0[i-1] - price[i])
L1[i] = L0[i-1] + gamma * (L1[i-1] - L0[i])
L2[i] = L1[i-1] + gamma * (L2[i-1] - L1[i])
L3[i] = L2[i-1] + gamma * (L3[i-1] - L2[i])

# Initialization (i = 0):
L0[0] = L1[0] = L2[0] = L3[0] = price[0]
```

**MQL5 Code** (lines 657-668):
```mql5
if(i > 0 && period > 1)
{
    // Calculate gamma (filter coefficient)
    double _gamma = 1.0 - 10.0/(period+9.0);

    // Update filter values
    laguerreWork[i].data[instance].values[0] = price + _gamma * (laguerreWork[i-1].data[instance].values[0] - price);
    laguerreWork[i].data[instance].values[1] = laguerreWork[i-1].data[instance].values[0] +
                                     _gamma * (laguerreWork[i-1].data[instance].values[1] - laguerreWork[i].data[instance].values[0]);
    laguerreWork[i].data[instance].values[2] = laguerreWork[i-1].data[instance].values[1] +
                                     _gamma * (laguerreWork[i-1].data[instance].values[2] - laguerreWork[i].data[instance].values[1]);
    laguerreWork[i].data[instance].values[3] = laguerreWork[i-1].data[instance].values[2] +
                                     _gamma * (laguerreWork[i-1].data[instance].values[3] - laguerreWork[i].data[instance].values[2]);
```

**Python Implementation**:
```python
def calculate_laguerre_filter(prices: pd.Series, period: pd.Series) -> pd.DataFrame:
    """
    Calculate four-stage Laguerre filter with adaptive period.

    Args:
        prices: Price series
        period: Adaptive period series

    Returns:
        DataFrame with columns ['L0', 'L1', 'L2', 'L3']
    """
    n = len(prices)

    # Initialize filter stages
    L0 = np.zeros(n)
    L1 = np.zeros(n)
    L2 = np.zeros(n)
    L3 = np.zeros(n)

    # First bar initialization
    L0[0] = L1[0] = L2[0] = L3[0] = prices.iloc[0]

    # Calculate gamma for each bar
    gamma = 1.0 - 10.0 / (period + 9.0)

    # Iterate through each bar
    for i in range(1, n):
        g = gamma.iloc[i]
        p = prices.iloc[i]

        # Four-stage recursive filter
        L0[i] = p + g * (L0[i-1] - p)
        L1[i] = L0[i-1] + g * (L1[i-1] - L0[i])
        L2[i] = L1[i-1] + g * (L2[i-1] - L1[i])
        L3[i] = L2[i-1] + g * (L3[i-1] - L2[i])

    return pd.DataFrame({
        'L0': L0,
        'L1': L1,
        'L2': L2,
        'L3': L3
    }, index=prices.index)
```

---

### Step 6: Laguerre RSI Calculation

**Purpose**: Calculate RSI from the four Laguerre filter stages by measuring cumulative up/down movements.

**Formula**:
```python
CU = 0  # Cumulative Up movements
CD = 0  # Cumulative Down movements

# Compare consecutive stages
if L0[i] >= L1[i]:
    CU += L0[i] - L1[i]
else:
    CD += L1[i] - L0[i]

if L1[i] >= L2[i]:
    CU += L1[i] - L2[i]
else:
    CD += L2[i] - L1[i]

if L2[i] >= L3[i]:
    CU += L2[i] - L3[i]
else:
    CD += L3[i] - L2[i]

# RSI calculation
RSI = CU / (CU + CD) if (CU + CD) != 0 else 0
```

**MQL5 Code** (lines 670-693):
```mql5
// Calculate up/down movements
if(laguerreWork[i].data[instance].values[0] >= laguerreWork[i].data[instance].values[1])
    CU = laguerreWork[i].data[instance].values[0] - laguerreWork[i].data[instance].values[1];
else
    CD = laguerreWork[i].data[instance].values[1] - laguerreWork[i].data[instance].values[0];

if(laguerreWork[i].data[instance].values[1] >= laguerreWork[i].data[instance].values[2])
    CU += laguerreWork[i].data[instance].values[1] - laguerreWork[i].data[instance].values[2];
else
    CD += laguerreWork[i].data[instance].values[2] - laguerreWork[i].data[instance].values[1];

if(laguerreWork[i].data[instance].values[2] >= laguerreWork[i].data[instance].values[3])
    CU += laguerreWork[i].data[instance].values[2] - laguerreWork[i].data[instance].values[3];
else
    CD += laguerreWork[i].data[instance].values[3] - laguerreWork[i].data[instance].values[2];

// Calculate RSI
return ((CU+CD) != 0) ? CU/(CU+CD) : 0;
```

**Python Implementation**:
```python
def calculate_laguerre_rsi(laguerre_df: pd.DataFrame) -> pd.Series:
    """
    Calculate RSI from Laguerre filter stages.

    Args:
        laguerre_df: DataFrame with columns ['L0', 'L1', 'L2', 'L3']

    Returns:
        Laguerre RSI values (0.0 to 1.0)
    """
    n = len(laguerre_df)
    rsi = np.zeros(n)

    for i in range(n):
        CU = 0.0  # Cumulative Up
        CD = 0.0  # Cumulative Down

        # Compare L0 vs L1
        if laguerre_df['L0'].iloc[i] >= laguerre_df['L1'].iloc[i]:
            CU += laguerre_df['L0'].iloc[i] - laguerre_df['L1'].iloc[i]
        else:
            CD += laguerre_df['L1'].iloc[i] - laguerre_df['L0'].iloc[i]

        # Compare L1 vs L2
        if laguerre_df['L1'].iloc[i] >= laguerre_df['L2'].iloc[i]:
            CU += laguerre_df['L1'].iloc[i] - laguerre_df['L2'].iloc[i]
        else:
            CD += laguerre_df['L2'].iloc[i] - laguerre_df['L1'].iloc[i]

        # Compare L2 vs L3
        if laguerre_df['L2'].iloc[i] >= laguerre_df['L3'].iloc[i]:
            CU += laguerre_df['L2'].iloc[i] - laguerre_df['L3'].iloc[i]
        else:
            CD += laguerre_df['L3'].iloc[i] - laguerre_df['L2'].iloc[i]

        # Calculate RSI
        rsi[i] = CU / (CU + CD) if (CU + CD) != 0 else 0.0

    return pd.Series(rsi, index=laguerre_df.index)
```

---

### Step 7: Signal/Color Classification

**Purpose**: Classify RSI values into three zones for visual coloring.

**Formula**:
```python
if RSI > level_up (default 0.85):
    signal = 1  # Bullish (DodgerBlue)
elif RSI < level_down (default 0.15):
    signal = 2  # Bearish (Tomato)
else:
    signal = 0  # Neutral (Gray)
```

**MQL5 Code** (line 301):
```mql5
// Set color based on RSI thresholds
valc[i] = (val[i]>inpLevelUp) ? 1 : (val[i]<inpLevelDown) ? 2 : 0;
```

**Python Implementation**:
```python
def classify_signal(rsi: pd.Series, level_up: float = 0.85, level_down: float = 0.15) -> pd.Series:
    """
    Classify RSI into signal zones.

    Args:
        rsi: Laguerre RSI values
        level_up: Upper threshold (default 0.85)
        level_down: Lower threshold (default 0.15)

    Returns:
        Signal classification: 0=neutral, 1=bullish, 2=bearish
    """
    signal = pd.Series(0, index=rsi.index)
    signal[rsi > level_up] = 1    # Bullish
    signal[rsi < level_down] = 2  # Bearish

    return signal
```

---

## Complete Python Implementation

### Main Function

```python
def calculate_laguerre_rsi_indicator(
    df: pd.DataFrame,
    atr_period: int = 32,
    price_type: str = 'close',
    price_smooth_period: int = 5,
    price_smooth_method: str = 'ema',
    level_up: float = 0.85,
    level_down: float = 0.15
) -> pd.DataFrame:
    """
    Calculate ATR Adaptive Smoothed Laguerre RSI.

    This indicator combines:
    1. ATR (Average True Range) for volatility measurement
    2. Adaptive period based on ATR min/max range
    3. Four-stage Laguerre filter for smooth RSI calculation

    The Laguerre RSI period adapts dynamically based on current volatility
    relative to recent min/max ATR values, making it more responsive in
    volatile markets and smoother in quiet markets.

    Args:
        df: DataFrame with columns ['open', 'high', 'low', 'close', 'volume']
        atr_period: ATR period (default 32)
        price_type: Price to use ('close', 'open', 'high', 'low', 'median', 'typical', 'weighted')
        price_smooth_period: Price smoothing period (default 5)
        price_smooth_method: Price smoothing method ('sma', 'ema', 'smma', 'lwma')
        level_up: Upper threshold for bullish signal (default 0.85)
        level_down: Lower threshold for bearish signal (default 0.15)

    Returns:
        DataFrame with columns:
        - 'laguerre_rsi': Laguerre RSI values (0.0 to 1.0)
        - 'signal': Signal classification (0=neutral, 1=bullish, 2=bearish)
        - 'adaptive_period': Adaptive period used for each bar
        - 'atr': ATR values
        - 'tr': True Range values
    """
    # Step 1: Calculate True Range
    tr = calculate_true_range(df['high'], df['low'], df['close'])

    # Step 2: Calculate ATR
    atr = calculate_atr(tr, period=atr_period)

    # Step 3: Calculate ATR min/max over lookback period
    min_atr, max_atr = calculate_atr_min_max(atr, period=atr_period)

    # Step 4: Calculate adaptive coefficient
    coeff = calculate_adaptive_coefficient(atr, min_atr, max_atr)
    adaptive_period = calculate_adaptive_period(atr_period, coeff)

    # Step 5: Get price series (with optional smoothing)
    prices = get_price_series(df, price_type, price_smooth_period, price_smooth_method)

    # Step 6: Calculate four-stage Laguerre filter
    laguerre_df = calculate_laguerre_filter(prices, adaptive_period)

    # Step 7: Calculate Laguerre RSI from filter stages
    laguerre_rsi = calculate_laguerre_rsi(laguerre_df)

    # Step 8: Classify signal
    signal = classify_signal(laguerre_rsi, level_up, level_down)

    # Return results
    return pd.DataFrame({
        'laguerre_rsi': laguerre_rsi,
        'signal': signal,
        'adaptive_period': adaptive_period,
        'atr': atr,
        'tr': tr
    }, index=df.index)
```

---

## Price Smoothing Helper

```python
def get_price_series(
    df: pd.DataFrame,
    price_type: str = 'close',
    smooth_period: int = 5,
    smooth_method: str = 'ema'
) -> pd.Series:
    """
    Get price series with optional smoothing.

    Args:
        df: DataFrame with OHLC data
        price_type: Price to use ('close', 'open', 'high', 'low', 'median', 'typical', 'weighted')
        smooth_period: Smoothing period (default 5)
        smooth_method: Smoothing method ('sma', 'ema', 'smma', 'lwma')

    Returns:
        Price series
    """
    # Get base price
    if price_type == 'close':
        prices = df['close']
    elif price_type == 'open':
        prices = df['open']
    elif price_type == 'high':
        prices = df['high']
    elif price_type == 'low':
        prices = df['low']
    elif price_type == 'median':
        prices = (df['high'] + df['low']) / 2.0
    elif price_type == 'typical':
        prices = (df['high'] + df['low'] + df['close']) / 3.0
    elif price_type == 'weighted':
        prices = (df['high'] + df['low'] + 2 * df['close']) / 4.0
    else:
        prices = df['close']

    # Apply smoothing if period > 1
    if smooth_period <= 1:
        return prices

    if smooth_method == 'sma':
        return prices.rolling(window=smooth_period).mean()
    elif smooth_method == 'ema':
        return prices.ewm(span=smooth_period, adjust=False).mean()
    elif smooth_method == 'smma':
        # Smoothed MA (SMMA) - also known as RMA
        alpha = 1.0 / smooth_period
        return prices.ewm(alpha=alpha, adjust=False).mean()
    elif smooth_method == 'lwma':
        # Linear Weighted MA
        weights = np.arange(1, smooth_period + 1)
        return prices.rolling(window=smooth_period).apply(
            lambda x: np.dot(x, weights) / weights.sum(), raw=True
        )
    else:
        return prices.ewm(span=smooth_period, adjust=False).mean()
```

---

## Validation Strategy

### Comparison with MT5 Output

1. **Export MT5 indicator values** using Wine Python script
2. **Calculate Python version** using functions above
3. **Compare with validator**:
   - Correlation ≥ 0.999
   - Mean Absolute Error < 0.1
   - Data Integrity: 100%

### Test Cases

1. **Basic Test**: EURUSD M1, 5000 bars, default parameters
2. **Parameter Variations**:
   - ATR period: 16, 32, 64
   - Price smoothing: 1, 5, 10
   - Smoothing method: SMA, EMA, SMMA
3. **Edge Cases**:
   - Low volatility (tight range)
   - High volatility (large price swings)
   - Data with gaps
   - Short history (<atr_period bars)

---

## Performance Considerations

### Computational Complexity

- **True Range**: O(n)
- **ATR**: O(n)
- **ATR Min/Max**: O(n × atr_period) with rolling window
- **Adaptive Coefficient**: O(n)
- **Laguerre Filter**: O(n) with 4 stages per bar
- **Laguerre RSI**: O(n)
- **Total**: O(n × atr_period) - dominated by min/max calculation

### Optimization Opportunities

1. **Vectorization**: Use NumPy for all calculations where possible
2. **Numba JIT**: Compile Laguerre filter loop with `@numba.jit`
3. **Efficient Rolling**: Use pandas `rolling()` for min/max instead of manual loops
4. **Caching**: Cache intermediate results (ATR, filter stages) for incremental updates

### Memory Usage

- ATR work arrays: ~1KB per 1000 bars
- Laguerre filter stages: ~32 bytes × 4 stages × bars
- For 5000 bars: ~700KB total

---

## Implementation Notes

### State Management

**MQL5 Approach**: Uses static arrays (`atrWork[]`, `laguerreWork[]`) to maintain state across OnCalculate calls.

**Python Approach**: Calculate full history in single pass, no state management needed for batch processing.

### Incremental Updates (Future Enhancement)

For real-time updates (e.g., live trading), implement class-based approach:

```python
class LaguerreRSIIndicator:
    def __init__(self, atr_period=32, ...):
        self.atr_period = atr_period
        # Initialize filter stages
        self.L0 = 0.0
        self.L1 = 0.0
        self.L2 = 0.0
        self.L3 = 0.0
        # ATR state
        self.tr_history = []
        self.atr = 0.0
        # ...

    def update(self, high, low, close):
        """Incremental update with new bar data (O(1))"""
        # Update TR
        # Update ATR
        # Update filter stages
        # Return new RSI value
        pass

    def calculate_batch(self, df):
        """Full batch calculation (O(n))"""
        # Use vectorized functions
        pass
```

---

## Dependencies

```python
import numpy as np
import pandas as pd
```

**Optional Performance Enhancements**:
```python
import numba  # For JIT compilation of hot paths
```

---

## Integration with Wine Python Export Script

### File Structure

```
python/indicators/
├── __init__.py
├── base.py              # Base indicator class (if using class-based approach)
├── atr.py               # ATR calculation (reusable)
├── laguerre_rsi.py      # Laguerre RSI indicator
└── utils.py             # Helper functions (price series, smoothing)
```

### Update export_aligned.py

```python
# Add at top
from indicators.laguerre_rsi import calculate_laguerre_rsi_indicator

# Add CLI argument
parser.add_argument(
    '--laguerre-atr-period',
    type=int,
    default=32,
    help='Laguerre RSI ATR period (default: 32)'
)

# Calculate indicator after OHLC fetch
result_df = calculate_laguerre_rsi_indicator(
    df,
    atr_period=args.laguerre_atr_period,
    price_type='close',
    price_smooth_period=5,
    price_smooth_method='ema'
)

# Add to export
df['laguerre_rsi'] = result_df['laguerre_rsi']
df['laguerre_signal'] = result_df['signal']

# Update CSV columns
export_df = df[['time', 'open', 'high', 'low', 'close', 'tick_volume', 'rsi', 'laguerre_rsi']].copy()
export_df.columns = ['Time', 'Open', 'High', 'Low', 'Close', 'Volume', 'RSI', 'Laguerre_RSI']
```

---

## Next Steps

1. **Implement Python Functions**: Create `python/indicators/laguerre_rsi.py` with all functions above
2. **Unit Tests**: Test each component (TR, ATR, filter, RSI) independently
3. **Integration**: Add to Wine Python export script
4. **Validation**: Export data and compare with MT5 indicator output
5. **Documentation**: Update project memory with results

---

## References

- **Source File**: `/Users/terryli/Library/Application Support/CrossOver/Bottles/MetaTrader 5/drive_c/Program Files/MetaTrader 5/MQL5/Indicators/Custom/ATR adaptive smoothed Laguerre RSI 2 (extended).mq5`
- **Encoding Solutions**: `MQL5_ENCODING_SOLUTIONS.md ` - UTF-16LE handling
- **Wine Python Execution**: `WINE_PYTHON_EXECUTION.md ` - v3.0.0 workflow
- **MT5 File Locations**: `MT5_FILE_LOCATIONS.md ` - File structure reference

---

**Last Updated**: 2025-10-13
**Status**: Analysis complete, ready for Python implementation
