# MQL5 Article Scraping - Production Guide

## 🎯 Objective
Scrape 77 MQL5 trading articles with elegant formatting, local images, and proper MQL5 syntax highlighting for seq-2-seq model training.

## 🚀 Production Solution

### Complete Workflow
```bash
# Step 1: Discover all 77 articles (requires browser automation)
uvx --with playwright python browser_scraper.py

# Step 2: Extract all discovered articles
uvx --with beautifulsoup4 --with html2text --with requests python extract_all_77_articles.py
```

### Key Data Files
- **`browser_urls.txt`** - All 77 discovered article URLs via browser automation
- **`browser_scraper.py`** - Playwright-based URL discovery (clicks "66 more..." link)
- **`extract_all_77_articles.py`** - Production extraction script

## 🔧 Technical Implementation

### Critical Discovery Method
**Browser automation is required** - the "66 more..." link loads additional articles via JavaScript:
```bash
# Browser automation discovers all 77 URLs
uvx --with playwright python browser_scraper.py
```

### Content Extraction Features
- **HTML-based MQL5 detection**: Uses `<pre class="code">` tags for 100% accuracy
- **Fixed external links**: Resolves redirects and malformed URLs
- **Local image download**: Automatic subfolder organization
- **Elegant formatting**: BeautifulSoup + html2text configuration

## 📁 Output Structure
```
all_articles/
├── article-19625/
│   ├── article.md          # Clean markdown with MQL5 syntax highlighting
│   └── images/             # All images downloaded locally
├── article-14261/          # Older articles (IDs 14261-19625)
│   ├── article.md
│   └── images/
└── all_articles_summary.json  # Complete processing statistics
```

## 📊 Production Results
- **Total Articles**: 77 technical articles
- **Content Quality**: Clean markdown with proper formatting
- **MQL5 Code Blocks**: Perfect syntax highlighting (````mql5`)
- **External Links**: All properly formatted (harmonictrader.com, wikipedia.org, etc.)
- **Local Images**: Complete download with local paths
- **File Organization**: One subfolder per article

## 🎯 Usage Examples

### Standard Production Run
```bash
# Discover all 77 articles
uvx --with playwright python browser_scraper.py

# Extract all articles
uvx --with beautifulsoup4 --with html2text --with requests python extract_all_77_articles.py

# Check results
ls all_articles/
cat all_articles_summary.json
```

### Quality Verification
```bash
# Check MQL5 syntax highlighting
grep -c "```mql5" all_articles/article-*/article.md

# Check local images
find all_articles/ -name "*.png" -o -name "*.jpg" | wc -l

# Verify all 77 articles extracted
ls all_articles/ | wc -l
```

## 🔑 Key Configuration
- **Target**: `div.content` selector for article content
- **MQL5 Detection**: HTML `<pre class="code">` elements
- **Image Processing**: Automatic download with `images/` subfolder
- **Link Fixes**: Redirect resolution and angle bracket cleanup
- **Batch Size**: 15-20 URLs recommended for stability

## 📚 Data Source
- **Source URL**: https://www.mql5.com/en/users/29210372/publications
- **Content Type**: Technical MQL5 trading strategy articles
- **Total Volume**: ~400,000+ words of technical content
- **Use Case**: Training data for algorithmic trading seq-2-seq models