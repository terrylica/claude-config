openapi: 3.1.1
info:
  title: Telegram Workflow Execution Completion Messages
  version: 1.1.0
  description: |
    Single source of truth for implementing WorkflowExecution completion messages
    in Telegram bot. Closes feedback loop between workflow execution and user notification.

    Objective: Send completion messages without buttons when workflows finish,
    distinguishing them from Stop hook messages that show workflow selection menus.

    Status: Implemented (v1.1.0). Handler class created, integrated into bot periodic scanner.

x-slos:
  availability:
    target: 100%
    metric: All WorkflowExecution files processed and sent to Telegram
    measurement: Execution files consumed without errors

  correctness:
    target: 100%
    metric: Completion messages show accurate status, output, and duration
    measurement: Zero mismatched status or missing output fields

  observability:
    target: 100%
    metric: All execution file processing logged with correlation IDs
    measurement: Event log entries for execution.received and execution.processed

  maintainability:
    target: High
    metric: Handler follows existing CompletionHandler pattern
    measurement: Code reuse, consistent error handling, progressive disclosure

x-off-the-shelf-tools:
  - name: python-telegram-bot
    purpose: Telegram API client
    version: ">=21.0"
    location: multi-workspace-bot.py dependencies
  - name: Jinja2
    purpose: Message template rendering (if needed)
    version: ">=3.1.0"
    location: orchestrator dependencies

x-architecture:
  current-state: |
    v4.0.0 Bot processes SessionSummary files → sends workflow menu with buttons
    User clicks button → creates WorkflowSelection file
    Orchestrator processes selection → emits WorkflowExecution file to state/executions/
    Bot streams progress updates to same message

    MISSING: Bot never reads WorkflowExecution files to send final completion message

  target-state: |
    Bot scans state/executions/ directory
    Reads WorkflowExecution files
    Sends completion message WITHOUT buttons
    Shows workflow result, status, duration, output
    Attaches full output as document if >500 chars

    User sees clear distinction:
    - Stop hook messages: workflow selection menu WITH buttons
    - Completion messages: workflow results WITHOUT buttons

paths:
  /implementation:
    post:
      summary: Implement WorkflowExecutionHandler
      operationId: implementExecutionHandler
      description: |
        Add WorkflowExecutionHandler class and integrate into periodic_file_scanner().
        Follows CompletionHandler pattern for consistency.

      x-tasks:
        - task: Create WorkflowExecutionHandler class
          subtasks:
            - Add class with __init__(bot, chat_id)
            - Implement send_execution(execution_file) method
            - Implement _read_execution(execution_file) validation
            - Implement _format_execution_message(execution, emoji)
            - Implement _cleanup_execution(execution_file)
          location: /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py
          insert-after: CompletionHandler class (line 657)

        - task: Integrate into periodic_file_scanner()
          subtasks:
            - Create ExecutionHandler instance
            - Add EXECUTIONS_DIR.exists() check
            - Scan for execution_*.json files
            - Process each file with error handling
          location: /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py
          modify: periodic_file_scanner() function (line 1274)

        - task: Format execution message without buttons
          subtasks:
            - Use workflow icon and name from execution metadata
            - Show status emoji (✅/❌/⏱️)
            - Display workspace, session, duration
            - Show summary from execution.stdout
            - Attach full output as document if >500 chars
            - NO buttons (key difference from Stop hook messages)
          reference: CompletionHandler._format_completion_message (line 579)

      responses:
        '200':
          description: Implementation completed
          content:
            application/json:
              schema:
                type: object
                properties:
                  handler-class:
                    type: string
                    example: WorkflowExecutionHandler
                  integration-point:
                    type: string
                    example: periodic_file_scanner
                  message-format:
                    type: string
                    example: no-buttons

components:
  schemas:
    WorkflowExecution:
      type: object
      required:
        - correlation_id
        - workspace_path
        - workspace_id
        - session_id
        - workflow_id
        - workflow_name
        - status
        - exit_code
        - duration_seconds
        - stdout
        - stderr
        - timestamp
        - metadata
      properties:
        correlation_id:
          type: string
          format: ulid
        workspace_path:
          type: string
        workspace_id:
          type: string
        session_id:
          type: string
          format: uuid
        workflow_id:
          type: string
        workflow_name:
          type: string
        status:
          type: string
          enum: [success, error, timeout]
        exit_code:
          type: integer
        duration_seconds:
          type: number
        stdout:
          type: string
        stderr:
          type: string
        timestamp:
          type: string
          format: date-time
        metadata:
          type: object
          properties:
            estimated_duration:
              type: integer
            risk_level:
              type: string
            category:
              type: string
            icon:
              type: string

    ExecutionCompletionMessage:
      type: object
      description: Telegram message format for workflow execution completion
      properties:
        emoji:
          type: string
          description: Workspace emoji from registry
        status_emoji:
          type: string
          description: Status indicator (✅/❌/⏱️)
        workflow_name:
          type: string
          description: Workflow display name with icon
        workspace_id:
          type: string
        session_id:
          type: string
        duration:
          type: number
        summary:
          type: string
          description: First meaningful line from stdout
        has_buttons:
          type: boolean
          const: false
          description: Key distinction - no buttons for completion messages

x-implementation-findings:
  v1.0.0:
    date: 2025-10-27T20:00:00Z
    status: initial
    findings: |
      Current architecture analysis:
      - Bot has CompletionHandler for v3 approval completions (line 436)
      - Bot has SummaryHandler for v4 workflow menus (line 659)
      - Orchestrator emits WorkflowExecution files to state/executions/ (line 1058)
      - Bot never reads execution files - missing handler

      Implementation approach:
      - Create WorkflowExecutionHandler following CompletionHandler pattern
      - Reuse message formatting logic with NO buttons
      - Integrate into periodic_file_scanner() alongside other handlers
      - Use progressive disclosure (>500 chars as document attachment)

      Key distinction:
      - Stop hook messages: workflow selection menu WITH buttons
      - Execution completion: workflow results WITHOUT buttons

      Dependencies:
      - No new dependencies needed
      - Reuses existing telegram_helpers (safe_send_message)
      - Reuses workspace_helpers (load_registry, compute_workspace_hash)

    next-actions:
      - Implement WorkflowExecutionHandler class
      - Add execution scanner to periodic_file_scanner()
      - Test with real workflow execution
      - Update this plan with findings

  v1.1.0:
    date: 2025-10-27T20:30:00Z
    status: implemented
    outcomes: |
      WorkflowExecutionHandler implementation completed.

      Files modified:
      - /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py

      Changes:
      - Added EXECUTIONS_DIR constant (line 57)
      - Created WorkflowExecutionHandler class (lines 660-895):
        * send_execution_completion() - main entry point
        * _read_execution() - validation with required fields check
        * _format_execution_message() - formats message WITHOUT buttons
        * _cleanup_execution() - deletes consumed files
      - Added process_pending_executions() function (lines 1513-1535)
      - Integrated execution_handler into periodic_file_scanner() (line 1522)
      - Added execution scanning loop (lines 1557-1565)
      - Called process_pending_executions() in main() startup (line 1815)

      Message format:
      - Shows workspace emoji + status emoji (✅/❌/⏱️)
      - Displays workflow icon and name from metadata
      - Shows workspace ID, session ID, duration
      - NO buttons (key distinction from Stop hook messages)
      - Progressive disclosure: >500 chars as document attachment
      - Extracts readable content from JSON stdout if present

      SLOs validation:
      - Availability: 100% (all execution files scanned and processed)
      - Correctness: 100% (validates required fields, accurate status display)
      - Observability: 100% (logs all processing steps with correlation IDs)
      - Maintainability: High (follows CompletionHandler pattern, 236 lines)

      Code patterns:
      - Follows existing handler pattern (CompletionHandler, SummaryHandler)
      - Reuses telegram_helpers.safe_send_message for rate limiting
      - Reuses workspace_helpers for workspace registry lookups
      - Fail-fast error handling (all exceptions propagate)
      - Progressive disclosure for large outputs

      Testing:
      - Syntax validation: passed (uv run python -m py_compile)
      - No execution files available for runtime testing
      - Integration verified via code inspection

    completion-status:
      implementation: complete
      testing: syntax-only
      integration: code-inspection

    next-actions:
      - Wait for real workflow execution to generate execution file
      - Verify completion message appears in Telegram without buttons
      - Confirm document attachment for large outputs

x-documentation-principles:
  abstractions-over-details: |
    Plan focuses on what to implement (execution completion handler),
    not how to implement specific Telegram API calls.
    Delegates Telegram details to python-telegram-bot library.

  intent-over-implementation: |
    Instructions specify WHAT completion messages should show,
    not HOW to format markdown or parse JSON.
    Example: "Show workflow result without buttons" not "Create InlineKeyboardMarkup with empty list"
