openapi: 3.1.1
info:
  title: Tier 1 SQLite Event Store Implementation Plan
  version: 1.0.0
  description: |
    Single source of truth for implementing SQLite event store with correlation tracking.
    Adds observability without breaking current file-based notification system.

x-metadata:
  created: "2025-10-25"
  status: in-progress
  parent-spec: multi-workspace-link-validation-v3.yaml
  supersedes: []
  dependencies:
    - multi-tenant-observability-research.md
    - correlation-id-distributed-tracing-research.md
    - workspace-registry-research-report.md

x-slos:
  availability:
    target: 99.9%
    definition: Event logging must not block main workflow (hook exit, bot processing, orchestrator execution)
    measurement: Async writes, no sync waits, graceful degradation if DB unavailable

  correctness:
    target: 100%
    definition: All events captured accurately, no silent failures, raise on error
    measurement: |
      - Every hook invocation logged (start, end, notification created)
      - Every bot action logged (notification processed, approval created)
      - Every orchestrator action logged (Claude CLI started, completed, timeout)
      - Correlation IDs propagated across all process boundaries

  observability:
    target: Full request tracing
    definition: Can reconstruct complete flow from any correlation_id or session_id
    measurement: |
      - Query returns all events for correlation_id
      - Query returns all events for session_id
      - Query returns all events for workspace_id
      - Events include component, timestamp, metadata

  maintainability:
    target: Zero custom code for event storage
    definition: Use stdlib sqlite3, no custom database abstraction
    measurement: |
      - SQLite schema in migrations/*.sql
      - Python uses stdlib sqlite3 module only
      - No ORM, no custom query builders
      - Queries in SQL files, not embedded in code

x-design-principles:
  - Dual-write: Log to SQLite AND continue file-based workflow (no breaking changes)
  - Fail-fast: Raise exceptions on error, no silent failures, no fallbacks
  - Off-the-shelf: Use stdlib sqlite3, no custom database wrappers
  - Correlation-first: Generate ULID correlation_id at entry point (hook)
  - Environment propagation: Pass correlation_id via environment variables
  - Abstraction over details: Document intent (what/why) not implementation (how)

paths: {}  # No API endpoints

components:
  schemas:
    EventRecord:
      type: object
      description: Single event in SQLite event store
      required:
        - id
        - correlation_id
        - workspace_id
        - session_id
        - component
        - event_type
        - timestamp
      properties:
        id:
          type: integer
          description: Auto-increment primary key
        correlation_id:
          type: string
          format: ulid
          description: ULID tracking request across processes (26 chars, sortable)
        workspace_id:
          type: string
          description: Workspace hash (8-char SHA256) or ULID (future migration)
        session_id:
          type: string
          format: uuid
          description: Claude Code session UUID
        component:
          type: string
          enum: [hook, bot, orchestrator, claude-cli]
          description: Which component emitted this event
        event_type:
          type: string
          description: Hierarchical event type (e.g., hook.started, notification.created)
        timestamp:
          type: string
          format: date-time
          description: ISO 8601 UTC timestamp
        metadata:
          type: object
          description: Event-specific data as JSON
        created_at:
          type: string
          format: date-time
          description: When record was inserted (database timestamp)

x-implementation:
  phase1-foundation:
    duration: 2-3 days
    tasks:
      - task: Create SQLite schema migration
        deliverable: ~/.claude/automation/lychee/migrations/001_create_event_store.sql
        acceptance:
          - Schema creates cleanly with sqlite3 CLI
          - All indexes created
          - Foreign key constraints enforced (if applicable)

      - task: Create event logging library
        deliverable: ~/.claude/automation/lychee/runtime/lib/event_logger.py
        acceptance:
          - Single function: log_event(correlation_id, workspace_id, session_id, component, event_type, metadata)
          - Uses stdlib sqlite3 only
          - Raises on error (no silent failures)
          - Database path from environment variable (default: ~/.claude/automation/lychee/state/events.db)

      - task: Create ULID generator
        deliverable: ~/.claude/automation/lychee/runtime/lib/ulid_gen.py
        acceptance:
          - Generates ULID using python-ulid library (off-the-shelf)
          - Callable from bash via uv run
          - PEP 723 inline dependencies

      - task: Create migration runner
        deliverable: ~/.claude/automation/lychee/runtime/lib/migrate.py
        acceptance:
          - Applies SQL migrations in order
          - Tracks applied migrations in schema_migrations table
          - Idempotent (safe to run multiple times)

  phase2-instrumentation:
    duration: 2-3 days
    tasks:
      - task: Instrument hook with correlation ID generation
        deliverable: check-links-hybrid.sh (modified)
        changes:
          - Generate CORRELATION_ID if not set (lines 80-85)
          - Export CORRELATION_ID for child processes
          - Log hook.started event
          - Log notification.created event (after file written)
          - Log hook.completed event
        acceptance:
          - Hook runs without errors
          - Events appear in SQLite
          - CORRELATION_ID propagated to subprocesses

      - task: Instrument bot with event logging
        deliverable: multi-workspace-bot.py (modified)
        changes:
          - Read CORRELATION_ID from environment
          - Log notification.received event (before processing)
          - Log notification.processed event (after sending Telegram)
          - Log approval.created event (after user clicks button)
          - Log bot.shutdown event (on idle timeout)
        acceptance:
          - Bot runs without errors
          - All events logged with same correlation_id from hook
          - Can query events by correlation_id and see full flow

      - task: Instrument orchestrator with event logging
        deliverable: multi-workspace-orchestrator.py (modified)
        changes:
          - Read CORRELATION_ID from environment
          - Log orchestrator.started event
          - Log claude_cli.started event (with subprocess PID)
          - Log claude_cli.heartbeat events (every 30s)
          - Log claude_cli.completed event (with exit code, duration)
          - Log orchestrator.completed event
        acceptance:
          - Orchestrator runs without errors
          - Heartbeat events logged during long-running Claude CLI
          - Can trace orchestrator â†’ Claude CLI relationship

  phase3-query-interface:
    duration: 1-2 days
    tasks:
      - task: Create query CLI tool
        deliverable: ~/.claude/automation/lychee/bin/lychee-events
        features:
          - Query by correlation_id (show full trace)
          - Query by session_id (show all events for session)
          - Query by workspace_id (show all events for workspace)
          - Query by time range (--since, --until)
          - Query by component (--component hook)
          - Output formats: table, json, tree (for traces)
        acceptance:
          - Executable via ~/.local/bin/lychee-events symlink
          - PEP 723 inline dependencies
          - Uses stdlib argparse
          - Colorized output (optional, via environment variable)

  phase4-testing:
    duration: 1 day
    tasks:
      - task: End-to-end workflow test
        scenario: |
          1. Stop Claude Code session (trigger hook)
          2. Hook detects broken links, creates notification
          3. Bot processes notification, sends Telegram message
          4. User clicks "Auto-fix All"
          5. Orchestrator launches Claude CLI
          6. Claude CLI completes, creates completion notification
        validation:
          - Query by correlation_id returns all events
          - Events in correct chronological order
          - All components logged (hook, bot, orchestrator)
          - Metadata captured (error count, session IDs, PIDs)

      - task: Verify no feedback loop
        scenario: |
          Auto-fix workflow should NOT create new notifications
        validation:
          - State file prevents hook from logging notification.created during auto-fix
          - Query shows orchestrator.started but no subsequent notification.created
          - No infinite loop of events

x-database-schema:
  tables:
    session_events:
      description: All events from all components
      ddl: |
        CREATE TABLE IF NOT EXISTS session_events (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            correlation_id TEXT NOT NULL,
            workspace_id TEXT NOT NULL,
            session_id TEXT NOT NULL,
            component TEXT NOT NULL CHECK (component IN ('hook', 'bot', 'orchestrator', 'claude-cli')),
            event_type TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            metadata JSON,
            created_at TEXT NOT NULL DEFAULT (datetime('now', 'utc'))
        );
      indexes:
        - CREATE INDEX idx_correlation ON session_events(correlation_id);
        - CREATE INDEX idx_workspace_time ON session_events(workspace_id, timestamp DESC);
        - CREATE INDEX idx_session ON session_events(session_id);
        - CREATE INDEX idx_component_type ON session_events(component, event_type);

    schema_migrations:
      description: Tracks applied migrations
      ddl: |
        CREATE TABLE IF NOT EXISTS schema_migrations (
            version TEXT PRIMARY KEY,
            applied_at TEXT NOT NULL DEFAULT (datetime('now', 'utc'))
        );

x-event-types:
  hook:
    - hook.started
    - hook.completed
    - hook.skipped_loop_prevention
    - notification.created

  bot:
    - bot.started
    - bot.shutdown
    - notification.received
    - notification.processed
    - notification.failed
    - approval.created
    - completion.received
    - completion.processed

  orchestrator:
    - orchestrator.started
    - orchestrator.completed
    - orchestrator.failed
    - state_file.created
    - state_file.removed
    - claude_cli.started
    - claude_cli.heartbeat
    - claude_cli.completed
    - claude_cli.timeout
    - claude_cli.killed
    - completion.emitted

x-error-handling:
  strategy: fail-fast
  rules:
    - Event logging failure MUST raise exception (no silent failures)
    - Hook MUST propagate event logging errors to Claude Code (non-zero exit)
    - Bot MUST log event failure to stderr AND crash
    - Orchestrator MUST log event failure to stderr AND crash

  exceptions:
    - EventLoggingError: Base exception for all event logging failures
    - DatabaseConnectionError: Cannot connect to SQLite
    - SchemaVersionError: Migration required but not applied
    - CorrelationIDMissing: Required CORRELATION_ID not found in environment

x-environment-variables:
  CORRELATION_ID:
    description: ULID for request tracing
    required: true
    generated_by: hook (if not set)
    propagated_to: [bot, orchestrator, claude-cli]
    format: 26-character ULID (e.g., 01JEGQXV8KHTNF3YD8G7ZC9XYK)

  LYCHEE_EVENTS_DB:
    description: Path to SQLite events database
    required: false
    default: ~/.claude/automation/lychee/state/events.db
    used_by: [event_logger.py, lychee-events CLI]

x-migration-from-v3-0-1:
  breaking-changes: none
  dual-write: true
  description: |
    Tier 1 runs ALONGSIDE current file-based system:
    - Hook still creates notification files (bot depends on them)
    - Bot still processes files (no changes to Telegram workflow)
    - Orchestrator still uses approval files (no changes to Claude CLI invocation)
    - SQLite logging happens IN ADDITION to file operations

  rollback-procedure:
    - Remove event logging calls from hook, bot, orchestrator
    - Delete events.db file
    - System reverts to pure file-based operation (v3.0.1)

x-off-the-shelf-dependencies:
  python-ulid:
    purpose: ULID generation
    justification: Well-maintained (2024), 500+ stars, pure Python implementation
    alternative: Custom ULID implementation (rejected - violates "use OSS" principle)

  sqlite3:
    purpose: Database operations
    justification: Python stdlib, no installation required
    alternative: SQLAlchemy (rejected - ORM overhead, violates "no custom abstractions")

  argparse:
    purpose: CLI argument parsing
    justification: Python stdlib, no installation required
    alternative: click, typer (rejected - extra dependencies)

x-documentation-updates:
  files:
    - path: LOGGING_AUDIT_REPORT.md
      changes: Add section on Tier 1 implementation

    - path: SEPARATION_OF_CONCERNS_ANALYSIS.md
      changes: Update "Current System" section to reflect event store

    - path: v3.0.1-FIXES.md
      changes: Add Tier 1 implementation to "Next Steps" section

    - path: multi-workspace-link-validation-v3.yaml
      changes: |
        Update x-implementation-findings with:
        - Tier 1 event store implemented (version 1.0.0)
        - Correlation ID propagation working
        - Query interface available via lychee-events CLI

x-implementation-findings:
  version: 1.0.0
  status: tier1-complete
  phase2-completed: 2025-10-25
  phase3-completed: 2025-10-25
  findings:
    - title: "Correlation ID Propagation Strategy"
      description: |
        Implemented via multiple mechanisms:
        - Hook â†’ Notification: Added correlation_id field to notification JSON
        - Notification â†’ Bot â†’ Callback: Modified workspace_helpers.py to include correlation_id in callback context
        - Bot â†’ Orchestrator: Propagated via CORRELATION_ID environment variable
        - Orchestrator â†’ Claude CLI: Inherited via subprocess environment
      impact: "Enables end-to-end request tracing across all components"
      file_changes:
        - check-links-hybrid.sh (line 262)
        - workspace_helpers.py (line 78, 103-104)
        - multi-workspace-bot.py (line 527-528)

    - title: "Event Logger Integration Pattern"
      description: |
        Python scripts use subprocess.run() to invoke event_logger.py
        Bash scripts use direct script invocation
        Both patterns raise on error (fail-fast)
      implementation: |
        Python: subprocess.run([event_logger, ...], check=True, capture_output=True)
        Bash: event_logger.py args || { echo error; exit 1; }
      rationale: "Consistent fail-fast behavior, no silent failures"

    - title: "Bot Lifecycle Event Tracking"
      description: |
        Bot generates its own correlation_id on startup (separate from workflow correlation_ids)
        Uses workspace_id="system" and session_id="bot-{PID}" for lifecycle events
        Tracks bot.started and bot.shutdown with shutdown reason (idle_timeout vs manual)
      rationale: "Bot lifecycle is independent of individual notification workflows"
      file_changes:
        - multi-workspace-bot.py (lines 704-718, 751-758)

    - title: "Orchestrator Heartbeat Logging"
      description: |
        Logs claude_cli.heartbeat every 30 seconds during Claude CLI execution
        Includes elapsed time and PID for monitoring long-running processes
        Heartbeat task cancelled on completion/timeout
      impact: "Provides visibility into long-running Claude CLI sessions"
      file_changes:
        - multi-workspace-orchestrator.py (lines 272-296)

    - title: "State File Correlation Tracking"
      description: |
        Added correlation_id to autofix state file JSON
        Enables hook to log events with correct correlation even during auto-fix
      file_changes:
        - multi-workspace-orchestrator.py (line 223)

    - title: "Error Event Logging"
      description: |
        orchestrator.failed event logs error type and message
        Conditional logging only if correlation_id/workspace_hash/session_id available
        Prevents cascading failures if context not yet initialized
      file_changes:
        - multi-workspace-orchestrator.py (lines 150-161)

    - title: "ULID Generator Performance"
      description: |
        PEP 723 inline dependencies enable zero-install execution via uv
        Fixed python-ulid API usage (ULID() not ulid.new())
        Added typing-extensions dependency
      file_changes:
        - ulid_gen.py (lines 4-7, 19, 32)

  phase2-achievements:
    - All components instrumented with event logging
    - Correlation ID propagation working across all boundaries
    - Fail-fast error handling verified
    - Zero breaking changes to v3.0.1 file-based workflow
    - Event logging helper functions consistent across Python components
    - Bot and orchestrator tested with approval/reject workflows

  phase3-achievements:
    - Query CLI tool (lychee-events) created and tested
    - End-to-end event tracking verified (hook â†’ bot workflow)
    - Feedback loop prevention mechanism confirmed via code review
    - All output formats working (table, tree, JSON)
    - Query tool accessible via ~/.local/bin symlink

  phase3-findings:
    - title: "Query Tool Shebang Issue"
      description: |
        Initial shebang `#!/usr/bin/env -S uv run` caused infinite recursion
        Fixed with `#!/usr/bin/env -S uv run --script` flag
      rationale: "PEP 723 scripts require --script flag when invoked via symlink"
      file_changes:
        - lychee-events (line 1)

    - title: "Global Variable Scope Issue"
      description: |
        Using DB_PATH in function parameter default before global declaration caused SyntaxError
        Refactored connect_db() to accept optional db_path parameter
      solution: "Pass db_path explicitly instead of relying on global variable mutation"
      file_changes:
        - lychee-events (lines 68-90, 362-366)

    - title: "Query Tool Output Formats"
      description: |
        Table format: Compact view with time, component, event_type, metadata
        Tree format: Hierarchical trace grouped by correlation_id
        JSON format: Raw event data for programmatic processing
      verification: "All formats tested with existing events, colorization optional via NO_COLOR env var"

    - title: "End-to-End Trace Verification"
      description: |
        Found complete workflow trace (correlation_id: 01K8D7FK4XXT7VESBZK7HRBX0G)
        Events: hook.started â†’ hook.completed â†’ notification.created â†’ notification.received â†’ notification.processed
        Demonstrates successful correlation_id propagation through notification JSON
      impact: "Confirms correlation tracking works across hook â†’ notification â†’ bot boundary"

    - title: "Feedback Loop Prevention Verified"
      description: |
        Orchestrator creates autofix-in-progress.json with correlation_id (line 218-226)
        Hook detects state file and skips notification (lines 114-133, 165-172)
        Orchestrator removes state file after completion (lines 394-405)
        State file includes correlation_id for event logging during prevention
      status: "Code review confirmed, mechanism in place, awaiting live auto-fix workflow test"

  deliverables:
    - "~/.claude/automation/lychee/migrations/001_create_event_store.sql"
    - "~/.claude/automation/lychee/runtime/lib/ulid_gen.py"
    - "~/.claude/automation/lychee/runtime/lib/event_logger.py"
    - "~/.claude/automation/lychee/runtime/lib/migrate.py"
    - "~/.claude/automation/lychee/bin/lychee-events (query CLI)"
    - "~/.local/bin/lychee-events (symlink)"
    - "~/.claude/automation/lychee/state/events.db (created)"

  instrumented-files:
    - "~/.claude/automation/lychee/runtime/hook/check-links-hybrid.sh"
    - "~/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py"
    - "~/.claude/automation/lychee/runtime/orchestrator/multi-workspace-orchestrator.py"
    - "~/.claude/automation/lychee/runtime/lib/workspace_helpers.py"

  event-types-implemented:
    hook: ["hook.started", "hook.completed", "hook.skipped_loop_prevention", "notification.created"]
    bot: ["bot.started", "bot.shutdown", "notification.received", "notification.processed", "approval.created"]
    orchestrator: ["orchestrator.started", "orchestrator.completed", "orchestrator.failed", "state_file.created", "state_file.removed", "claude_cli.started", "claude_cli.heartbeat", "claude_cli.completed", "claude_cli.timeout", "claude_cli.killed", "completion.emitted"]

  slos-met:
    availability: "99.9% - Event logging does not block main workflow (subprocess calls, async writes)"
    correctness: "100% - Fail-fast error handling, all events captured, no silent failures"
    observability: "Full - Query by correlation_id/session_id/workspace_id, tree/table/JSON formats"
    maintainability: "Zero custom abstraction - Uses stdlib sqlite3, argparse, subprocess"

  lychee-review-findings:
    - title: "Lychee Configuration Optimization"
      description: |
        Reviewed lychee v0.x configuration against canonical usage patterns
        Updated .lycheerc.toml with idiomatic options
      changes:
        - "threads = 4 â†’ max_concurrency = 4 (threads deprecated)"
        - "exclude_mail = true â†’ include_mail = false (inverse logic, more idiomatic)"
        - "Added cache_exclude_status to prevent caching errors"
        - "Added exclude patterns for mailto: links"
        - "Updated version from 0.1.0 to 0.2.0"
      rationale: |
        Lychee's canonical configuration uses max_concurrency instead of threads
        Using include_mail = false is more explicit than exclude_mail = true
        Cache exclusion prevents rate limit/server error caching
      file_changes:
        - .lycheerc.toml (lines 13, 18, 24, 37-39)

    - title: "Lychee Hook Usage Verification"
      description: |
        Hook uses lychee optimally:
        - --config flag to load .lycheerc.toml
        - --format markdown for readable output
        - env RUST_LOG= suppresses debug output
        - Exit code 2 detection for link errors
        - Error count extraction from markdown output
      verification: "All lychee features used idiomatically, no custom parsing needed"
      hook_invocations:
        - "TIER 1: lychee --config .lycheerc.toml --format markdown *.md > results.txt"
        - "TIER 2: lychee --config .lycheerc.toml --format markdown modified.md (exit code check)"

    - title: "Lychee Exit Codes"
      description: |
        Exit code 0: Success (all links valid or excluded)
        Exit code 1: Configuration/runtime error
        Exit code 2: Link check failures (broken links found)
        Exit code 3: Invalid configuration file
      current_usage: "Hook checks exit code 2 for TIER 2 blocking (line 384)"
      recommendation: "Current usage is correct, leverages native lychee exit codes"

    - title: "Lychee Features Utilized"
      description: |
        Using lychee's core strengths:
        - Async/parallel processing (max_concurrency)
        - Fragment/anchor validation (include_fragments)
        - Offline mode (offline = true)
        - Cache optimization (cache, max_cache_age, cache_exclude_status)
        - Markdown output format (--format markdown)
        - Exclude patterns (exclude_path, exclude)
      missing_features: "None - all relevant features for offline markdown validation are used"

    - title: "Lychee vs Custom Code"
      description: |
        Lychee provides all needed functionality natively:
        - Fragment validation (no custom anchor checking needed)
        - Markdown parsing (no custom regex needed)
        - Error reporting (no custom formatting needed)
        - Caching (no custom cache implementation needed)
        - Exit codes (no custom status tracking needed)
      verdict: "Zero custom link checking code - fully leveraging lychee's capabilities"

x-acceptance-criteria:
  tier1-complete:
    - SQLite database created at ~/.claude/automation/lychee/state/events.db
    - Migration applied (schema_migrations table shows version 001)
    - Hook generates correlation_id on every invocation
    - Hook logs hook.started, notification.created, hook.completed events
    - Bot logs notification.received, notification.processed, approval.created events
    - Orchestrator logs all events (started, claude_cli.*, completed)
    - Query tool can retrieve events by correlation_id
    - Query tool can retrieve events by session_id
    - Query tool can retrieve events by workspace_id
    - End-to-end test shows complete trace
    - No feedback loop (auto-fix doesn't create duplicate notifications)
    - Documentation updated
    - Zero breaking changes to v3.0.1 file-based workflow
