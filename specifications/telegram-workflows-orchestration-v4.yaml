openapi: 3.1.1
info:
  title: Telegram Workflows Orchestration System
  version: 4.0.0
  description: |
    Generic Telegram-based workflow orchestration with Claude CLI integration.
    Elevates Telegram notifications to primary orchestration layer, with lychee
    link checking as one of many possible workflows.

    **Key Changes from v3.0.1**:
    - Session summaries always sent (even 0 errors)
    - Workflow registry system (dynamically loaded)
    - Hybrid UI (preset buttons + custom prompts)
    - Smart orchestration (dependency resolution)
    - Multi-workflow support

  x-architecture:
    primary-layer: "Telegram Notifications"
    secondary-layers:
      - "Lychee Link Checking"
      - "Code Housekeeping"
      - "Documentation Quality"
      - "Variable Renaming"
      - "Custom Workflows"
    bot-lifecycle: "On-demand with 10-minute idle timeout"
    correlation: "ULID-based distributed tracing"
    storage: "SQLite event store"

  x-design-principles:
    - "Fail-fast error handling (no silent failures)"
    - "Abstractions over details"
    - "Single source of truth"
    - "Off-the-shelf OSS (no NIH)"
    - "SLOs: availability, correctness, observability, maintainability"

components:
  schemas:
    SessionSummary:
      type: object
      description: |
        Summary emitted by stop hook on every session stop, regardless of
        validation results. Provides context for user to choose workflows.
      required:
        - correlation_id
        - workspace_path
        - workspace_id
        - session_id
        - timestamp
        - duration_seconds
        - git_status
        - lychee_status
      properties:
        correlation_id:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
          description: "ULID for distributed tracing"
          example: "01K8E91BQ8ZHVG4QZAPB3B4Q8W"

        workspace_path:
          type: string
          format: path
          description: "Absolute path to workspace"
          example: "/Users/terryli/.claude"

        workspace_id:
          type: string
          pattern: '^[a-z0-9-]+$'
          description: "Workspace identifier from registry"
          example: "lychee-autofix"

        session_id:
          type: string
          description: "Unique session identifier"
          example: "session-20251025-193000"

        timestamp:
          type: string
          format: date-time
          description: "Session stop time (ISO 8601 UTC)"
          example: "2025-10-25T19:30:00Z"

        duration_seconds:
          type: number
          minimum: 0
          description: "Session duration in seconds"
          example: 847.3

        git_status:
          $ref: '#/components/schemas/GitStatus'

        lychee_status:
          $ref: '#/components/schemas/LycheeStatus'

        available_workflows:
          type: array
          description: "List of workflow IDs applicable to this session"
          items:
            type: string
          example: ["lychee-autofix", "prune-legacy", "format-docs"]

    GitStatus:
      type: object
      description: "Git repository status at session stop"
      required:
        - branch
        - modified_files
        - untracked_files
        - staged_files
      properties:
        branch:
          type: string
          description: "Current git branch"
          example: "main"

        modified_files:
          type: integer
          minimum: 0
          description: "Number of modified files"
          example: 5

        untracked_files:
          type: integer
          minimum: 0
          description: "Number of untracked files"
          example: 12

        staged_files:
          type: integer
          minimum: 0
          description: "Number of staged files"
          example: 0

        ahead_commits:
          type: integer
          minimum: 0
          description: "Commits ahead of remote"
          example: 2

        behind_commits:
          type: integer
          minimum: 0
          description: "Commits behind remote"
          example: 0

    LycheeStatus:
      type: object
      description: "Lychee link validation results"
      required:
        - ran
        - error_count
      properties:
        ran:
          type: boolean
          description: "Whether lychee validation executed"
          example: true

        error_count:
          type: integer
          minimum: 0
          description: "Number of broken links found"
          example: 3

        details:
          type: string
          description: "Error details (if any)"
          example: "Found 3 broken links in CLAUDE.md"

        results_file:
          type: string
          format: path
          description: "Path to lychee results JSON"
          example: "/Users/terryli/.claude/.lychee-results.json"

    WorkflowManifest:
      type: object
      description: |
        Workflow plugin manifest. Each workflow is a self-contained module
        with metadata, trigger conditions, and Claude prompt template.
      required:
        - id
        - version
        - name
        - description
        - category
        - prompt_template
        - triggers
      properties:
        id:
          type: string
          pattern: '^[a-z0-9-]+$'
          description: "Unique workflow identifier"
          example: "lychee-autofix"

        version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
          description: "Semantic version"
          example: "1.0.0"

        name:
          type: string
          description: "Human-readable workflow name"
          example: "Fix Broken Links"

        description:
          type: string
          description: "Brief workflow description"
          example: "Automatically fix broken markdown links detected by lychee"

        category:
          type: string
          enum:
            - validation
            - housekeeping
            - documentation
            - code-quality
            - custom
          description: "Workflow category for UI organization"
          example: "validation"

        icon:
          type: string
          description: "Emoji icon for Telegram button"
          example: "🔗"

        prompt_template:
          type: string
          description: |
            Jinja2 template for Claude CLI prompt. Available variables:
            - workspace_path, session_id, correlation_id
            - git_status, lychee_status (if applicable)
            - workflow_params (from user selection)
          example: |
            Fix broken links detected by Lychee in {{ workspace_path }}.

            Lychee found {{ lychee_status.error_count }} broken links.
            Results file: {{ lychee_status.results_file }}

            Use the Edit tool to fix fragment links and update redirects.

        triggers:
          type: object
          description: "Conditions that make this workflow available"
          properties:
            lychee_errors:
              type: boolean
              description: "Requires lychee errors > 0"
              example: true

            git_modified:
              type: boolean
              description: "Requires modified files > 0"
              example: false

            always:
              type: boolean
              description: "Always available"
              example: false

        dependencies:
          type: array
          description: |
            Workflow IDs that must run before this workflow.
            Used by smart orchestrator for dependency resolution.
          items:
            type: string
          example: ["format-code"]

        estimated_duration:
          type: integer
          minimum: 0
          description: "Expected runtime in seconds"
          example: 30

        risk_level:
          type: string
          enum: [low, medium, high]
          description: "Risk of regression or breaking changes"
          example: "low"

    WorkflowRegistry:
      type: object
      description: |
        Central registry of all workflows. Loaded by bot on startup,
        used to dynamically generate Telegram UI.
      required:
        - version
        - workflows
      properties:
        version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
          description: "Registry schema version"
          example: "4.0.0"

        workflows:
          type: object
          description: "Map of workflow_id -> WorkflowManifest"
          additionalProperties:
            $ref: '#/components/schemas/WorkflowManifest'
          example:
            lychee-autofix:
              id: "lychee-autofix"
              version: "1.0.0"
              name: "Fix Broken Links"
              description: "Auto-fix lychee link errors"
              category: "validation"
              icon: "🔗"
              prompt_template: "Fix broken links..."
              triggers:
                lychee_errors: true
              dependencies: []
              estimated_duration: 30
              risk_level: "low"

        categories:
          type: object
          description: "Category metadata for UI organization"
          additionalProperties:
            type: object
            properties:
              name:
                type: string
              icon:
                type: string
              order:
                type: integer
          example:
            validation:
              name: "Validation & Fixes"
              icon: "✅"
              order: 1

    WorkflowSelection:
      type: object
      description: |
        User's workflow selection from Telegram. Can be single workflow,
        multiple workflows, or custom prompt.
      required:
        - selection_type
        - correlation_id
        - session_id
        - timestamp
        - workspace_path
      properties:
        selection_type:
          type: string
          enum: [preset, custom, multi]
          description: "How user selected workflow"
          example: "preset"

        correlation_id:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
          description: "ULID from session summary"
          example: "01K8E91BQ8ZHVG4QZAPB3B4Q8W"

        session_id:
          type: string
          description: "Session ID from summary"
          example: "session-20251025-193000"

        timestamp:
          type: string
          format: date-time
          description: "Selection timestamp (ISO 8601 UTC)"
          example: "2025-10-25T19:31:00Z"

        workflow_ids:
          type: array
          description: "Selected workflow IDs (for preset/multi)"
          items:
            type: string
          example: ["lychee-autofix", "prune-legacy"]

        custom_prompt:
          type: string
          description: "Free-form prompt (for custom selection)"
          example: "Refactor all snake_case variables to camelCase in src/"

        orchestration_mode:
          type: string
          enum: [sequential, parallel, smart]
          description: "How to run multiple workflows"
          default: "smart"
          example: "smart"

        workspace_path:
          type: string
          format: path
          description: "Workspace path from session summary (for template rendering)"
          example: "/Users/terryli/.claude"

        git_status:
          $ref: '#/components/schemas/GitStatus'
          description: "Git status from session summary (for template rendering)"

        lychee_status:
          $ref: '#/components/schemas/LycheeStatus'
          description: "Lychee status from session summary (for template rendering)"

    WorkflowExecution:
      type: object
      description: |
        Execution metadata for orchestrator. Created when workflows start,
        updated throughout execution, emitted as completion.
      required:
        - execution_id
        - correlation_id
        - workflow_id
        - status
        - started_at
      properties:
        execution_id:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
          description: "Unique execution ULID"
          example: "01K8E91BQXZHVG4QZAPB3B4Q9Y"

        correlation_id:
          type: string
          pattern: '^[0-9A-HJKMNP-TV-Z]{26}$'
          description: "Session correlation ULID"
          example: "01K8E91BQ8ZHVG4QZAPB3B4Q8W"

        workflow_id:
          type: string
          description: "Workflow being executed"
          example: "lychee-autofix"

        status:
          type: string
          enum: [pending, running, success, error, timeout, cancelled]
          description: "Current execution status"
          example: "success"

        started_at:
          type: string
          format: date-time
          description: "Execution start time (ISO 8601 UTC)"
          example: "2025-10-25T19:31:00Z"

        completed_at:
          type: string
          format: date-time
          description: "Execution end time (ISO 8601 UTC)"
          example: "2025-10-25T19:31:30Z"

        duration_seconds:
          type: number
          minimum: 0
          description: "Execution duration"
          example: 29.8

        exit_code:
          type: integer
          description: "Claude CLI exit code"
          example: 0

        stdout:
          type: string
          description: "Claude CLI stdout output"
          example: "✅ Fixed 3 broken fragment links"

        stderr:
          type: string
          description: "Claude CLI stderr output"
          example: ""

        summary:
          type: string
          description: "Extracted summary for Telegram"
          example: "Fixed 3 broken fragment links in CLAUDE.md"

        metadata:
          type: object
          description: "Additional execution metadata"
          additionalProperties: true

  x-state-files:
    summaries:
      location: "state/summaries/"
      pattern: "summary_{session_id}_{workspace_hash}.json"
      schema: "#/components/schemas/SessionSummary"
      retention: "Consumed by bot"
      description: "Session summaries from stop hook"

    selections:
      location: "state/selections/"
      pattern: "selection_{execution_id}.json"
      schema: "#/components/schemas/WorkflowSelection"
      retention: "Consumed by orchestrator"
      description: "User workflow selections from Telegram"

    executions:
      location: "state/executions/"
      pattern: "execution_{execution_id}.json"
      schema: "#/components/schemas/WorkflowExecution"
      retention: "Consumed by bot (for completion notification)"
      description: "Workflow execution results"

    callbacks:
      location: "state/callbacks/"
      pattern: "cb_{hash8}.json"
      retention: "30 days"
      description: "Telegram button callback data (< 64 bytes)"

    registry:
      location: "state/workflows.json"
      schema: "#/components/schemas/WorkflowRegistry"
      retention: "Persistent"
      description: "Workflow registry (single source of truth)"

  x-event-types:
    hook:
      - "hook.started"
      - "hook.completed"
      - "summary.created"
    bot:
      - "bot.started"
      - "bot.shutdown"
      - "summary.received"
      - "summary.processed"
      - "selection.received"
    orchestrator:
      - "orchestrator.started"
      - "execution.started"
      - "execution.completed"
      - "execution.failed"
    claude_cli:
      - "claude_cli.started"
      - "claude_cli.heartbeat"
      - "claude_cli.completed"

paths:
  /workflow:
    post:
      summary: Register new workflow
      description: |
        Add workflow to registry. Can be done via:
        1. Manual JSON editing
        2. CLI tool (future)
        3. Dynamic discovery (future)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkflowManifest'
      responses:
        '201':
          description: Workflow registered successfully
        '400':
          description: Invalid manifest
        '409':
          description: Workflow ID already exists

  /workflow/{workflow_id}:
    get:
      summary: Get workflow manifest
      parameters:
        - name: workflow_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Workflow manifest
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkflowManifest'
        '404':
          description: Workflow not found

    delete:
      summary: Unregister workflow
      parameters:
        - name: workflow_id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Workflow unregistered
        '404':
          description: Workflow not found

x-workflows:
  lychee-autofix:
    id: "lychee-autofix"
    version: "1.0.0"
    name: "Fix Broken Links"
    description: "Automatically fix broken markdown links detected by lychee"
    category: "validation"
    icon: "🔗"
    prompt_template: |
      Fix broken links detected by Lychee in {{ workspace_path }}.

      Lychee found {{ lychee_status.error_count }} broken links.
      Results file: {{ lychee_status.results_file }}

      Use the Edit tool to fix:
      1. Fragment links (#anchor not found)
      2. Redirected URLs (update to final destination)
      3. File path typos

      Session: {{ session_id }}
      Correlation ID: {{ correlation_id }}
    triggers:
      lychee_errors: true
    dependencies: []
    estimated_duration: 30
    risk_level: "low"

  prune-legacy:
    id: "prune-legacy"
    version: "1.0.0"
    name: "Prune Legacy Code"
    description: "Remove unused imports, dead code, deprecated functions"
    category: "housekeeping"
    icon: "🧹"
    prompt_template: |
      Identify and remove legacy code in {{ workspace_path }}:

      1. Unused imports (no references)
      2. Dead code (unreachable branches)
      3. Deprecated functions (marked @deprecated)
      4. Commented-out code blocks (>10 lines)

      Be conservative - only remove if 100% certain unused.

      Git status: {{ git_status.modified_files }} modified files
      Session: {{ session_id }}
    triggers:
      always: true
    dependencies: []
    estimated_duration: 60
    risk_level: "low"

  fix-docstrings:
    id: "fix-docstrings"
    version: "1.0.0"
    name: "Fix Inconsistent Docstrings"
    description: "Standardize docstring format, fix typos, ensure DRY"
    category: "documentation"
    icon: "📝"
    prompt_template: |
      Fix documentation inconsistencies in {{ workspace_path }}:

      1. Standardize docstring format (Google style)
      2. Fix typos and grammar
      3. Remove duplicate descriptions (DRY principle)
      4. Add missing parameter docs
      5. Update outdated examples

      Focus on Python files with modified functions.

      Git modified: {{ git_status.modified_files }} files
      Session: {{ session_id }}
    triggers:
      git_modified: true
    dependencies: []
    estimated_duration: 90
    risk_level: "low"

  rename-variables:
    id: "rename-variables"
    version: "1.0.0"
    name: "Improve Variable Names"
    description: "Rename unclear variables for better readability"
    category: "code-quality"
    icon: "🔤"
    prompt_template: |
      Improve variable naming in {{ workspace_path }}:

      1. Single-letter variables → descriptive names (except i,j,k in loops)
      2. Unclear abbreviations → full words
      3. Inconsistent naming → project conventions

      Only rename in modified files: {{ git_status.modified_files }} files

      Preserve:
      - API contract variables
      - Database column names
      - Third-party library conventions

      Session: {{ session_id }}
    triggers:
      git_modified: true
    dependencies: []
    estimated_duration: 120
    risk_level: "medium"

  custom-prompt:
    id: "custom-prompt"
    version: "1.0.0"
    name: "Custom Workflow"
    description: "Run user-specified prompt"
    category: "custom"
    icon: "✍️"
    prompt_template: |
      {{ workflow_params.custom_prompt }}

      Context:
      - Workspace: {{ workspace_path }}
      - Session: {{ session_id }}
      - Modified files: {{ git_status.modified_files }}
      - Correlation ID: {{ correlation_id }}
    triggers:
      always: true
    dependencies: []
    estimated_duration: 60
    risk_level: "high"

x-telegram-ui:
  session-summary-message:
    format: |
      📊 **Session Summary** - {{ workspace.emoji }} {{ workspace.name }}

      **Duration**: {{ duration_seconds }}s
      **Branch**: {{ git_status.branch }}
      **Modified**: {{ git_status.modified_files }} files
      **Untracked**: {{ git_status.untracked_files }} files

      {% if lychee_status.ran %}
      **Lychee**: {{ lychee_status.error_count }} broken links
      {% endif %}

      Choose workflows to run:

  workflow-buttons:
    layout: "hierarchical"
    max-columns: 2
    categories:
      - category: "validation"
        workflows: ["lychee-autofix"]
        show-if: "lychee_status.error_count > 0"

      - category: "housekeeping"
        workflows: ["prune-legacy"]
        always-show: true

      - category: "documentation"
        workflows: ["fix-docstrings"]
        show-if: "git_status.modified_files > 0"

      - category: "code-quality"
        workflows: ["rename-variables"]
        show-if: "git_status.modified_files > 0"

      - category: "custom"
        workflows: ["custom-prompt"]
        always-show: true

  execution-progress-message:
    format: |
      {{ workflow.icon }} **{{ workflow.name }}**

      Status: Running...
      Started: {{ started_at }}

      Estimated: ~{{ workflow.estimated_duration }}s

  execution-complete-message:
    success:
      format: |
        {{ workflow.icon }} ✅ **{{ workflow.name }}** - Complete

        **Duration**: {{ duration_seconds }}s
        **Summary**: {{ summary }}

        **Details**:
        ```
        {{ stdout }}
        ```

    error:
      format: |
        {{ workflow.icon }} ❌ **{{ workflow.name }}** - Failed

        **Duration**: {{ duration_seconds }}s
        **Exit Code**: {{ exit_code }}

        **Error**:
        ```
        {{ stderr }}
        ```

    timeout:
      format: |
        {{ workflow.icon }} ⏱️ **{{ workflow.name }}** - Timeout

        **Duration**: {{ duration_seconds }}s (limit reached)

        Claude CLI exceeded timeout.

x-migration:
  from-version: "3.0.1"
  breaking-changes:
    - "Directory renamed: automation/lychee/ → automation/telegram-workflows/"
    - "Notification files → Summary files (schema change)"
    - "Workflows now defined in registry, not hardcoded"

  backward-compatibility:
    - "Event store schema unchanged (no migration)"
    - "SQLite events.db preserved"
    - "Bot lifecycle behavior same (on-demand, 10-min idle)"

  migration-steps:
    0: "Run pre-migration validation (no pending files, clean git, services healthy)"
    1: "Create state/workflows.json registry with 4 initial workflows"
    2: "Refactor hook: emit SessionSummary (dual-mode with notifications), add git status, session duration"
    3: "Refactor bot: load registry, watch summaries/, dynamic workflow menu (dual-mode with notifications)"
    4: "Refactor orchestrator: load registry, watch selections/, Jinja2 template rendering, smart dependencies (dual-mode with approvals)"
    5: "Integration testing: 5 comprehensive test scenarios including correlation tracing"
    6: "Service management & directory rename: stop services, git mv lychee→telegram-workflows, update launchd plists, restart"
    7: "Remove dual-mode: delete old handlers, archive v3 state directories, create SQLite compatibility view"
    8: "Documentation: update all docs to v4.0.0, create release notes, git tag v4.0.0"

x-implementation-findings:
  - finding: "Approval JSON uses 'decision' field, not 'action', includes metadata wrapper"
    date: "2025-10-25"
    source: "Round 1 verification"
    impact: "Documentation corrected"

  - finding: "Orchestrator launched via asyncio.create_subprocess_exec, NOT launchctl"
    date: "2025-10-25"
    source: "Round 1 verification"
    impact: "Launchd services for auto-start only, not IPC"

  - finding: "Hook does NOT collect git status (Phase 2 must ADD)"
    date: "2025-10-25"
    source: "Round 1 verification"
    impact: "Phase 2 complexity +30min, new feature implementation required"
    resolution: "IMPLEMENTED 2025-10-26: Git status extraction added with grep pipeline fixes"

  - finding: "Hook does NOT track session duration (Phase 2 must ADD)"
    date: "2025-10-25"
    source: "Round 1 verification"
    impact: "SessionStart hook created for timestamp tracking"
    resolution: "IMPLEMENTED 2025-10-26: Duration calculation from timestamp file added"

  - finding: "WorkflowSelection missing context for template rendering"
    date: "2025-10-25"
    source: "Round 2/3 verification"
    impact: "Schema updated with workspace_path, git_status, lychee_status fields"

  - finding: "Bash pipefail causes hook exit on empty grep results"
    date: "2025-10-26"
    source: "Phase 2 implementation testing"
    impact: "Git status grep commands require '|| echo 0' to prevent pipeline failure with set -euo pipefail"
    resolution: "FIXED: Added || echo fallbacks to all grep|wc pipelines"

  - finding: "Phase 2 dual-mode implementation complete"
    date: "2025-10-26"
    source: "Phase 2 testing"
    impact: "Hook now emits SessionSummary on EVERY stop (not just errors), maintains v3 Notification for backward compatibility, bot always starts"
    validation: "SQLite logging confirmed: hook.started, hook.completed, summary.created events"

x-slos:
  availability:
    target: 99%
    measurement: "Bot uptime during active hours"
    validation: "ps aux | grep multi-workspace-bot"

  correctness:
    target: 100%
    measurement: "All events logged to SQLite"
    validation: "SELECT COUNT(*) FROM session_events WHERE correlation_id = ?"

  observability:
    target: 100%
    measurement: "All workflows traceable via correlation ID"
    validation: "End-to-end correlation ID propagation verified"

  maintainability:
    target: "Single source of truth"
    measurement: "No duplicated workflow definitions"
    validation: "workflows.json as canonical source"
