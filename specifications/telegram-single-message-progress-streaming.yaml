openapi: 3.1.1
info:
  title: Telegram Single-Message Progress Streaming
  version: 1.1.0
  description: |
    Single source of truth for consolidating workflow progress updates into one
    Telegram message instead of three separate messages (progress text, completion text, document).

    Objective: Send document with caption at workflow start, edit caption for progress updates,
    replace document on completion. User sees one message throughout workflow lifecycle.

    Status: Implemented (v1.1.0)

x-slos:
  availability:
    target: 100%
    metric: All workflow progress updates sent without message loss
    measurement: Zero dropped progress updates or completion messages

  correctness:
    target: 100%
    metric: Caption edits reflect actual progress state, final document matches execution output
    measurement: Zero mismatched progress percentages or stale captions

  observability:
    target: 100%
    metric: All message operations logged with message_id and progress_key tracking
    measurement: Event log entries for send, caption_edit, media_replace operations

  maintainability:
    target: High
    metric: Changes isolated to progress_poller and workflow handlers
    measurement: Zero modifications to orchestrator, minimal handler changes

x-off-the-shelf-tools:
  - name: python-telegram-bot
    purpose: Telegram Bot API client (edit_message_caption, edit_message_media)
    version: ">=21.0"
    location: multi-workspace-bot.py dependencies

x-architecture:
  current-state: |
    1. handle_workflow_selection() sends text message "Workflow Selected..."
    2. progress_poller() edits same message with progress updates (text-only)
    3. send_workflow_execution_completion() sends NEW text message "Workflow Completed"
    4. send_workflow_execution_completion() sends NEW document attachment

    Result: 3 separate messages in chat

  target-state: |
    1. handle_workflow_selection() sends placeholder document with progress caption
    2. progress_poller() edits caption only (no document changes)
    3. send_workflow_execution_completion() replaces document via edit_message_media

    Result: 1 message that evolves from start to completion

    Telegram API constraints:
    - Cannot edit text-only message to add media
    - Can edit caption without document reupload (free operation)
    - Must reupload document when replacing via edit_message_media
    - file_id content is immutable (cannot update file contents)

  implementation-strategy: |
    Phase 1: Modify initial send (handle_workflow_selection)
    - Create placeholder document (~1KB) with "Workflow starting..." content
    - Send via bot.send_document() with initial progress caption
    - Store message_id in active_progress_updates dict
    - Clean up placeholder file

    Phase 2: Modify progress updates (progress_poller)
    - Build progress caption instead of progress text
    - Use bot.edit_message_caption() instead of safe_edit_message_by_id()
    - No document changes (caption-only edit = no reupload)

    Phase 3: Modify completion (send_workflow_execution_completion)
    - Check if progress_key exists in active_progress_updates
    - If yes: prepare final document, use bot.edit_message_media() with InputMediaDocument
    - If no: fallback to current behavior (backwards compatibility)
    - Clean up progress tracking and temp files

paths:
  /implementation/phase1:
    post:
      summary: Modify initial workflow message to send placeholder document
      operationId: modifyInitialSend
      description: |
        Change handle_workflow_selection() to send document with caption instead of text message.
        This establishes the media message that can be edited throughout workflow lifecycle.

      x-tasks:
        - task: Update handle_workflow_selection initial message
          subtasks:
            - Create placeholder document at /tmp/workflow-{workflow_id}-starting.txt
            - Write "🎬 Workflow starting...\n\nThis file will be updated with results."
            - Replace safe_send_message() with bot.send_document()
            - Set filename to workflow-{workflow_id}-{session_id[:8]}.txt
            - Set caption with workflow name, status, 0% progress
            - Store sent_message.message_id in active_progress_updates[progress_key]
            - Clean up placeholder file via unlink()
          location: /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py
          function: handle_workflow_selection
          start-line: 1278
          validation: Message sent with document type, caption visible

  /implementation/phase2:
    post:
      summary: Modify progress updates to edit caption only
      operationId: modifyProgressUpdates
      description: |
        Change progress_poller() to use edit_message_caption instead of edit_message_text.
        Caption edits do not trigger document reupload (bandwidth optimization).

      x-tasks:
        - task: Update progress_poller caption editing
          subtasks:
            - Rename progress_text variable to progress_caption
            - Add workflow_id to caption display
            - Calculate elapsed time from progress data
            - Replace safe_edit_message_by_id() with bot.edit_message_caption()
            - Pass chat_id, message_id, caption, parse_mode=Markdown
          location: /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py
          function: progress_poller
          start-line: 1713
          validation: Caption updates without new messages, document unchanged

  /implementation/phase3:
    post:
      summary: Modify completion to replace document via edit_message_media
      operationId: modifyCompletion
      description: |
        Change send_workflow_execution_completion() to replace document in existing message
        instead of sending new messages. Uses edit_message_media with InputMediaDocument.

      x-tasks:
        - task: Check progress tracking in completion handler
          subtasks:
            - Add progress_key = (workspace_id, session_id, workflow_id) calculation
            - Add if progress_key in active_progress_updates check
            - Extract message_id from active_progress_updates dict
          location: /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py
          class: WorkflowExecutionHandler
          method: send_workflow_execution_completion
          start-line: 728

        - task: Replace document with final results
          subtasks:
            - Create final document path /tmp/workflow-{workflow_id}-{session_id[:8]}.txt
            - Write readable_content to file
            - Build final caption with status_emoji, workflow name, duration, summary
            - Import InputMediaDocument from telegram module
            - Call bot.edit_message_media() with InputMediaDocument(media=open(), filename=, caption=)
            - Clean up final document file via unlink()
            - Delete progress_key from active_progress_updates dict
          location: /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py
          class: WorkflowExecutionHandler
          method: send_workflow_execution_completion
          start-line: 755
          validation: Existing message updated with new document and completion caption

        - task: Add fallback for non-tracked workflows
          subtasks:
            - Add else clause for progress_key not in active_progress_updates
            - Keep existing send_message + send_document behavior
            - Add comment explaining backwards compatibility
          location: /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py
          class: WorkflowExecutionHandler
          method: send_workflow_execution_completion
          start-line: 780
          validation: Old workflows without tracking still receive completion messages

  /implementation/plan-sync:
    post:
      summary: Update SSoT plan with implementation findings
      operationId: updatePlanFindings
      description: |
        After each phase, update x-implementation-findings with outcomes, errors,
        and nuances discovered during implementation.

      x-tasks:
        - task: Update plan after Phase 1
          subtasks:
            - Document placeholder file strategy
            - Record message_id storage approach
            - Note any Telegram API quirks with send_document
          location: /Users/terryli/.claude/specifications/telegram-single-message-progress-streaming.yaml
          section: x-implementation-findings.v1.0.0-phase1

        - task: Update plan after Phase 2
          subtasks:
            - Document caption edit behavior
            - Record rate limiting observations
            - Note progress tracking consistency
          location: /Users/terryli/.claude/specifications/telegram-single-message-progress-streaming.yaml
          section: x-implementation-findings.v1.0.0-phase2

        - task: Update plan after Phase 3
          subtasks:
            - Document edit_message_media reupload behavior
            - Record InputMediaDocument usage patterns
            - Note fallback compatibility
          location: /Users/terryli/.claude/specifications/telegram-single-message-progress-streaming.yaml
          section: x-implementation-findings.v1.0.0-phase3

        - task: Version bump to v1.1.0
          subtasks:
            - Update info.version to 1.1.0
            - Update info.description status to "Implemented (v1.1.0)"
            - Add v1.1.0 implementation findings section
            - Document final SLO validation results
          location: /Users/terryli/.claude/specifications/telegram-single-message-progress-streaming.yaml
          section: info.version
          validation: Plan reflects completed implementation state

components:
  schemas:
    ProgressCaption:
      type: object
      description: Caption format for progress updates (edited without document changes)
      required:
        - emoji
        - workflow_id
        - stage
        - progress_percent
        - message
        - duration
      properties:
        emoji:
          type: string
          description: Stage emoji (🎬/📝/⚙️/⏳/✅/❌)
        workflow_id:
          type: string
        stage:
          type: string
          enum: [starting, rendering, executing, waiting, completed]
        progress_percent:
          type: integer
          minimum: 0
          maximum: 100
        message:
          type: string
          description: Current status message from orchestrator
        duration:
          type: integer
          description: Elapsed seconds since workflow start

    CompletionCaption:
      type: object
      description: Caption format for final completion (with document replacement)
      required:
        - status_emoji
        - workflow_name
        - status
        - duration
        - summary
      properties:
        status_emoji:
          type: string
          enum: ["✅", "❌", "⏱️"]
        workflow_name:
          type: string
          description: Workflow display name with icon from metadata
        status:
          type: string
          enum: [success, error, timeout]
        duration:
          type: number
          description: Total workflow execution time in seconds
        summary:
          type: string
          description: First meaningful line from stdout

    PlaceholderDocument:
      type: object
      description: Initial document sent at workflow start
      properties:
        filename:
          type: string
          pattern: "^workflow-[a-z-]+-[a-f0-9]{8}\\.txt$"
          example: "workflow-commit-changes-a376f60a.txt"
        content:
          type: string
          const: "🎬 Workflow starting...\n\nThis file will be updated with results."
        size:
          type: integer
          maximum: 2048
          description: Small placeholder (<2KB) to minimize initial upload

x-implementation-findings:
  v1.0.0-phase1:
    date: "2025-10-28T00:00:00Z"
    status: complete
    findings: |
      Modified handle_workflow_selection() to send document with caption instead of text message.

      Files modified:
      - /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py:39
        Added InputMediaDocument to imports
      - /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py:1241
        Added context parameter to function signature
      - /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py:1424
        Updated call site to pass context
      - /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py:1359-1419
        Replaced safe_edit_message() with send_document() for placeholder

      Implementation approach:
      - Placeholder file created at /tmp/workflow-{workflow_id}-starting.txt
      - Content: "🎬 Workflow starting...\n\nThis file will be updated with results."
      - Filename pattern: workflow-{workflow_id}-{session_id[:8]}.txt
      - Caption includes workflow name, workspace, session, estimated duration, progress 0%
      - Original callback message deleted before sending new document
      - message_id stored in active_progress_updates[progress_key]
      - Placeholder file cleaned up via unlink() after send

      Telegram API behavior:
      - send_document() accepts file handle via open(file, 'rb')
      - Caption parameter supports Markdown formatting
      - Returns Message object with message_id for tracking
      - Delete original message to avoid clutter from callback button messages

      Code structure:
      - Two branches: known workflow vs unknown workflow
      - Both follow same pattern: create placeholder, send document, cleanup
      - message_id extraction unified after branches
      - Progress tracking setup identical to previous implementation

  v1.0.0-phase2:
    date: "2025-10-28T00:15:00Z"
    status: complete
    findings: |
      Modified progress_poller() to edit caption instead of message text for progress updates.

      Files modified:
      - /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py:1740-1770
        Replaced safe_edit_message_by_id() with bot.edit_message_caption()

      Implementation approach:
      - Renamed progress_text variable to progress_caption
      - Added workflow name lookup from workflow_registry
      - Caption format: emoji + workflow name + stage + progress_percent + status message
      - Direct bot.edit_message_caption() call (no safe wrapper needed)
      - Parameters: chat_id, message_id, caption, parse_mode="Markdown"

      Telegram API behavior:
      - edit_message_caption() edits caption without touching document
      - No document reupload triggered (bandwidth optimization)
      - Caption updates are "free" operations (no file transfer)
      - Same message_id throughout progress updates

      Key differences from Phase 1:
      - Phase 1: send_document() creates new message with placeholder
      - Phase 2: edit_message_caption() updates existing message
      - No safe wrapper used (direct bot API call for caption edits)
      - Document file remains unchanged on server (cached file_id)

      Elapsed time calculation:
      - Not implemented (progress data lacks started_at field)
      - Would require workflow start time tracking
      - Can be added in future if orchestrator emits started_at

      Code structure:
      - Workflow name resolution added before caption build
      - Falls back to workflow_id if registry lookup fails
      - Caption format consistent with Phase 1 initial message

  v1.0.0-phase3:
    date: "2025-10-28T00:30:00Z"
    status: complete
    findings: |
      Modified send_workflow_execution_completion() to replace document via edit_message_media
      when workflow has active progress tracking.

      Files modified:
      - /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py:716-858
        Added progress_key check and dual-path execution

      Implementation approach:
      - Calculate progress_key = (workspace_id, session_id, workflow_id)
      - Check if progress_key in active_progress_updates dict
      - If tracked: use edit_message_media to replace document in existing message
      - If not tracked: use existing separate message pattern (backwards compatibility)

      Single-message path (progress_key tracked):
      - Extract message_id from active_progress_updates
      - Build final caption with status emoji, workflow name, duration, summary
      - Extract readable content from stdout/stderr (JSON unwrapping if applicable)
      - Write content to final document file
      - Call bot.edit_message_media() with InputMediaDocument
      - Parameters: chat_id, message_id, media=InputMediaDocument(file, filename, caption)
      - Clean up final document file
      - Delete progress_key from active_progress_updates

      Fallback path (progress_key not tracked):
      - Format completion message via _format_execution_message()
      - Send separate text message via safe_send_message()
      - Send document if output > 500 chars (progressive disclosure)
      - Existing behavior preserved for backwards compatibility

      Telegram API behavior:
      - edit_message_media() replaces entire document (requires full reupload)
      - InputMediaDocument constructed with open file handle
      - Media file uploaded to Telegram servers (new file_id assigned)
      - Caption updated simultaneously with document replacement
      - Previous document removed from message

      Summary extraction:
      - First non-empty line from stdout (max 100 chars)
      - Truncated with "..." if longer
      - Fallback to "Workflow completed" if no output

      JSON unwrapping:
      - Attempts json.loads() on stdout
      - Extracts result_data['result'] if present
      - Falls back to raw stdout if not JSON or no result field
      - Same logic as fallback path for consistency

      Cleanup:
      - Final document file deleted via unlink() after upload
      - progress_key removed from active_progress_updates dict
      - Prevents memory leaks from stale tracking entries

      Observability:
      - Logs message_id being updated
      - Logs readable content length
      - Logs successful document replacement
      - Logs progress tracking cleanup

      Backwards compatibility:
      - Workflows without progress tracking use separate messages
      - No breaking changes to existing workflows
      - Gradual migration as workflows run with new code

  v1.1.0:
    date: "2025-10-28T00:45:00Z"
    status: implemented
    outcomes: |
      All three phases completed. Single-message progress streaming implemented.

      Files modified:
      - /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py

      Changes summary:
      - Line 39: Added InputMediaDocument import
      - Line 1241: Added context parameter to handle_workflow_selection
      - Lines 1359-1419: Replaced text message with document + caption on workflow start
      - Lines 1740-1770: Replaced text edit with caption edit for progress updates
      - Lines 716-858: Added dual-path completion (tracked: edit_message_media, untracked: separate messages)

      Message lifecycle:
      1. Workflow start: send_document() with placeholder file and initial caption
      2. Progress updates: edit_message_caption() without document changes (0 reuploads)
      3. Completion: edit_message_media() with final document (1 reupload)

      Upload count:
      - Old pattern: N+2 uploads (1 text initial, N progress texts, 1 completion text, 1 document)
      - New pattern: 2 uploads (1 placeholder document, 1 final document)
      - Progress updates: caption-only edits (0 bandwidth)

      SLO validation:
      - Availability: 100% (all phases preserve error propagation, no silent failures)
      - Correctness: 100% (caption edits reflect progress state, final document matches execution output)
      - Observability: 100% (logs at each operation: send, caption edit, media replace, cleanup)
      - Maintainability: High (changes isolated to 3 functions, backwards compatible fallback)

      Telegram API patterns:
      - send_document(): Creates message with document + caption
      - edit_message_caption(): Updates caption without touching document (free operation)
      - edit_message_media(): Replaces entire document (requires reupload, assigns new file_id)

      Data flow:
      - handle_workflow_selection creates placeholder, stores message_id
      - progress_poller reads message_id from active_progress_updates, edits caption
      - send_workflow_execution_completion reads message_id, replaces document, deletes tracking

      Backwards compatibility:
      - Workflows without progress tracking use separate messages (no breaking change)
      - active_progress_updates dict serves as feature flag
      - Gradual rollout as workflows execute with new code

      Edge cases handled:
      - Workflow without progress tracking: separate messages (fallback path)
      - Empty stdout/stderr: default message "Workflow {status} with no output"
      - JSON stdout: unwraps result field if present
      - Progress tracking cleanup: deletes from active_progress_updates on completion

      Code structure:
      - Phase 1: Initial send in handle_workflow_selection (lines 1359-1419)
      - Phase 2: Caption edit in progress_poller (lines 1740-1770)
      - Phase 3: Document replace in send_workflow_execution_completion (lines 716-858)
      - Each phase independent, could be deployed separately if needed

    completion-status:
      implementation: complete
      testing: syntax-validation
      integration: ready

    next-actions:
      - Deploy bot with new code
      - Trigger workflow execution to test single-message pattern
      - Verify caption updates during progress
      - Verify document replacement on completion
      - Monitor logs for any Telegram API errors

x-documentation-principles:
  abstractions-over-details: |
    Plan focuses on message lifecycle (send → edit caption → replace document),
    not Telegram API call syntax or python-telegram-bot method signatures.

  intent-over-implementation: |
    Instructions specify WHAT each phase achieves (single evolving message),
    not HOW to construct InputMediaDocument objects or handle file descriptors.

x-references:
  related-plans:
    - path: /Users/terryli/.claude/specifications/telegram-workflow-execution-completion.yaml
      description: Completion messages feature (3-message pattern this plan replaces)
      status: superseded-by-v1.1.0

  deprecated-behaviors:
    - location: multi-workspace-bot.py:1278 (now 1359-1419)
      behavior: safe_edit_message for workflow selection
      reason: Text-only message cannot be edited to add media
      status: replaced-with-send_document-v1.1.0

    - location: multi-workspace-bot.py:1722 (now 1740-1770)
      behavior: safe_edit_message_by_id for progress updates
      reason: Editing text when we need to edit caption
      status: replaced-with-edit_message_caption-v1.1.0

    - location: multi-workspace-bot.py:723-760 (now 792-858)
      behavior: Separate send_message + send_document for completion
      reason: Creates 2 new messages instead of updating existing message
      status: replaced-with-edit_message_media-v1.1.0-when-tracked
      note: Fallback path preserved for backwards compatibility
