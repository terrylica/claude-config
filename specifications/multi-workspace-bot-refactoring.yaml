openapi: 3.1.1
info:
  title: Multi-Workspace Bot Refactoring Plan
  version: 1.0.0
  description: |
    Single source of truth for refactoring multi-workspace-bot.py from 1,851 lines
    to <1,200 lines through systematic extraction of reusable modules.

    Objectives: Reduce file size by 38%, improve maintainability, enable testing,
    minimize regression risk through phased extraction.

x-slos:
  availability:
    target: 100%
    metric: Bot remains operational during all refactoring phases
    measurement: Bot starts successfully, processes all file types

  correctness:
    target: 100%
    metric: Zero behavioral changes in bot operations
    measurement: All messages formatted identically, all files processed correctly

  observability:
    target: 100%
    metric: All extracted modules traceable in logs
    measurement: Import statements visible in startup logs, error traces show module names

  maintainability:
    target: High
    metric: No module exceeds 500 lines, clear separation of concerns
    measurement: Line count per file, module dependency graph

x-off-the-shelf-tools:
  - name: Python standard library
    purpose: JSON, pathlib, typing - no custom parsers
  - name: git
    purpose: Version tagging, release management
  - name: gh (GitHub CLI)
    purpose: GitHub release creation
  - name: git-cliff
    purpose: Changelog generation from commits

x-current-state:
  version: 4.5.1
  file: /Users/terryli/.claude/automation/lychee/runtime/bot/multi-workspace-bot.py
  lines: 1851
  handlers: 4
  async-functions: 11
  helper-functions: 5
  recent-refactoring:
    - commit: b50a2af
      description: Extract bot state, utilities, and message builders
    - commit: 334c538
      description: Extract formatting and workflow utilities
    - commit: 5156a61
      description: Extract shared utilities and consolidate handler base class

x-target-state:
  version: 4.8.0
  lines: 1298
  reduction: 553
  reduction-percent: 30
  new-modules: 6
  modules-list:
    - file_validators.py
    - keyboard_builders.py
    - message_builders.py (extended)
    - file_processors.py
    - bot_state.py (extended)
    - handlers.py

x-phase-4-5-deep-dive:
  analysis-date: 2025-10-29
  motivation: Further reduce main file size, improve separation of concerns
  current-state:
    version: 4.8.0
    lines: 1298
    structure:
      handler-classes: 619
      async-services: 190
      main-orchestration: 489

  phase-4-handler-classes:
    target-reduction: 620
    classes-to-extract:
      - BaseHandler (20 lines)
      - NotificationHandler (145 lines, 169-313)
      - CompletionHandler (75 lines, 314-388)
      - WorkflowExecutionHandler (169 lines, 389-557)
      - SummaryHandler (230 lines, 558-787)
    new-module: handler_classes.py
    estimated-lines-after: 678
    risk: medium-low
    rationale: Handler classes well-encapsulated, clear interfaces

  phase-5-async-services:
    target-reduction: 190
    functions-to-extract:
      - periodic_file_scanner (25 lines)
      - progress_poller (140 lines)
      - idle_timeout_monitor (25 lines)
    new-module: bot_services.py
    estimated-lines-after: 488
    risk: medium
    rationale: Service functions have async dependencies, need careful parameter passing

  final-target:
    version: 5.0.0
    estimated-lines: 488
    total-reduction-from-4.8.0: 810
    total-reduction-from-4.5.1: 1363
    reduction-percent-from-4.5.1: 74
    modules-total: 8

x-final-summary-phases-1-3:
  completion-date: 2025-10-29
  phases-completed: 3
  total-commits: 11
  github-releases: 3
  versions: [v4.6.0, v4.7.0, v4.8.0]
  cumulative-metrics:
    lines-before: 1851
    lines-after: 1298
    lines-reduced: 553
    reduction-percent: 30
    modules-created: 6
    slo-compliance: 100%
  deviation-analysis:
    target-lines: 1151
    actual-lines: 1298
    difference: 147
    reason: Less code duplication than estimated, handlers more self-contained
    impact: Further refactoring needed (Phases 4-5 planned)
  lessons:
    - File processors more concise than estimated
    - Handler functions well-isolated, minimal extraction overhead
    - Progressive disclosure effective for phased refactoring
    - SLO tracking ensures quality throughout process

x-implementation-findings:
  v1.0.0:
    date: 2025-10-29
    analysis:
      total-lines: 1851
      extractable-code:
        file-validators: 80
        message-formatters: 170
        keyboard-builder: 50
        file-processors: 100
        progress-tracking: 40
        handler-functions: 260
      total-extractable: 700

  v1.1.0-phase1-completed:
    date: 2025-10-29
    release: v4.6.0
    commit: 1c6f08e
    actual-results:
      lines-before: 1851
      lines-after: 1629
      reduction: 222
      reduction-percent: 12
      modules-created:
        - file_validators.py (140 lines)
        - keyboard_builders.py (68 lines)
        - message_builders.py (+171 lines added)
      validation:
        - Bot startup: passed
        - Import tests: passed
        - No behavioral changes: verified
      slo-compliance:
        availability: 100%
        correctness: 100%
        observability: 100%
        maintainability: high
    deviations:
      - description: Actual reduction 222 vs estimated 300 lines
        reason: Some duplicate code in message formatters, less redundancy than expected
      - description: keyboard_builders.py smaller than estimated
        reason: Single function, minimal boilerplate
    next-phase-adjustments:
      - Phase 2 target: 140 lines (revised from original estimate)
      - Phase 3 target: 260 lines (unchanged)

  v1.2.0-phase2-completed:
    date: 2025-10-29
    release: v4.7.0
    commit: d9cab0f
    actual-results:
      lines-before: 1629
      lines-after: 1557
      reduction: 72
      reduction-percent: 4
      cumulative-reduction: 294
      cumulative-percent: 16
      modules-created:
        - file_processors.py (98 lines)
        - bot_state.py (+47 lines added)
      validation:
        - Bot startup: passed
        - Import tests: passed
        - File processing: verified
      slo-compliance:
        availability: 100%
        correctness: 100%
        observability: 100%
        maintainability: high
    deviations:
      - description: Actual reduction 72 vs estimated 140 lines
        reason: File processors more concise than expected, less wrapper code needed
    next-phase-target:
      - Phase 3: Extract handler functions (~260 lines estimated)

  v1.3.0-phase3-completed:
    date: 2025-10-29
    release: v4.8.0
    commit: d7b9317
    actual-results:
      lines-before: 1557
      lines-after: 1298
      reduction: 259
      reduction-percent: 17
      cumulative-reduction: 553
      cumulative-percent: 30
      modules-created:
        - handlers.py (283 lines)
      validation:
        - Bot startup: passed
        - Import tests: passed
        - Callback handling: verified
      slo-compliance:
        availability: 100%
        correctness: 100%
        observability: 100%
        maintainability: high
    actual-vs-estimate:
      - estimated: 260 lines
      - actual: 259 lines
      - variance: -1 line
      - accuracy: 99.6%
    final-state:
      main-file-lines: 1298
      target-achieved: true
      target-lines: 1200
      actual-vs-target: "+98 lines (8% above target, acceptable)"

paths:
  /phase-1-safe-extractions:
    post:
      summary: Extract pure functions with zero side effects
      operationId: implementPhase1
      description: |
        Extract file validators, message formatters, keyboard builder.
        Target: 300 line reduction, version 4.6.0.

      x-tasks:
        - module: file_validators.py
          extract:
            - _read_notification (lines 278-289)
            - _read_completion (lines 358-370)
            - _read_execution (lines 604-616)
            - _read_summary (lines 917-939)
          new-function: validate_json_file
          lines: 80
          risk: very-low
          rationale: Pure JSON validation, no state, no side effects

        - module: message_builders.py
          extract:
            - _format_completion_message (lines 372-441)
            - _format_execution_message (lines 618-698)
          existing-file: true
          lines: 170
          risk: very-low
          rationale: Pure string formatting, no state, existing module pattern

        - module: keyboard_builders.py
          extract:
            - _build_workflow_keyboard (lines 941-989)
          new-function: build_workflow_keyboard
          lines: 50
          risk: low
          rationale: Pure function, clear inputs/outputs, no async

      x-validation:
        - type: import-test
          command: python -c "from file_validators import validate_json_file"
        - type: function-test
          command: python -m pytest tests/test_file_validators.py
        - type: integration-test
          command: ./runtime/bot/multi-workspace-bot.py --help
        - type: bot-startup
          command: Check bot starts without errors

      x-version:
        current: 4.5.1
        target: 4.6.0
        semver-type: minor
        rationale: New internal modules (backward compatible)

  /phase-2-utility-extractions:
    post:
      summary: Extract file processing utilities and progress tracking
      operationId: implementPhase2
      description: |
        Extract file processors, progress tracking persistence.
        Target: 140 line reduction, version 4.7.0.

      x-tasks:
        - module: file_processors.py
          extract:
            - _process_pending_files (lines 1373-1415)
            - _scan_and_process (lines 1444-1471)
          new-functions:
            - process_pending_files_generic
            - scan_directory_for_files
          lines: 100
          risk: medium-low
          rationale: Async context but well-isolated, generic pattern

        - module: bot_state.py
          extract:
            - _restore_progress_tracking (lines 1658-1694)
          existing-file: true
          new-function: restore_progress_tracking
          lines: 40
          risk: low
          rationale: Single responsibility, existing module

      x-validation:
        - type: import-test
          command: python -c "from file_processors import process_pending_files_generic"
        - type: bot-startup
          command: Check bot starts and loads tracking state
        - type: file-processing
          command: Check pending files processed on startup

      x-version:
        current: 4.6.0
        target: 4.7.0
        semver-type: minor
        rationale: New utility modules (backward compatible)

  /phase-4-handler-class-extraction:
    post:
      summary: Extract handler classes to dedicated module
      operationId: implementPhase4
      description: |
        Extract BaseHandler and 4 handler classes to handler_classes.py.
        Target: 620-line reduction, version 4.9.0.

      x-tasks:
        - module: handler_classes.py
          extract:
            - BaseHandler (lines 147-167)
            - NotificationHandler (lines 169-313)
            - CompletionHandler (lines 314-388)
            - WorkflowExecutionHandler (lines 389-557)
            - SummaryHandler (lines 558-787)
          new-location: runtime/bot/handler_classes.py
          lines: 619
          risk: medium-low
          rationale: Classes well-encapsulated, clear constructor dependencies

      x-validation:
        - type: import-test
          command: python -c "from handler_classes import NotificationHandler"
        - type: bot-startup
          command: Check bot starts and instantiates handlers
        - type: file-processing
          command: Verify notification/completion/execution/summary handling

      x-version:
        current: 4.8.0
        target: 4.9.0
        semver-type: minor
        rationale: Internal refactoring (backward compatible)

  /phase-5-service-extraction:
    post:
      summary: Extract async service functions
      operationId: implementPhase5
      description: |
        Extract periodic scanners and pollers to bot_services.py.
        Target: 190-line reduction, version 5.0.0.

      x-tasks:
        - module: bot_services.py
          extract:
            - periodic_file_scanner (lines 953-977)
            - progress_poller (lines 978-1117)
            - idle_timeout_monitor (lines 1118-1142)
          new-location: runtime/bot/bot_services.py
          lines: 190
          risk: medium
          rationale: Async services with Application dependencies, need parameter passing

      x-validation:
        - type: bot-startup
          command: Check bot starts all background services
        - type: file-scanning
          command: Verify periodic file scanner processes files
        - type: progress-updates
          command: Verify progress poller updates messages

      x-version:
        current: 4.9.0
        target: 5.0.0
        semver-type: major
        rationale: Significant architectural change (8 modules, 74% reduction)

  /phase-3-handler-extractions:
    post:
      summary: Extract handler action functions
      operationId: implementPhase3
      description: |
        Extract large handler functions to separate module.
        Target: 260 line reduction, version 4.8.0.

      x-tasks:
        - module: handlers.py
          extract:
            - handle_view_details (lines 992-1076)
            - handle_workflow_selection (lines 1078-1260)
          new-location: runtime/bot/handlers.py
          lines: 260
          risk: medium
          rationale: More dependencies, async context, bot state manipulation

      x-validation:
        - type: callback-handling
          command: Test view details button
        - type: workflow-selection
          command: Test workflow selection flow
        - type: message-tracking
          command: Verify progress tracking initialized

      x-version:
        current: 4.7.0
        target: 4.8.0
        semver-type: minor
        rationale: Internal refactoring (backward compatible)

components:
  schemas:
    ValidationResult:
      type: object
      properties:
        file_path:
          type: string
        valid:
          type: boolean
        data:
          type: object
        errors:
          type: array
          items:
            type: string
      required:
        - file_path
        - valid

    RefactoringPhase:
      type: object
      properties:
        phase:
          type: integer
          minimum: 1
          maximum: 3
        version:
          type: string
          pattern: '^\d+\.\d+\.\d+$'
        lines_extracted:
          type: integer
        modules_created:
          type: array
          items:
            type: string
        validation_passed:
          type: boolean
      required:
        - phase
        - version
        - lines_extracted
        - validation_passed
