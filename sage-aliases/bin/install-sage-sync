#!/bin/bash
# SAGE-Sync System Installation Script
# Creates robust system-wide access to sage-sync command

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SOURCE_SCRIPT="$SCRIPT_DIR/sage-sync"
SYSTEM_BIN="/usr/local/bin/sage-sync"
LOCAL_BIN="$HOME/.local/bin/sage-sync"

echo "üîß SAGE-Sync Installation Options"
echo "=================================="
echo
echo "1. System-wide installation (requires sudo)"
echo "   ‚Üí Install to: $SYSTEM_BIN" 
echo "   ‚Üí Accessible from any shell/script/automation"
echo "   ‚Üí Most robust and future-proof"
echo
echo "2. User installation (no sudo required)"
echo "   ‚Üí Install to: $LOCAL_BIN"
echo "   ‚Üí Accessible to current user only"
echo "   ‚Üí Good alternative if no admin access"
echo
echo "3. Current setup (shell alias)"
echo "   ‚Üí Shell alias in ~/.zshrc"
echo "   ‚Üí Interactive shells only"
echo "   ‚Üí Less robust"
echo

# Check if source script exists
if [[ ! -f "$SOURCE_SCRIPT" ]]; then
    echo "‚ùå Error: Source script not found at $SOURCE_SCRIPT"
    exit 1
fi

# Function to install system-wide
install_system() {
    echo "üöÄ Installing sage-sync system-wide..."
    
    if sudo cp "$SOURCE_SCRIPT" "$SYSTEM_BIN"; then
        sudo chmod +x "$SYSTEM_BIN"
        echo "‚úÖ System installation successful"
        echo "üìç Installed to: $SYSTEM_BIN"
        echo "üîç Testing: sage-sync --help"
        if sage-sync --help >/dev/null 2>&1; then
            echo "‚úÖ Command accessible globally"
        else
            echo "‚ö†Ô∏è  Command test failed - check PATH"
        fi
    else
        echo "‚ùå System installation failed"
        return 1
    fi
}

# Function to install user-local
install_user() {
    echo "üöÄ Installing sage-sync for current user..."
    
    # Create ~/.local/bin if it doesn't exist
    mkdir -p "$(dirname "$LOCAL_BIN")"
    
    if cp "$SOURCE_SCRIPT" "$LOCAL_BIN" && chmod +x "$LOCAL_BIN"; then
        echo "‚úÖ User installation successful" 
        echo "üìç Installed to: $LOCAL_BIN"
        
        # Check if ~/.local/bin is in PATH
        if echo "$PATH" | grep -q "$HOME/.local/bin"; then
            echo "‚úÖ ~/.local/bin already in PATH"
        else
            echo "‚ö†Ô∏è  Adding ~/.local/bin to PATH..."
            echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.zshrc
            echo "üìù Added to ~/.zshrc - restart shell or run: source ~/.zshrc"
        fi
        
        echo "üîç Testing: $LOCAL_BIN --help"
        if "$LOCAL_BIN" --help >/dev/null 2>&1; then
            echo "‚úÖ Command working"
        else
            echo "‚ùå Command test failed"
        fi
    else
        echo "‚ùå User installation failed"
        return 1
    fi
}

# Function to show current status
show_status() {
    echo "üìä Current SAGE-Sync Status"
    echo "==========================="
    
    # Check system installation
    if [[ -f "$SYSTEM_BIN" ]]; then
        echo "‚úÖ System installation: Found at $SYSTEM_BIN"
    else
        echo "‚ùå System installation: Not found"
    fi
    
    # Check user installation
    if [[ -f "$LOCAL_BIN" ]]; then
        echo "‚úÖ User installation: Found at $LOCAL_BIN"
    else
        echo "‚ùå User installation: Not found"
    fi
    
    # Check shell alias
    if grep -q "sage-sync" ~/.zshrc 2>/dev/null; then
        echo "‚úÖ Shell alias: Found in ~/.zshrc"
    else
        echo "‚ùå Shell alias: Not found"
    fi
    
    # Test command availability
    echo
    echo "üîç Command Accessibility Test:"
    if command -v sage-sync >/dev/null 2>&1; then
        local cmd_path=$(command -v sage-sync)
        echo "‚úÖ sage-sync command found at: $cmd_path"
    else
        echo "‚ùå sage-sync command not found in PATH"
    fi
}

# Main menu
case "${1:-}" in
    "--system"|"-s")
        install_system
        ;;
    "--user"|"-u")
        install_user
        ;;
    "--status")
        show_status
        ;;
    "--help"|"-h"|"")
        cat << 'EOF'
SAGE-Sync Installation Script

USAGE:
    install-sage-sync [OPTION]

OPTIONS:
    --system, -s    Install system-wide (requires sudo)  [MOST ROBUST]
    --user, -u      Install for current user only
    --status        Show current installation status
    --help, -h      Show this help

RECOMMENDATIONS:
    For maximum robustness and future-proofing:
    ‚Üí Use --system option (requires admin access)
    
    For personal use without admin access:
    ‚Üí Use --user option
    
    Current shell alias setup is least robust.

EXAMPLES:
    install-sage-sync --system     # Install system-wide
    install-sage-sync --user       # Install for user
    install-sage-sync --status     # Check current setup
EOF
        ;;
    *)
        echo "‚ùå Unknown option: $1"
        echo "Use --help for usage information"
        exit 1
        ;;
esac