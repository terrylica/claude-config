#!/bin/bash
# SAGE Comprehensive Sync Tool - Universal Access Command  
# Rollback Reference: c80d866 (pre-MHR modularization snapshot)
# Part of SAGE Sync Infrastructure - Bulletproof Session Preservation

set -euo pipefail  # Exit on any error, undefined vars, pipe failures

# =============================================================================
# CONFIGURATION & GLOBALS  
# =============================================================================

SCRIPT_NAME="sage-sync"
VERSION="2.0.0-modular"
REMOTE_HOST="tca"
LOCAL_WORKSPACE="$HOME/eon/nt"
REMOTE_WORKSPACE="~/eon/nt"
CLAUDE_DIR="$HOME/.claude"
REMOTE_CLAUDE_DIR="~/.claude"
CLAUDE_SESSIONS_DIR="$HOME/.claude/system/sessions"
REMOTE_SESSIONS_DIR="~/.claude/system/sessions"
LOG_FILE="/tmp/sage-sync-$(date +%Y%m%d-%H%M%S).log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Flags
DRY_RUN=false
VERBOSE=false
FORCE=false
PUSH_WORKSPACE=false
PULL_WORKSPACE=false
SYNC_SESSIONS=false
CHECK_STATUS=false
SYNC_ALL=false

# =============================================================================
# MODULAR IMPORTS - Defensive Truth: Source libraries with absolute paths
# This prevents import failures from working directory changes during execution
# =============================================================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/../lib"

# Source modularized libraries
source "$LIB_DIR/sage-sync-core.sh" || { echo "FATAL: Cannot load sage-sync-core.sh"; exit 1; }
source "$LIB_DIR/sage-sync-workspace.sh" || { echo "FATAL: Cannot load sage-sync-workspace.sh"; exit 1; }

# =============================================================================
# LOGGING & OUTPUT FUNCTIONS
# =============================================================================

log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
    
    case $level in
        "ERROR")   echo -e "${RED}❌ $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "INFO")    echo -e "${BLUE}ℹ️  $message${NC}" ;;
        "DEBUG")   [[ $VERBOSE == true ]] && echo -e "${CYAN}🔍 $message${NC}" ;;
    esac
}

progress() {
    local message="$1"
    echo -e "${CYAN}🔄 $message${NC}"
}

section() {
    local title="$1"
    echo
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}  $title${NC}"
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
}

# =============================================================================
# ERROR HANDLING & VALIDATION
# =============================================================================

cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        log "ERROR" "Script failed with exit code $exit_code"
        log "INFO" "Full debug log available at: $LOG_FILE"
    fi
    exit $exit_code
}

trap cleanup EXIT

# Functions are now loaded from modular libraries:
# - validate_environment() from sage-sync-core.sh
# - sync_claude_sessions() from sage-sync-core.sh  
# - check_sage_status() from sage-sync-core.sh
# - push_workspace() from sage-sync-workspace.sh
# - pull_workspace() from sage-sync-workspace.sh

# =============================================================================
# MAIN EXECUTION LOGIC
# =============================================================================

show_help() {
    cat << EOF
$SCRIPT_NAME v$VERSION - SAGE Comprehensive Sync Tool (Modular Architecture)

USAGE:
    $SCRIPT_NAME [OPTIONS] [ACTIONS]

ACTIONS:
    --push-workspace     Push local workspace to remote
    --pull-workspace     Pull remote workspace to local
    --sync-sessions      Sync Claude sessions to remote via rsync
    --status             Check SAGE models status
    --all               Execute all sync operations

OPTIONS:
    --dry-run           Show what would be done without executing
    --verbose           Enable verbose debug output
    --force             Force operations (skip some confirmations)
    --help              Show this help message

EXAMPLES:
    $SCRIPT_NAME --status --verbose
    $SCRIPT_NAME --push-workspace --sync-sessions
    $SCRIPT_NAME --all --dry-run
    $SCRIPT_NAME --pull-workspace --force

LOG FILES:
    Debug logs are saved to /tmp/sage-sync-YYYYMMDD-HHMMSS.log

WORKFLOW:
    Before switching to remote:
        $SCRIPT_NAME --push-workspace --sync-sessions
    
    Before switching to local:
        $SCRIPT_NAME --pull-workspace
    
    Status check:
        $SCRIPT_NAME --status --verbose

EOF
}

parse_arguments() {
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                log "INFO" "Dry run mode enabled"
                shift
                ;;
            --verbose)
                VERBOSE=true
                log "INFO" "Verbose mode enabled"
                shift
                ;;
            --force)
                FORCE=true
                log "INFO" "Force mode enabled"
                shift
                ;;
            --push-workspace)
                PUSH_WORKSPACE=true
                shift
                ;;
            --pull-workspace)
                PULL_WORKSPACE=true
                shift
                ;;
            --sync-sessions)
                SYNC_SESSIONS=true
                shift
                ;;
            --status)
                CHECK_STATUS=true
                shift
                ;;
            --all)
                SYNC_ALL=true
                PUSH_WORKSPACE=true
                PULL_WORKSPACE=false  # Don't pull by default in --all
                SYNC_SESSIONS=true
                CHECK_STATUS=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                log "ERROR" "Unknown option: $1"
                log "INFO" "Use --help for usage information"
                exit 1
                ;;
        esac
    done
}

main() {
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                 SAGE Comprehensive Sync Tool                ║${NC}"
    echo -e "${BLUE}║                        Version $VERSION                        ║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo
    
    log "INFO" "Starting $SCRIPT_NAME v$VERSION"
    log "INFO" "Log file: $LOG_FILE"
    log "INFO" "PID: $$"
    
    # Environment validation
    validate_environment || exit 1
    
    # Execute requested actions
    local actions_executed=false
    
    if [[ $CHECK_STATUS == true ]]; then
        check_sage_status
        actions_executed=true
    fi
    
    if [[ $PUSH_WORKSPACE == true ]]; then
        push_workspace || exit 1
        actions_executed=true
    fi
    
    if [[ $PULL_WORKSPACE == true ]]; then
        if [[ $FORCE == false ]] && [[ $actions_executed == true ]]; then
            log "WARNING" "Pull workspace after other operations may overwrite changes"
            read -p "Continue? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log "INFO" "Pull workspace skipped by user"
            else
                pull_workspace || exit 1
            fi
        else
            pull_workspace || exit 1
        fi
        actions_executed=true
    fi
    
    if [[ $SYNC_SESSIONS == true ]]; then
        sync_claude_sessions || exit 1
        actions_executed=true
    fi
    
    if [[ $actions_executed == false ]]; then
        log "WARNING" "No actions specified"
        show_help
        exit 1
    fi
    
    # Final status summary
    section "Sync Complete"
    log "SUCCESS" "All requested operations completed successfully"
    log "INFO" "Full debug log available at: $LOG_FILE"
    
    if [[ $DRY_RUN == true ]]; then
        log "INFO" "This was a dry run - no actual changes were made"
    fi
}

# =============================================================================
# SCRIPT ENTRY POINT
# =============================================================================

parse_arguments "$@"
main