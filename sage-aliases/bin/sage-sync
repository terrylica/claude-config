#!/bin/bash
# SAGE Comprehensive Sync Tool - Universal Access Command  
# Rollback Reference: c80d866 (pre-MHR modularization snapshot)
# Part of SAGE Sync Infrastructure - Bulletproof Session Preservation

set -euo pipefail  # Exit on any error, undefined vars, pipe failures

# =============================================================================
# CONFIGURATION & GLOBALS - BIDIRECTIONAL SYSTEM DETECTION
# =============================================================================

SCRIPT_NAME="sage-sync"
VERSION="2.1.0-bidirectional"

# Dynamic system detection for true bidirectional sync
CURRENT_USER="$(whoami)"
CURRENT_HOST="$(hostname)"

# Detect local system type and configure remote target
if [[ "$CURRENT_USER" == "tca" && "$CURRENT_HOST" == "el02" ]]; then
    # Running on Linux GPU workstation
    SYSTEM_TYPE="linux"
    LOCAL_USER="tca"
    LOCAL_HOST="el02"
    REMOTE_HOST="zerotier-remote"  # SSH config alias for macOS
    REMOTE_USER="terryli"
    REMOTE_HOST_REAL="Terrys-MacBook-Pro"
elif [[ "$CURRENT_USER" == "terryli" && "$CURRENT_HOST" =~ Mac ]]; then
    # Running on macOS development machine
    SYSTEM_TYPE="macos"
    LOCAL_USER="terryli"
    LOCAL_HOST="$CURRENT_HOST"
    REMOTE_HOST="tca"  # SSH config alias for Linux
    REMOTE_USER="tca"
    REMOTE_HOST_REAL="el02"
else
    echo "❌ ERROR: Unknown system configuration"
    echo "   Current user: $CURRENT_USER"
    echo "   Current host: $CURRENT_HOST"
    echo "   Supported configurations:"
    echo "   - Linux: tca@el02 ↔ terryli@macOS"
    echo "   - macOS: terryli@macOS ↔ tca@el02"
    exit 1
fi

# Focus: Claude session synchronization only (workspace uses Git)
CLAUDE_DIR="$HOME/.claude"
REMOTE_CLAUDE_DIR="~/.claude"
CLAUDE_SESSIONS_DIR="$HOME/.claude/projects"
REMOTE_SESSIONS_DIR="~/.claude/projects"

# Workspace directories (for legacy compatibility)
LOCAL_WORKSPACE="$HOME/.claude"
REMOTE_WORKSPACE="~/.claude"

LOG_FILE="/tmp/sage-sync-$(date +%Y%m%d-%H%M%S).log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Flags - Simplified for session-only sync
DRY_RUN=false
VERBOSE=false
FORCE=false
SYNC_SESSIONS=false
MIGRATE_SESSIONS=false
CHECK_STATUS=false

# =============================================================================
# MODULAR IMPORTS - Defensive Truth: Source libraries with absolute paths
# This prevents import failures from working directory changes during execution
# =============================================================================

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
LIB_DIR="$SCRIPT_DIR/../lib"

# Source modularized libraries
source "$LIB_DIR/sage-sync-core.sh" || { echo "FATAL: Cannot load sage-sync-core.sh"; exit 1; }
source "$LIB_DIR/sage-sync-workspace.sh" || { echo "FATAL: Cannot load sage-sync-workspace.sh"; exit 1; }

# =============================================================================
# LOGGING & OUTPUT FUNCTIONS
# =============================================================================

log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
    
    case $level in
        "ERROR")   echo -e "${RED}❌ $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "INFO")    echo -e "${BLUE}ℹ️  $message${NC}" ;;
        "DEBUG")   [[ $VERBOSE == true ]] && echo -e "${CYAN}🔍 $message${NC}" ;;
    esac
}

progress() {
    local message="$1"
    echo -e "${CYAN}🔄 $message${NC}"
}

section() {
    local title="$1"
    echo
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}  $title${NC}"
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
}

# =============================================================================
# ERROR HANDLING & VALIDATION
# =============================================================================

cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        log "ERROR" "Script failed with exit code $exit_code"
        log "INFO" "Full debug log available at: $LOG_FILE"
    fi
    exit $exit_code
}

trap cleanup EXIT

# Functions are now loaded from modular libraries:
# - validate_environment() from sage-sync-core.sh
# - sync_canonical_claude_sessions() from sage-sync-core.sh  
# - check_sage_status() from sage-sync-core.sh
# - push_workspace() from sage-sync-workspace.sh
# - pull_workspace() from sage-sync-workspace.sh

# =============================================================================
# MAIN EXECUTION LOGIC
# =============================================================================

show_help() {
    cat << EOF
$SCRIPT_NAME v$VERSION - Claude Session Sync Tool (Bidirectional)

🎯 PURPOSE: Synchronize Claude Code sessions across macOS ↔ Linux systems
📁 SCOPE: Claude sessions only (use Git for workspace sync)

USAGE:
    $SCRIPT_NAME [OPTIONS] [ACTIONS]

ACTIONS:
    --sync-sessions      Sync Claude sessions using official ~/.claude/projects/ format
    --migrate-sessions   Migrate sessions from legacy format to official standard  
    --status             Check SAGE models status

OPTIONS:
    --dry-run           Show what would be done without executing
    --verbose           Enable verbose debug output
    --force             Force operations (skip some confirmations)
    --help              Show this help message
    --version           Show version and system configuration

EXAMPLES:
    $SCRIPT_NAME --sync-sessions --verbose
    $SCRIPT_NAME --migrate-sessions --dry-run
    $SCRIPT_NAME --status
    $SCRIPT_NAME --sync-sessions --force

RECOMMENDED WORKFLOW:
    1. 📁 Workspace sync: Use Git (git pull/push)
    2. 🗂️ Session sync:   Use sage-sync --sync-sessions
    3. ✅ Status check:   Use sage-sync --status

BIDIRECTIONAL SUPPORT:
    • Linux (tca@el02) ↔ macOS (terryli@macOS)
    • Auto-detects local system and configures remote target
    • Uses SSH config aliases for seamless connectivity

LOG FILES:
    Debug logs saved to /tmp/sage-sync-YYYYMMDD-HHMMSS.log

EOF
}

parse_arguments() {
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                log "INFO" "Dry run mode enabled"
                shift
                ;;
            --verbose)
                VERBOSE=true
                log "INFO" "Verbose mode enabled"
                shift
                ;;
            --force)
                FORCE=true
                log "INFO" "Force mode enabled"
                shift
                ;;
            --sync-sessions)
                SYNC_SESSIONS=true
                shift
                ;;
            --migrate-sessions)
                MIGRATE_SESSIONS=true
                shift
                ;;
            --status)
                CHECK_STATUS=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --version|-v)
                echo "$SCRIPT_NAME v$VERSION - Claude Session Sync Tool (Bidirectional)"
                echo "Local System: $LOCAL_USER@$LOCAL_HOST ($SYSTEM_TYPE)"
                echo "Remote Target: $REMOTE_USER@$REMOTE_HOST_REAL"
                echo "Scope: Claude sessions only (use Git for workspace)"
                exit 0
                ;;
            *)
                log "ERROR" "Unknown option: $1"
                log "INFO" "Use --help for usage information"
                exit 1
                ;;
        esac
    done
}

# =============================================================================
# SYSTEM INFO DISPLAY
# =============================================================================

show_system_info() {
    echo -e "${CYAN}🖥️  System Configuration:${NC}"
    echo -e "   ${GREEN}Local System:${NC}  $LOCAL_USER@$LOCAL_HOST ($SYSTEM_TYPE)"
    echo -e "   ${YELLOW}Remote System:${NC} $REMOTE_USER@$REMOTE_HOST_REAL"
    echo -e "   ${BLUE}SSH Target:${NC}    $REMOTE_HOST"
    echo
}

main() {
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                 SAGE Comprehensive Sync Tool                ║${NC}"
    echo -e "${BLUE}║                     Version $VERSION (Bidirectional)                     ║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo
    
    show_system_info
    
    log "INFO" "Starting $SCRIPT_NAME v$VERSION on $SYSTEM_TYPE system"
    log "INFO" "Local: $LOCAL_USER@$LOCAL_HOST → Remote: $REMOTE_USER@$REMOTE_HOST_REAL"
    log "INFO" "Log file: $LOG_FILE"
    log "INFO" "PID: $$"
    
    # Environment validation
    validate_environment || exit 1
    
    # Execute requested actions
    local actions_executed=false
    
    if [[ $CHECK_STATUS == true ]]; then
        check_sage_status
        actions_executed=true
    fi
    
    # Workspace sync removed - use Git instead
    
    if [[ $MIGRATE_SESSIONS == true ]]; then
        section "Session Migration to Official Format"
        log "INFO" "Migrating sessions from custom format to official ~/.claude/projects/"
        log "INFO" "Using session recovery script for safe migration"
        if [[ $DRY_RUN == true ]]; then
            log "INFO" "DRY RUN: Would run $HOME/.claude/tools/session-recovery.sh"
        else
            if [[ -x "$HOME/.claude/tools/session-recovery.sh" ]]; then
                "$HOME/.claude/tools/session-recovery.sh" || exit 1
            else
                log "ERROR" "Session recovery script not found or not executable"
                log "INFO" "Expected: $HOME/.claude/tools/session-recovery.sh"
                exit 1
            fi
        fi
        actions_executed=true
    fi
    
    if [[ $SYNC_SESSIONS == true ]]; then
        sync_claude_sessions || exit 1
        actions_executed=true
    fi
    
    if [[ $actions_executed == false ]]; then
        log "WARNING" "No actions specified"
        show_help
        exit 1
    fi
    
    # Final status summary
    section "Sync Complete"
    log "SUCCESS" "All requested operations completed successfully"
    log "INFO" "Full debug log available at: $LOG_FILE"
    
    if [[ $DRY_RUN == true ]]; then
        log "INFO" "This was a dry run - no actual changes were made"
    fi
}

# =============================================================================
# SCRIPT ENTRY POINT
# =============================================================================

parse_arguments "$@"
main