#!/bin/bash
# SAGE Comprehensive Sync Tool - Universal Access Command
# Part of SAGE Aliases Tool - ~/.claude/tools/sage-aliases/

set -euo pipefail  # Exit on any error, undefined vars, pipe failures

# =============================================================================
# CONFIGURATION & GLOBALS
# =============================================================================

SCRIPT_NAME="sage-sync"
VERSION="1.0.0"
REMOTE_HOST="tca"
LOCAL_WORKSPACE="$HOME/eon/nt"
REMOTE_WORKSPACE="~/eon/nt"
CLAUDE_DIR="$HOME/.claude"
REMOTE_CLAUDE_DIR="~/.claude"
CLAUDE_SESSIONS_DIR="$HOME/.claude/system/sessions"
REMOTE_SESSIONS_DIR="~/.claude/system/sessions"
LOG_FILE="/tmp/sage-sync-$(date +%Y%m%d-%H%M%S).log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Flags
DRY_RUN=false
VERBOSE=false
FORCE=false
PUSH_WORKSPACE=false
PULL_WORKSPACE=false
SYNC_SESSIONS=false
CHECK_STATUS=false
SYNC_ALL=false

# =============================================================================
# LOGGING & OUTPUT FUNCTIONS
# =============================================================================

log() {
    local level=$1
    shift
    local message="$*"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    
    echo "[$timestamp] [$level] $message" | tee -a "$LOG_FILE"
    
    case $level in
        "ERROR")   echo -e "${RED}❌ $message${NC}" ;;
        "SUCCESS") echo -e "${GREEN}✅ $message${NC}" ;;
        "WARNING") echo -e "${YELLOW}⚠️  $message${NC}" ;;
        "INFO")    echo -e "${BLUE}ℹ️  $message${NC}" ;;
        "DEBUG")   [[ $VERBOSE == true ]] && echo -e "${CYAN}🔍 $message${NC}" ;;
    esac
}

progress() {
    local message="$1"
    echo -e "${CYAN}🔄 $message${NC}"
}

section() {
    local title="$1"
    echo
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
    echo -e "${BLUE}  $title${NC}"
    echo -e "${BLUE}═══════════════════════════════════════════════════════════════${NC}"
}

# =============================================================================
# ERROR HANDLING & VALIDATION
# =============================================================================

cleanup() {
    local exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
        log "ERROR" "Script failed with exit code $exit_code"
        log "INFO" "Full debug log available at: $LOG_FILE"
    fi
    exit $exit_code
}

trap cleanup EXIT

validate_environment() {
    section "Environment Validation"
    
    local errors=0
    
    # Check local workspace
    if [[ ! -d "$LOCAL_WORKSPACE" ]]; then
        log "ERROR" "Local workspace not found: $LOCAL_WORKSPACE"
        ((errors++))
    else
        log "SUCCESS" "Local workspace found: $LOCAL_WORKSPACE"
    fi
    
    # Check Claude directory
    if [[ ! -d "$CLAUDE_DIR" ]]; then
        log "ERROR" "Claude directory not found: $CLAUDE_DIR"
        ((errors++))
    else
        log "SUCCESS" "Claude directory found: $CLAUDE_DIR"
    fi
    
    # Check required commands
    local required_commands=("rsync" "ssh")
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            log "ERROR" "Required command not found: $cmd"
            ((errors++))
        else
            log "DEBUG" "Command available: $cmd"
        fi
    done
    
    # Check git availability for workspace backup (optional)
    if command -v "git" &> /dev/null; then
        log "DEBUG" "Command available: git (for workspace backup)"
    else
        log "DEBUG" "Git not available (workspace backup disabled)"
    fi
    
    # Test SSH connection
    progress "Testing SSH connection to $REMOTE_HOST..."
    if ssh -o ConnectTimeout=10 -o BatchMode=yes "$REMOTE_HOST" "echo 'SSH connection successful'" &>/dev/null; then
        log "SUCCESS" "SSH connection to $REMOTE_HOST successful"
    else
        log "ERROR" "SSH connection to $REMOTE_HOST failed"
        log "INFO" "Troubleshooting: Check ZeroTier connection with 'sudo zerotier-cli peers'"
        ((errors++))
    fi
    
    # Check remote workspace
    if ssh -o ConnectTimeout=10 "$REMOTE_HOST" "test -d $REMOTE_WORKSPACE" &>/dev/null; then
        log "SUCCESS" "Remote workspace found: $REMOTE_WORKSPACE"
    else
        log "WARNING" "Remote workspace not found, will create: $REMOTE_WORKSPACE"
        if [[ $DRY_RUN == false ]]; then
            ssh "$REMOTE_HOST" "mkdir -p $REMOTE_WORKSPACE" || {
                log "ERROR" "Failed to create remote workspace"
                ((errors++))
            }
        fi
    fi
    
    # Check disk space
    local local_space=$(df "$HOME" | awk 'NR==2 {print $4}')
    local remote_space=$(ssh "$REMOTE_HOST" "df ~ | awk 'NR==2 {print \$4}'" 2>/dev/null || echo "0")
    
    log "INFO" "Local disk space available: ${local_space}KB"
    log "INFO" "Remote disk space available: ${remote_space}KB"
    
    if [[ $local_space -lt 1000000 ]]; then  # Less than 1GB
        log "WARNING" "Low local disk space: ${local_space}KB"
    fi
    
    if [[ $remote_space -lt 1000000 ]]; then  # Less than 1GB
        log "WARNING" "Low remote disk space: ${remote_space}KB"
    fi
    
    if [[ $errors -gt 0 ]]; then
        log "ERROR" "Environment validation failed with $errors errors"
        return 1
    fi
    
    log "SUCCESS" "Environment validation passed"
    return 0
}

# =============================================================================
# WORKSPACE SYNC FUNCTIONS
# =============================================================================

push_workspace() {
    section "Pushing Workspace to Remote"
    
    if [[ $DRY_RUN == true ]]; then
        log "INFO" "DRY RUN: Would push $LOCAL_WORKSPACE/ to $REMOTE_HOST:$REMOTE_WORKSPACE/"
        rsync -avzn --delete --stats "$LOCAL_WORKSPACE/" "$REMOTE_HOST:$REMOTE_WORKSPACE/" | tee -a "$LOG_FILE"
        return 0
    fi
    
    progress "Starting workspace push..."
    
    # Pre-sync validation
    local local_files=$(find "$LOCAL_WORKSPACE" -type f | wc -l)
    local local_size=$(du -sk "$LOCAL_WORKSPACE" | cut -f1)
    
    log "INFO" "Local workspace: $local_files files, ${local_size}KB"
    
    # Execute rsync with comprehensive logging
    local rsync_cmd="rsync -avz --delete --stats --human-readable --progress"
    
    if [[ $VERBOSE == true ]]; then
        rsync_cmd="$rsync_cmd --verbose"
    fi
    
    log "DEBUG" "Executing: $rsync_cmd \"$LOCAL_WORKSPACE/\" \"$REMOTE_HOST:$REMOTE_WORKSPACE/\""
    
    if $rsync_cmd "$LOCAL_WORKSPACE/" "$REMOTE_HOST:$REMOTE_WORKSPACE/" 2>&1 | tee -a "$LOG_FILE"; then
        # Post-sync validation
        local remote_files=$(ssh "$REMOTE_HOST" "find $REMOTE_WORKSPACE -type f | wc -l" 2>/dev/null || echo "0")
        local remote_size=$(ssh "$REMOTE_HOST" "du -sk $REMOTE_WORKSPACE | cut -f1" 2>/dev/null || echo "0")
        
        log "INFO" "Remote workspace after sync: $remote_files files, ${remote_size}KB"
        
        if [[ $local_files -eq $remote_files ]]; then
            log "SUCCESS" "Workspace push completed successfully"
            log "INFO" "File count matches: $local_files files"
        else
            log "WARNING" "File count mismatch: local=$local_files, remote=$remote_files"
            log "INFO" "This may be normal if .gitignore patterns differ"
        fi
    else
        log "ERROR" "Workspace push failed"
        return 1
    fi
}

pull_workspace() {
    section "Pulling Workspace from Remote"
    
    if [[ $DRY_RUN == true ]]; then
        log "INFO" "DRY RUN: Would pull $REMOTE_HOST:$REMOTE_WORKSPACE/ to $LOCAL_WORKSPACE/"
        rsync -avzn --delete --stats "$REMOTE_HOST:$REMOTE_WORKSPACE/" "$LOCAL_WORKSPACE/" | tee -a "$LOG_FILE"
        return 0
    fi
    
    progress "Starting workspace pull..."
    
    # Backup local changes if they exist
    if [[ -d "$LOCAL_WORKSPACE/.git" ]]; then
        progress "Checking for local changes..."
        cd "$LOCAL_WORKSPACE"
        if ! git diff --quiet || ! git diff --cached --quiet; then
            local backup_branch="backup-before-pull-$(date +%Y%m%d-%H%M%S)"
            log "WARNING" "Local changes detected, creating backup branch: $backup_branch"
            git checkout -b "$backup_branch" && git add -A && git commit -m "Backup before pull sync" || {
                log "ERROR" "Failed to create backup branch"
                return 1
            }
            git checkout master
        fi
    fi
    
    # Pre-sync validation
    local remote_files=$(ssh "$REMOTE_HOST" "find $REMOTE_WORKSPACE -type f | wc -l" 2>/dev/null || echo "0")
    local remote_size=$(ssh "$REMOTE_HOST" "du -sk $REMOTE_WORKSPACE | cut -f1" 2>/dev/null || echo "0")
    
    log "INFO" "Remote workspace: $remote_files files, ${remote_size}KB"
    
    # Execute rsync
    local rsync_cmd="rsync -avz --delete --stats --human-readable --progress"
    
    if [[ $VERBOSE == true ]]; then
        rsync_cmd="$rsync_cmd --verbose"
    fi
    
    log "DEBUG" "Executing: $rsync_cmd \"$REMOTE_HOST:$REMOTE_WORKSPACE/\" \"$LOCAL_WORKSPACE/\""
    
    if $rsync_cmd "$REMOTE_HOST:$REMOTE_WORKSPACE/" "$LOCAL_WORKSPACE/" 2>&1 | tee -a "$LOG_FILE"; then
        # Post-sync validation
        local local_files=$(find "$LOCAL_WORKSPACE" -type f | wc -l)
        local local_size=$(du -sk "$LOCAL_WORKSPACE" | cut -f1)
        
        log "INFO" "Local workspace after sync: $local_files files, ${local_size}KB"
        log "SUCCESS" "Workspace pull completed successfully"
    else
        log "ERROR" "Workspace pull failed"
        return 1
    fi
}

# =============================================================================
# CLAUDE SESSION SYNC FUNCTIONS
# =============================================================================

sync_claude_sessions() {
    section "Syncing Claude Sessions"
    
    # Check if Claude sessions directory exists
    if [[ ! -d "$CLAUDE_SESSIONS_DIR" ]]; then
        log "WARNING" "No Claude sessions directory found at $CLAUDE_SESSIONS_DIR"
        log "INFO" "Creating empty sessions directory"
        if [[ $DRY_RUN == false ]]; then
            mkdir -p "$CLAUDE_SESSIONS_DIR" || {
                log "ERROR" "Failed to create Claude sessions directory"
                return 1
            }
        fi
    fi
    
    # Count local sessions
    local local_sessions=$(find "$CLAUDE_SESSIONS_DIR/" -name "*.jsonl" 2>/dev/null | wc -l)
    local local_size=$(du -sk "$CLAUDE_SESSIONS_DIR/" 2>/dev/null | cut -f1 || echo "0")
    
    log "INFO" "Local Claude sessions: $local_sessions files, ${local_size}KB"
    
    if [[ $DRY_RUN == true ]]; then
        log "INFO" "DRY RUN: Would sync Claude sessions to remote"
        rsync -avzn --delete "$CLAUDE_SESSIONS_DIR/" "$REMOTE_HOST:$REMOTE_SESSIONS_DIR/" | tee -a "$LOG_FILE"
        return 0
    fi
    
    # Execute rsync session sync with path corruption protection
    progress "Syncing Claude sessions to remote..."
    
    local rsync_cmd="rsync -avz --delete --stats --human-readable"
    
    # Exclude problematic directory-named sessions that cause path conflicts
    rsync_cmd="$rsync_cmd --exclude='-*' --include='*.json' --include='*.jsonl' --include='projects/'"
    
    if [[ $VERBOSE == true ]]; then
        rsync_cmd="$rsync_cmd --progress"
    fi
    
    log "DEBUG" "Executing: $rsync_cmd \"$CLAUDE_SESSIONS_DIR/\" \"$REMOTE_HOST:$REMOTE_SESSIONS_DIR/\""
    
    if $rsync_cmd "$CLAUDE_SESSIONS_DIR/" "$REMOTE_HOST:$REMOTE_SESSIONS_DIR/" 2>&1 | tee -a "$LOG_FILE"; then
        # Post-sync validation
        local remote_sessions=$(ssh -o ConnectTimeout=10 "$REMOTE_HOST" "find $REMOTE_SESSIONS_DIR/ -name '*.jsonl' | wc -l" 2>/dev/null || echo "0")
        local remote_size=$(ssh -o ConnectTimeout=10 "$REMOTE_HOST" "du -sk $REMOTE_SESSIONS_DIR/ | cut -f1" 2>/dev/null || echo "0")
        
        log "INFO" "Remote Claude sessions after sync: $remote_sessions files, ${remote_size}KB"
        
        if [[ $local_sessions -eq $remote_sessions ]]; then
            log "SUCCESS" "Claude sessions sync completed successfully"
            log "INFO" "Session count matches: $local_sessions files"
        else
            log "WARNING" "Session count mismatch: local=$local_sessions, remote=$remote_sessions"
            log "INFO" "This may indicate sync issues or network problems"
        fi
    else
        log "ERROR" "Claude sessions sync failed"
        return 1
    fi
}

# =============================================================================
# STATUS & DIAGNOSTIC FUNCTIONS
# =============================================================================

check_sage_status() {
    section "SAGE Models Status Check"
    
    # Local models
    log "INFO" "Checking local models..."
    
    local models=("alphaforge" "catch22" "tsfresh" "nautilus_trader" "data-source-manager" "finplot")
    for model in "${models[@]}"; do
        if [[ -d "$LOCAL_WORKSPACE/repos/$model" ]]; then
            log "SUCCESS" "Local $model: Available"
        else
            log "WARNING" "Local $model: Missing"
        fi
    done
    
    # Python packages
    cd "$LOCAL_WORKSPACE"
    for pkg in "pycatch22" "tsfresh"; do
        if uv run python -c "import $pkg; print('$pkg available')" &>/dev/null; then
            log "SUCCESS" "Local $pkg: Available"
        else
            log "WARNING" "Local $pkg: Not installed"
        fi
    done
    
    # Remote models (if accessible)
    log "INFO" "Checking remote models..."
    
    if ssh -o ConnectTimeout=5 "$REMOTE_HOST" "test -d $REMOTE_WORKSPACE" &>/dev/null; then
        for model in "${models[@]}"; do
            if ssh "$REMOTE_HOST" "test -d $REMOTE_WORKSPACE/repos/$model" &>/dev/null; then
                log "SUCCESS" "Remote $model: Available"
            else
                log "WARNING" "Remote $model: Missing"
            fi
        done
        
        # Remote Python packages
        if ssh "$REMOTE_HOST" "cd $REMOTE_WORKSPACE && source .venv/bin/activate && python3 -c 'import torch; print(f\"PyTorch CUDA: {torch.cuda.is_available()}\")'" &>/dev/null; then
            log "SUCCESS" "Remote TiRex GPU: Available"
        else
            log "WARNING" "Remote TiRex GPU: Not available"
        fi
    else
        log "WARNING" "Remote environment not accessible for status check"
    fi
}

# =============================================================================
# MAIN EXECUTION LOGIC
# =============================================================================

show_help() {
    cat << EOF
$SCRIPT_NAME v$VERSION - SAGE Comprehensive Sync Tool

USAGE:
    $SCRIPT_NAME [OPTIONS] [ACTIONS]

ACTIONS:
    --push-workspace     Push local workspace to remote
    --pull-workspace     Pull remote workspace to local
    --sync-sessions      Sync Claude sessions to remote via rsync
    --status             Check SAGE models status
    --all               Execute all sync operations

OPTIONS:
    --dry-run           Show what would be done without executing
    --verbose           Enable verbose debug output
    --force             Force operations (skip some confirmations)
    --help              Show this help message

EXAMPLES:
    $SCRIPT_NAME --status --verbose
    $SCRIPT_NAME --push-workspace --sync-sessions
    $SCRIPT_NAME --all --dry-run
    $SCRIPT_NAME --pull-workspace --force

LOG FILES:
    Debug logs are saved to /tmp/sage-sync-YYYYMMDD-HHMMSS.log

WORKFLOW:
    Before switching to remote:
        $SCRIPT_NAME --push-workspace --sync-sessions
    
    Before switching to local:
        $SCRIPT_NAME --pull-workspace
    
    Status check:
        $SCRIPT_NAME --status --verbose

EOF
}

parse_arguments() {
    if [[ $# -eq 0 ]]; then
        show_help
        exit 0
    fi
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            --dry-run)
                DRY_RUN=true
                log "INFO" "Dry run mode enabled"
                shift
                ;;
            --verbose)
                VERBOSE=true
                log "INFO" "Verbose mode enabled"
                shift
                ;;
            --force)
                FORCE=true
                log "INFO" "Force mode enabled"
                shift
                ;;
            --push-workspace)
                PUSH_WORKSPACE=true
                shift
                ;;
            --pull-workspace)
                PULL_WORKSPACE=true
                shift
                ;;
            --sync-sessions)
                SYNC_SESSIONS=true
                shift
                ;;
            --status)
                CHECK_STATUS=true
                shift
                ;;
            --all)
                SYNC_ALL=true
                PUSH_WORKSPACE=true
                PULL_WORKSPACE=false  # Don't pull by default in --all
                SYNC_SESSIONS=true
                CHECK_STATUS=true
                shift
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            *)
                log "ERROR" "Unknown option: $1"
                log "INFO" "Use --help for usage information"
                exit 1
                ;;
        esac
    done
}

main() {
    echo -e "${BLUE}╔══════════════════════════════════════════════════════════════╗${NC}"
    echo -e "${BLUE}║                 SAGE Comprehensive Sync Tool                ║${NC}"
    echo -e "${BLUE}║                        Version $VERSION                        ║${NC}"
    echo -e "${BLUE}╚══════════════════════════════════════════════════════════════╝${NC}"
    echo
    
    log "INFO" "Starting $SCRIPT_NAME v$VERSION"
    log "INFO" "Log file: $LOG_FILE"
    log "INFO" "PID: $$"
    
    # Environment validation
    validate_environment || exit 1
    
    # Execute requested actions
    local actions_executed=false
    
    if [[ $CHECK_STATUS == true ]]; then
        check_sage_status
        actions_executed=true
    fi
    
    if [[ $PUSH_WORKSPACE == true ]]; then
        push_workspace || exit 1
        actions_executed=true
    fi
    
    if [[ $PULL_WORKSPACE == true ]]; then
        if [[ $FORCE == false ]] && [[ $actions_executed == true ]]; then
            log "WARNING" "Pull workspace after other operations may overwrite changes"
            read -p "Continue? (y/N): " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                log "INFO" "Pull workspace skipped by user"
            else
                pull_workspace || exit 1
            fi
        else
            pull_workspace || exit 1
        fi
        actions_executed=true
    fi
    
    if [[ $SYNC_SESSIONS == true ]]; then
        sync_claude_sessions || exit 1
        actions_executed=true
    fi
    
    if [[ $actions_executed == false ]]; then
        log "WARNING" "No actions specified"
        show_help
        exit 1
    fi
    
    # Final status summary
    section "Sync Complete"
    log "SUCCESS" "All requested operations completed successfully"
    log "INFO" "Full debug log available at: $LOG_FILE"
    
    if [[ $DRY_RUN == true ]]; then
        log "INFO" "This was a dry run - no actual changes were made"
    fi
}

# =============================================================================
# SCRIPT ENTRY POINT
# =============================================================================

parse_arguments "$@"
main